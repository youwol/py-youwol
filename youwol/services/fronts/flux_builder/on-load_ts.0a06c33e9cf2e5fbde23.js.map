{"version":3,"file":"on-load_ts.0a06c33e9cf2e5fbde23.js","sources":["webpack:///./builder-editor/builder-plots/box-selector-plotter.ts","webpack:///./builder-editor/builder-plots/connections-plotter.ts","webpack:///./builder-editor/builder-plots/descriptions-boxes-plotter.ts","webpack:///./builder-editor/builder-plots/drawing-utils.ts","webpack:///./builder-editor/builder-plots/extension.ts","webpack:///./builder-editor/builder-plots/index.ts","webpack:///./builder-editor/builder-plots/models-view.ts","webpack:///./builder-editor/builder-plots/modules-plotter.ts","webpack:///./builder-editor/builder-plots/plugins-plotter.ts","webpack:///./builder-editor/builder-plots/workflow-plotter.ts","webpack:///./builder-editor/builder-state/app-debug.environment.ts","webpack:///./builder-editor/builder-state/app-extensions-observables.service.ts","webpack:///./builder-editor/builder-state/app-observables.service.ts","webpack:///./builder-editor/builder-state/app-store-connections.ts","webpack:///./builder-editor/builder-state/app-store-dependencies.ts","webpack:///./builder-editor/builder-state/app-store-description-box.ts","webpack:///./builder-editor/builder-state/app-store-layer.ts","webpack:///./builder-editor/builder-state/app-store-modules-group.ts","webpack:///./builder-editor/builder-state/app-store-modules.ts","webpack:///./builder-editor/builder-state/app-store-plugins.ts","webpack:///./builder-editor/builder-state/app-store-runner-rendering.ts","webpack:///./builder-editor/builder-state/app-store.ts","webpack:///./builder-editor/builder-state/code-editor-broadcast.ts","webpack:///./builder-editor/builder-state/extension.ts","webpack:///./builder-editor/builder-state/factory-utils.ts","webpack:///./builder-editor/builder-state/index.ts","webpack:///./builder-editor/builder-state/observables-plotters.ts","webpack:///./builder-editor/builder-state/project-delta.ts","webpack:///./builder-editor/builder-state/utils.ts","webpack:///./builder-editor/commands.ts","webpack:///./builder-editor/context-menu/context-menu.ts","webpack:///./builder-editor/context-menu/index.ts","webpack:///./builder-editor/context-menu/nodes.ts","webpack:///./builder-editor/drawing-utils.ts","webpack:///./builder-editor/index.ts","webpack:///./builder-editor/panel-module-attributes.ts","webpack:///./builder-editor/panel-suggestion.ts","webpack:///./builder-editor/panels.ts","webpack:///./builder-editor/utils.view.ts","webpack:///./builder-editor/views/adaptor-editor.view.ts","webpack:///./builder-editor/views/assets-explorer.view.ts","webpack:///./builder-editor/views/auto-form.view.ts","webpack:///./builder-editor/views/code-editor.view.ts","webpack:///./builder-editor/views/code-property-editor.view.ts","webpack:///./builder-editor/views/configuration-status.view.ts","webpack:///./builder-editor/views/connection-settings.view.ts","webpack:///./builder-editor/views/context.view.ts","webpack:///./builder-editor/views/data-tree.view.ts","webpack:///./builder-editor/views/expectation.view.ts","webpack:///./builder-editor/views/import-modules.view.ts","webpack:///./builder-editor/views/index.ts","webpack:///./builder-editor/views/info.view.ts","webpack:///./builder-editor/views/input-status.view.ts","webpack:///./builder-editor/views/journals.view.ts","webpack:///./builder-editor/views/modal.view.ts","webpack:///./builder-editor/views/module-settings.view.ts","webpack:///./builder-editor/views/share-uri.view.ts","webpack:///./clients/assets-browser.client.ts","webpack:///./layout-editor/blocks.ts","webpack:///./layout-editor/code-editors.ts","webpack:///./layout-editor/commands.ts","webpack:///./layout-editor/editor.ts","webpack:///./layout-editor/flux-blocks.ts","webpack:///./layout-editor/flux-rendering-components.ts","webpack:///./layout-editor/index.ts","webpack:///./layout-editor/panels.ts","webpack:///./layout-editor/patches.ts","webpack:///./layout-editor/resources-initialisation.ts","webpack:///./layout-editor/style-manager.ts","webpack:///./layout-editor/utils.ts","webpack:///./notification.ts","webpack:///./on-load.ts","webpack:///./top-banner/commands.ts","webpack:///./top-banner/layer-picker.view.ts","webpack:///./top-banner/panels.ts"],"sourcesContent":["\nimport { DrawingArea } from '@youwol/flux-svg-plots';\n\nimport { AppStore,AppBuildViewObservables, AppObservables,AppDebugEnvironment} \nfrom '../builder-state/index';\n\nimport { getBoundingBox } from './drawing-utils';\nimport { ModulesPlotter } from './modules-plotter';\n\nexport class BoxSelectorPlotter{\n    \n    debugSingleton = AppDebugEnvironment.getInstance()\n    \n    start = undefined\n    rect = undefined\n    constructor( public readonly drawingArea : DrawingArea,\n        public readonly plottersObservables: AppBuildViewObservables,\n        public readonly appObservables: AppObservables,\n        public readonly appStore : AppStore,\n        public readonly modulesPlotter: ModulesPlotter){        \n            \n    }\n\n    startSelection(coordinates){\n\n        //this.appObservables.unselect$.next()\n        coordinates = this.convert(coordinates)\n        this.rect = this.drawingArea.drawingGroup\n        .append(\"rect\")\n        .attr(\"class\",\"rectangle-selector\")\n        .attr(\"x\", coordinates[0])\n        .attr(\"y\", coordinates[1])\n        .attr(\"height\", 0)\n        .attr(\"width\", 0);\n\n        this.start = coordinates\n    }\n    finishSelection(coordinates){\n        \n        this.start = undefined\n        let modulesId = BoxSelectorPlotter.getSelectedModules(this.appStore.getActiveModulesView(), \n            this.drawingArea,this.rect)\n        let finalRect = getBoundingBox(modulesId,10,this.drawingArea)\n\n        this.rect/*.transition()\n        .duration(500)\n        .attr(\"x\",finalRect.x)\n        .attr(\"y\",finalRect.y)\n        .attr(\"width\",finalRect.width)\n        .attr(\"height\",finalRect.height)*/\n        .remove()\n        this.appStore.select({\n            modulesId:modulesId, \n            connectionsId:[]})\n        //setTimeout(() => this.wfPlotter.setSelectionBox(modulesId), 500)\n    }\n    moveTo(coordinates){\n        if( !this.start)\n            return \n        coordinates = this.convert(coordinates)\n        this.rect.attr(\"width\", Math.max(0, coordinates[0] - +this.rect.attr(\"x\")))\n        .attr(\"height\", Math.max(0, coordinates[1] - +this.rect.attr(\"y\")));\n\n        let highlighteds = BoxSelectorPlotter.getSelectedModules(this.appStore.getActiveModulesView(), \n            this.drawingArea,this.rect)\n        this.modulesPlotter.highlight(highlighteds )\n    }\n    \n    static getSelectedModules(modulesView,drawingArea, rect) : Array<String> {\n        let coors = modulesView\n        .map(m => [\n            m.moduleId,\n            drawingArea.hScale(m.xWorld), \n            drawingArea.vScale(m.yWorld)])\n\n        let x0 = Number(rect.attr(\"x\"))\n        let y0 = Number(rect.attr(\"y\"))\n        let x1 = x0 + Number(rect.attr(\"width\"))\n        let y1 = y0 + Number(rect.attr(\"height\"))\n        return coors\n        .filter( ([_,x,y]) =>  x > x0  &&  x < x1 && y > y0 &&  y < y1)\n        .map( ([mid,x,y] :[string,number,number]) =>mid)\n        \n    }\n    convert([x,y]) {\n        let transform = this.drawingArea.overallTranform\n       \n        return [(x-transform.translateX)/transform.scale,(y-transform.translateY)/transform.scale]\n    }\n}","\r\nimport { Subject, combineLatest } from \"rxjs\";\r\nimport * as operators from \"rxjs/operators\";\r\nimport { ModuleFlux, Connection, GroupModules, createHTMLElement} from '@youwol/flux-core';\r\nimport { DrawingArea,LinkPlot,toCssName } from '@youwol/flux-svg-plots';\r\n\r\nimport { PlotterConnectionEntity } from \"./models-view\";\r\nimport { AppStore,AppBuildViewObservables, AppObservables,AppDebugEnvironment, \r\n    LogLevel}  from '../builder-state/index';\r\n\r\nlet wirelessIcon = `\r\n<linearGradient id=\"a\" gradientTransform=\"matrix(1 0 0 -1 0 -22278)\" gradientUnits=\"userSpaceOnUse\" x1=\"0\" x2=\"512\" y1=\"-22534\" y2=\"-22534\"><stop offset=\"0\" stop-color=\"#00f1ff\"/><stop offset=\".231\" stop-color=\"#00d8ff\"/><stop offset=\".5138\" stop-color=\"#00c0ff\"/><stop offset=\".7773\" stop-color=\"#00b2ff\"/><stop offset=\"1\" stop-color=\"#00adff\"/></linearGradient>\r\n<path d=\"m512 256c0 141.386719-114.613281 256-256 256s-256-114.613281-256-256 114.613281-256 256-256 256 114.613281 256 256zm0 0\" fill=\"url(#a)\"/><g fill=\"#fff\"><path d=\"m279.050781 385.15625c0 13.128906-10.640625 23.773438-23.769531 23.773438s-23.773438-10.644532-23.773438-23.773438 10.644532-23.769531 23.773438-23.769531 23.769531 10.640625 23.769531 23.769531zm0 0\"/><path d=\"m85.996094 209.265625c-3.660156 0-7.332032-1.332031-10.222656-4.027344-6.058594-5.644531-6.394532-15.136719-.746094-21.199219 47.460937-50.921874 111.730468-78.964843 180.96875-78.964843 69.246094 0 133.515625 28.042969 180.976562 78.964843 5.648438 6.0625 5.3125 15.554688-.746094 21.199219-6.058593 5.652344-15.550781 5.316407-21.199218-.742187-41.726563-44.769532-98.203125-69.421875-159.023438-69.421875-60.832031 0-117.304687 24.652343-159.03125 69.421875-2.953125 3.167968-6.960937 4.769531-10.976562 4.769531zm0 0\"/><path d=\"m138.582031 269.089844c-3.820312 0-7.640625-1.449219-10.566406-4.355469-5.878906-5.832031-5.914063-15.332031-.082031-21.210937 35.101562-35.375 80.582031-54.859376 128.0625-54.859376 47.472656 0 92.953125 19.480469 128.0625 54.859376 5.835937 5.878906 5.800781 15.375-.078125 21.210937-5.882813 5.835937-15.378907 5.800781-21.214844-.078125-29.433594-29.660156-67.351563-45.992188-106.769531-45.992188-39.421875 0-77.339844 16.332032-106.765625 45.988282-2.933594 2.957031-6.789063 4.4375-10.648438 4.4375zm0 0\"/><path d=\"m315.84375 328.84375c-3.816406 0-7.632812-1.445312-10.558594-4.34375-13.234375-13.113281-32.636718-21.589844-49.421875-21.589844-.003906 0-.003906 0-.007812 0h-1.039063c-.003906 0-.007812 0-.007812 0-16.789063 0-36.1875 8.472656-49.425782 21.589844-5.882812 5.828125-15.378906 5.785156-21.210937-.097656-5.832031-5.886719-5.789063-15.382813.097656-21.214844 18.847657-18.675781 45.875-30.277344 70.535157-30.277344h.011718 1.039063.011719c24.660156 0 51.683593 11.601563 70.535156 30.277344 5.882812 5.832031 5.929687 15.328125.097656 21.214844-2.933594 2.957031-6.796875 4.441406-10.65625 4.441406zm0 0\"/></g>\r\n`\r\nlet svgAdaptorGroup = {\r\n    tag: \"g\", class:'adaptor', attributes:{},\r\n    style:{visibility:'visible'},\r\n    children:[\r\n        {tag:'path', attributes: {d:\"M211.331,190.817c-1.885-1.885-4.396-2.922-7.071-2.922c-2.675,0-5.186,1.038-7.07,2.922l-32.129,32.129l-24.403-24.403   l32.129-32.129c3.897-3.899,3.897-10.243-0.001-14.142l-11.125-11.125c-1.885-1.885-4.396-2.922-7.071-2.922   c-2.675,0-5.187,1.038-7.07,2.923l-32.128,32.128l-18.256-18.256c-1.885-1.885-4.396-2.922-7.071-2.922   c-2.675,0-5.186,1.038-7.07,2.922L66.95,171.062c-3.899,3.899-3.899,10.243,0,14.143l3.802,3.802   c-1.596,1.086-3.103,2.325-4.496,3.718l-46.679,46.679c-5.836,5.835-9.049,13.62-9.049,21.92c0,8.301,3.214,16.086,9.049,21.92   l17.943,17.943L5.126,333.582c-6.835,6.835-6.835,17.915,0,24.749c3.417,3.417,7.896,5.125,12.374,5.125s8.957-1.708,12.374-5.125   l32.395-32.395l18.091,18.091c5.834,5.835,13.619,9.048,21.92,9.048s16.086-3.213,21.92-9.048l46.679-46.679   c1.394-1.393,2.633-2.901,3.719-4.497l3.802,3.802c1.885,1.885,4.396,2.923,7.07,2.923c2.675,0,5.186-1.038,7.072-2.923   l16.04-16.042c1.887-1.885,2.925-4.396,2.925-7.072c0-2.676-1.038-5.187-2.924-7.071l-18.255-18.255l32.129-32.129   c3.898-3.899,3.898-10.244-0.001-14.142L211.331,190.817z\" }},\r\n        {tag:'path', attributes: {d:\"M358.33,5.126c-6.834-6.834-17.914-6.834-24.748,0l-32.686,32.686l-17.944-17.944c-5.834-5.835-13.619-9.048-21.92-9.048   c-8.301,0-16.086,3.213-21.92,9.048l-46.679,46.679c-1.393,1.393-2.632,2.9-3.719,4.497l-3.802-3.802   c-1.885-1.885-4.396-2.923-7.071-2.923c-2.675,0-5.187,1.038-7.071,2.923l-16.042,16.042c-1.886,1.885-2.924,4.396-2.924,7.072   c0,2.675,1.038,5.187,2.924,7.071l111.447,111.448c1.885,1.885,4.396,2.923,7.071,2.923c2.676,0,5.186-1.038,7.071-2.923   l16.043-16.043c3.899-3.899,3.899-10.243,0-14.142l-3.801-3.801c1.596-1.086,3.103-2.325,4.496-3.719l46.679-46.679   c5.835-5.834,9.049-13.62,9.049-21.92s-3.213-16.086-9.049-21.92l-18.09-18.09l32.686-32.686   C365.165,23.04,365.165,11.96,358.33,5.126z\" }}\r\n    ],\r\n}\r\n\r\nfunction connectionDisplay(d) {\r\n    \r\n    if(!d.data.adaptor){\r\n        let data = {\r\n            tag: \"g\", attributes:{ x1:d.x1, y1:d.y1, x2:d.x2, y2:d.y2 },\r\n            children: {\r\n                connection: { tag: \"path\", class: \"connection-path\", attributes: { d:`M${d.x1},${d.y1} C${0.5*(d.x1+d.x2)},${d.y1} ${0.5*(d.x1+d.x2)},${d.y2} ${d.x2},${d.y2}` }},\r\n            }\r\n        }\r\n        return createHTMLElement({ data, namespace: \"svg\" }) \r\n    }\r\n    let norm  = Math.pow( (d.x2-d.x1)*(d.x2-d.x1) + (d.y2-d.y1)*(d.y2-d.y1) , 0.5)\r\n    let cos_a = (d.x1-d.x2)/ norm\r\n    let sin_a = (d.y1-d.y2)/ norm\r\n    let angle = ( -1 + 2*Number(d.y2<d.y1))*Math.acos( (d.x1-d.x2)/ norm ) * 180 /3.14\r\n    let x1 = d.x1 - 50* cos_a\r\n    let y1 = d.y1- 50* sin_a\r\n    let gAdaptor = svgAdaptorGroup\r\n    gAdaptor.attributes = { transform:`translate(${-(d.x2-d.x1)/2 - 50* cos_a },${-(d.y2-d.y1)/2  - 50* sin_a } ) rotate(${angle+45})  translate(-0,-36) scale(0.1)` }\r\n    let data = {\r\n        tag: \"g\", attributes:{ x1:x1, y1:y1, x2:d.x2, y2:d.y2 },\r\n        children: {\r\n            connection: { tag: \"path\", class: \"connection-path\", attributes: { d:`M${d.x2},${d.y2} C${0.5*(x1+d.x2)},${d.y2} ${0.5*(x1+d.x2)},${0.5*(y1+d.y2)} ${x1},${y1}`, x1:x1, y1:y1, x2:d.x2, y2:d.y2 }},\r\n            adaptor: gAdaptor,\r\n        }\r\n    }    \r\n    return createHTMLElement({ data, namespace: \"svg\" }) \r\n}\r\n\r\nfunction getConnectionId(c : Connection) : string {\r\n    return c.connectionId\r\n}\r\nfunction retrieveSvgContainerGroup(moduleId, modulesGroup, appStore){\r\n    // when connection is between 2 different layers, the slot to connect with is included in the 'groupModule' \r\n    // that contains 'moduleId'\r\n    let svgGroup = modulesGroup[moduleId] \r\n    if(svgGroup)\r\n        return svgGroup\r\n    let container = appStore.getParentGroupModule(moduleId)\r\n    return container ? modulesGroup[container.moduleId] : undefined\r\n}\r\n\r\nfunction toPlotterConnectionEntity(c : Connection, modulesGroup : Object, appStore :AppStore) : PlotterConnectionEntity {\r\n    let props = appStore.project.builderRendering.connectionsView.find(cView => cView.connectionId == c.connectionId)\r\n    return new PlotterConnectionEntity(\r\n        getConnectionId(c) ,\r\n        [\"connection\", \"mdle-color-stroke\", toCssName(appStore.getModule(c.start.moduleId).Factory.uid) ].concat(props&&props.wireless? [\"wireless\"]: []), \r\n        retrieveSvgContainerGroup(c.end.moduleId,modulesGroup,appStore), \r\n        retrieveSvgContainerGroup(c.start.moduleId,modulesGroup,appStore), \r\n        c,\r\n        c.adaptor)\r\n}\r\n\r\nfunction drawWirelessSlots( drawingArea: DrawingArea, appStore: AppStore){\r\n    let wirelesses   = drawingArea.svgCanvas.node().querySelectorAll(\".wireless\")\r\n    let drawingGroup = drawingArea.drawingGroup.node()\r\n    let gPlugs       = drawingGroup.querySelector(\"#wireless-slots\")\r\n    if(gPlugs)\r\n        gPlugs.remove()\r\n    gPlugs      = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\")\r\n    gPlugs.id   = \"wireless-slots\"\r\n    drawingGroup.appendChild(gPlugs)\r\n    \r\n    wirelesses.forEach( g => {\r\n        let selectFct =  (event) => {\r\n            event.stopPropagation()\r\n            appStore.selectConnection(appStore.getConnection(g.id)) \r\n        }\r\n        let delta = 25        \r\n        let x1 = Number(g.getAttribute(\"x1\"));let y1 = Number(g.getAttribute(\"y1\"))\r\n        let x2 = Number(g.getAttribute(\"x2\"));let y2 = Number(g.getAttribute(\"y2\"))  \r\n        \r\n        const gplugStart = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\")\r\n        const gplugEnd   = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\")\r\n        gplugStart.setAttribute(\"transform\" , g.getAttribute(\"transform\")  )\r\n        gplugEnd.setAttribute(\"transform\" , g.getAttribute(\"transform\")  )\r\n        gplugStart.innerHTML=`<line class='' x1=\"${x1}\" y1=\"${y1}\" x2=\"${Number(x1)-50}\" y2=\"${y1}\"></line><g transform=\"translate(${x1-50-2*delta},${y1-delta}) scale(0.1)\" > ${wirelessIcon}</g>`\r\n        gplugEnd.innerHTML  =`<line class='' x1=\"${x2}\" y1=\"${y2}\" x2=\"${x2+50}\" y2=\"${y2}\"></line><g transform=\"translate(${x2+50},${y2-delta}) scale(0.1)\" > ${wirelessIcon}</g>`\r\n        gplugStart.onclick = selectFct\r\n        gplugEnd.onclick =  selectFct\r\n        gPlugs.appendChild(gplugStart)\r\n        gPlugs.appendChild(gplugEnd)\r\n    })\r\n}\r\n\r\nfunction drawConnections(connections , modulesGroup, drawingArea : DrawingArea, plotObservables$, appStore : AppStore){\r\n    \r\n    let connectionsPlotData = connections.map( c =>  toPlotterConnectionEntity(c,modulesGroup,appStore ) )\r\n    let plot = new LinkPlot( \r\n        {   plotId:\"connectionsPlot\",\r\n            plotClasses:[],\r\n            drawingArea: drawingArea,\r\n            orderIndex:3 }) \r\n    plot.defaultElementDisplay = connectionDisplay as any\r\n    plot.draw(connectionsPlotData)\r\n    plot.entities$.subscribe( d=> plotObservables$.next(d) ) \r\n\r\n    drawWirelessSlots(drawingArea, appStore) \r\n    return undefined\r\n}\r\n\r\n\r\nfunction getSlot(\r\n    mdle: ModuleFlux, \r\n    domPlugElement, \r\n    plugType){\r\n\r\n    let slotId = domPlugElement.getAttribute(\"slotId\") || domPlugElement.getAttribute(\"slotid\")\r\n    let slot = mdle.getSlot( slotId )\r\n    if( slot)\r\n        return slot\r\n    if( mdle instanceof GroupModules.Module && slotId){\r\n        // we end up here in case of slot corresponding to an implicit input of a group\r\n        let moduleId = domPlugElement.getAttribute(\"moduleId\") || domPlugElement.getAttribute(\"moduleid\")\r\n        return mdle.getAllChildren(mdle._workflow) .find( mdle => mdle.moduleId == moduleId).getSlot(slotId)\r\n    }\r\n    console.warn(\"The builder plot should define the attribute 'slotId' of the slots elements\",domPlugElement)\r\n    // This section is for backward compatibility 06/15/2020\r\n    slot = (plugType === \"input\" ) ?\r\n    mdle.inputSlots.find(\r\n        slot => domPlugElement.id === \"input-slot_\"+slot.slotId+\"_\"+slot.moduleId):\r\n    mdle.outputSlots.find(\r\n        slot => domPlugElement.id === \"output-slot_\"+slot.slotId+\"_\"+slot.moduleId)\r\n        \r\n    return slot\r\n}\r\n\r\nfunction getMdlWithGroup(plugSvgElement:SVGElement, appStore: AppStore) : [ModuleFlux, HTMLElement]{\r\n    \r\n    let containerSlot = plugSvgElement.parentElement\r\n    let mdl = appStore.getModuleOrPlugin(containerSlot.getAttribute(\"moduleId\") || containerSlot.getAttribute(\"id\")) \r\n    if(!mdl){\r\n        containerSlot = containerSlot.parentElement\r\n        mdl = appStore.getModuleOrPlugin(containerSlot.getAttribute(\"moduleId\") || containerSlot.getAttribute(\"id\"))\r\n    }\r\n    return [mdl,containerSlot]\r\n}\r\n\r\nclass DrawingConnection{\r\n    xOrigin = undefined\r\n    yOrigin = undefined\r\n    slot = undefined\r\n    constructor(public mdle, public domModuleElement,\r\n        public domPlugElement, public plugType, public isDrawing, public isStarted ){\r\n        \r\n        this.xOrigin=Number(domModuleElement.getAttribute(\"x\")) + Number(domPlugElement.getAttribute(\"cx\")),\r\n        this.yOrigin=Number(domModuleElement.getAttribute(\"y\")) + Number(domPlugElement.getAttribute(\"cy\"))\r\n        \r\n        this.slot = getSlot(mdle,domPlugElement ,plugType )\r\n    }\r\n}\r\n\r\n\r\nexport class ConnectionsPlotter{\r\n\r\n    public readonly debugSingleton = AppDebugEnvironment.getInstance()\r\n    public readonly connectionPlots   : LinkPlot = undefined\r\n\r\n    drawingConnection : DrawingConnection = undefined\r\n    // we don't want to create connection just after on finished, this is the purpose of this \r\n    // there should be better way to do using rxjs\r\n    connectionCreationEnabled: boolean = true\r\n\r\n    constructor( public readonly drawingArea : DrawingArea,\r\n                 public readonly plottersObservables: AppBuildViewObservables,\r\n                 public readonly appObservables: AppObservables,\r\n                 public readonly appStore : AppStore){\r\n\r\n        let plotObservables$ = new Subject<any>()\r\n        \r\n        this.connectUserInteractions(plotObservables$)\r\n\r\n        this.debugSingleton.debugOn &&\r\n        this.debugSingleton.logWorkflowView( {  \r\n            level : LogLevel.Info, \r\n            message: \"create connections plotter\", \r\n            object: { drawingArea : drawingArea,\r\n                      plottersObservables : plottersObservables}\r\n        })\r\n\r\n        combineLatest( \r\n            this.appObservables.connectionsUpdated$,\r\n            this.plottersObservables.modulesDrawn$\r\n        ).subscribe( ([connections,modulesGroup])=>{\r\n            this.debugSingleton.debugOn &&\r\n            this.debugSingleton.logWorkflowView( {  \r\n                level : LogLevel.Info, \r\n                message: \"connections updated\", \r\n                object: { connections : connections,\r\n                    modulesGroup : modulesGroup}\r\n            })\r\n            drawConnections(appStore.project.workflow.connections,\r\n                             modulesGroup,this.drawingArea, plotObservables$ ,appStore)\r\n            this.plottersObservables.connectionsDrawn$.next()\r\n        })\r\n\r\n        let startConnectionSubscription = (obs$,type) => {\r\n            obs$.pipe(\r\n                operators.filter( _ => this.drawingConnection == undefined && this.connectionCreationEnabled )\r\n            ).subscribe((d: any) =>{\r\n                    let [mdl, mdlGroup] = getMdlWithGroup(d.event.target, appStore)\r\n                    this.drawingConnection = new DrawingConnection(mdl,mdlGroup,d.event.target, type, true,false)\r\n                }\r\n            )\r\n        }\r\n        let endConnectionSubscription = (obs$,type) => {\r\n            obs$.pipe(\r\n                operators.filter( _ => this.drawingConnection != undefined &&\r\n                                       this.drawingConnection.plugType == (type == \"input\" ? \"output\": \"input\") ),\r\n            ).subscribe(\r\n                (d: any) =>{ \r\n                    let [mdl, _] = getMdlWithGroup(d.event.target, appStore)\r\n                    let connection = type==\"input\" ? \r\n                        new Connection( this.drawingConnection.slot, getSlot(mdl,d.event.target , \"input\" ) ) :\r\n                        new Connection( getSlot(mdl,d.event.target , \"output\" ), this.drawingConnection.slot ) \r\n                    this.appStore.addConnection(connection) \r\n                    this.connectionCreationEnabled=false\r\n                    setTimeout( () => this.connectionCreationEnabled=true, 500)\r\n                }\r\n            )\r\n        }\r\n        startConnectionSubscription(this.plottersObservables.plugInputClicked$,\"input\")\r\n        startConnectionSubscription(this.plottersObservables.plugOutputClicked$,\"output\")\r\n        endConnectionSubscription(this.plottersObservables.plugInputClicked$,\"input\")\r\n        endConnectionSubscription(this.plottersObservables.plugOutputClicked$,\"output\")\r\n        \r\n        \r\n        this.plottersObservables.mouseMoved$.pipe(\r\n            operators.filter( _ => this.drawingConnection !== undefined )\r\n        ).subscribe( (coordinates) => this.plotDrawingConnection(this.drawingConnection , coordinates ))\r\n        \r\n        this.appObservables.connectionSelected$.subscribe(\r\n            c =>document.getElementById(getConnectionId(c)).classList.toggle(\"selected\")\r\n        )\r\n\r\n        this.appObservables.unselect$.subscribe( () =>{ \r\n            let connection = document.getElementById(\"drawing-connection\")\r\n            if(connection)\r\n                connection.remove()\r\n            this.drawingConnection = undefined \r\n        })\r\n    }\r\n\r\n    plotDrawingConnection(drawingConnection, coordinates ){\r\n\r\n        drawingConnection.isStarted = true   \r\n        let coors= [ (coordinates[0]-1 - this.drawingArea.overallTranform.translateX)/ this.drawingArea.overallTranform.scale,\r\n                    (coordinates[1]-1 - this.drawingArea.overallTranform.translateY)/ this.drawingArea.overallTranform.scale] \r\n        let selection = this.drawingArea.drawingGroup.selectAll(\".drawing-connection\")\r\n        .data([{ \r\n            data : drawingConnection.data, \r\n            htmlPlug:drawingConnection.domElement \r\n        }])\r\n        selection.exit().remove()\r\n        selection.attr( \"x2\", coors[0])\r\n        selection.attr( \"y2\",coors[1])\r\n        selection.enter().append(\"line\")\r\n        .attr(\"id\" , \"drawing-connection\")\r\n        .attr(\"class\" , \"drawing-connection\")\r\n        .attr( \"x1\", drawingConnection.xOrigin)\r\n        .attr( \"y1\",drawingConnection.yOrigin)\r\n        .attr( \"x2\", coors[0])\r\n        .attr( \"y2\",coors[1])\r\n    }\r\n\r\n    \r\n    connectUserInteractions(plotObservables$){\r\n        \r\n        let click$ = plotObservables$.pipe(\r\n            operators.filter( (d:any) => d.action===\"click\")\r\n        )\r\n        click$.subscribe( (d:any) => this.appStore.selectConnection(d.data.data) )\r\n    }\r\n    \r\n}","\nimport { DescriptionBox } from '@youwol/flux-core';\nimport { DrawingArea, CrossPlot } from '@youwol/flux-svg-plots';\n\nimport { AppStore,AppBuildViewObservables, AppObservables,AppDebugEnvironment, \n    LogLevel} from '../builder-state/index';\n\nimport { getBoundingBox } from './drawing-utils';\n\n\n\nfunction drawBoxes( \n    descriptionsBoxes : Array<DescriptionBox>, \n    drawingArea : DrawingArea, \n    appStore : AppStore ){\n    \n    let plotData = descriptionsBoxes.map( box => { \n\n        let rect = getBoundingBox(box.modulesId,10,drawingArea)\n        let x = drawingArea.hScale.invert( rect.x  + rect.width/2)\n        let y = drawingArea.vScale.invert( rect.y + rect.height/2)\n        let selected = appStore.descriptionBoxSelected && \n                       appStore.descriptionBoxSelected.descriptionBoxId == box.descriptionBoxId\n        return {\n            x: x, \n            y: y,\n            classes:[\"description-box\"].concat(selected ? [\"selected\"] : []),\n            attributes:{ descriptionBoxId : box.descriptionBoxId },\n            id: box.descriptionBoxId,\n            data:{descriptionBox:box,\n                  boundingBox:rect }\n    }})\n    let plotter = new CrossPlot({ plotId:\"descriptionsBoxPlotter\",\n                                  plotClasses:[],\n                                  drawingArea: drawingArea,\n                                  entities:plotData})\n\n   \n    plotter.defaultElementDisplay = (d) => {\n\n        const g = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\")\n\n        let headerHeight = 25;\n        let padding = 25;\n        let width = d.data.boundingBox.width\n        let height = d.data.boundingBox.height\n        g.innerHTML = `\n       <rect height=\"${height}\" width=\"${width}\" \n        class=\"description-box content\"  x=\"${-width/2}\" y=\"${-height/2}\"\n        filter=\"url(#shadow)\" ></rect>\n        <path d=\"M${-width/2},${headerHeight-padding-height/2} v${-(headerHeight-10)} q0,-10 10,-10 h${width-20} q10,0 10,10  v${headerHeight-10} z\" \n                class=\"description-box mdle-color-fill header \" />\n        <path d=\"M${-width/2},${headerHeight-padding-height/2} v${-(headerHeight-10)} q0,-10 10,-10 h${width-20} q10,0 10,10  v${headerHeight-10} \" \n                class=\"description-box header outline\" />\n\n        <text class=\"description-box title\" x=\"${-width/2 + 10 }\" y=\"${-height/2 - 5}\" >${d.data.descriptionBox.title}</text>\n        `\n        return g\n    }\n    let drawnElements = plotter.draw(plotData)\n    let format        = (d) => d.filter(g=>g).reduce( (acc,e)=>acc.concat(e),[]) \n\n    return drawnElements.entered._groups.concat(drawnElements.updated._groups).map( format ).reduce( (acc,e)=>acc.concat(e),[]) \n}\n\n\nexport class DescriptionsBoxesPlotter{\n\n    debugSingleton = AppDebugEnvironment.getInstance()\n\n    constructor( public readonly drawingArea : DrawingArea,\n                 public readonly plottersObservables: AppBuildViewObservables,\n                 public readonly appObservables: AppObservables,\n                 public readonly appStore : AppStore){\n        \n        this.debugSingleton.debugOn &&\n        this.debugSingleton.logWorkflowView( {  \n            level : LogLevel.Info, \n            message: \"create descriptions boxes plotter\", \n            object: { drawingArea : drawingArea,\n                      plottersObservables : plottersObservables}\n        })\n        /* This line is for ensuring that description box are plotted behind everything else :/\n        *  as it ensures the svg drawing group element of description boxes is created first (at plotter creation, while other elements \n        *  'wait' to be loaded or manually created) \n        *  Need a better management of layer ordering  \n        */\n        drawBoxes([], this.drawingArea, this.appStore)\n\n        this.appObservables.descriptionsBoxesUpdated$\n        .subscribe( descriptionsBoxes=>{\n            let svgElements = drawBoxes(descriptionsBoxes, this.drawingArea, this.appStore)\n            this.connectUserInteractions(svgElements)\n            this.plottersObservables.descriptionsBoxesDrawn$.next(svgElements)\n        })\n    }\n\n    \n    connectUserInteractions(svgElements){\n        \n        svgElements.forEach( (g : SVGElement)=> \n            g.onclick = (event:any) => this.appStore.selectDescriptionBox(g.id) \n        )        \n    }\n\n    \n}","import { DrawingArea } from '@youwol/flux-svg-plots';\r\n\r\nimport { filter, map } from 'rxjs/operators';\r\nimport { AppStore } from '../builder-state/index';\r\nimport { Observable } from 'rxjs';\r\nimport { GroupModules } from '@youwol/flux-core';\r\n\r\n\r\nexport function uuidv4() {\r\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\r\n    return v.toString(16);\r\n  });\r\n}\r\n\r\nexport function convert(bbox, matrix, drawingArea) {\r\n  var offset = document.getElementById(drawingArea.svgCanvas.attr(\"id\")).getBoundingClientRect();\r\n  let transform = drawingArea.overallTranform\r\n  let a = {\r\n    xmin: ((matrix.a * bbox.x) + (matrix.c * bbox.y) + matrix.e - offset.left\r\n      - transform.translateX) / transform.scale,\r\n    ymin: ((matrix.b * bbox.x) + (matrix.d * bbox.y) + matrix.f - offset.top\r\n      - transform.translateY) / transform.scale,\r\n    xmax: ((matrix.a * (bbox.x + bbox.width)) + (matrix.c * (bbox.y + bbox.height)) + matrix.e - offset.left\r\n      - transform.translateX) / transform.scale,\r\n    ymax: ((matrix.b * (bbox.x + bbox.width)) + (matrix.d * (bbox.y + bbox.height)) + matrix.f - offset.top\r\n      - transform.translateY) / transform.scale\r\n  }\r\n  return a\r\n}\r\n\r\nexport function getBoundingBox(modulesId: Array<String>, margin: number, drawingArea) {\r\n\r\n  let bbox = modulesId\r\n    .map((mid: string) => document.getElementById(mid))\r\n    .filter(e => e)\r\n    .map((e: any) => {\r\n      /* in case the method getBBox does not exist on the svg element (e.g. during unit test - seems like\r\n       * the proxy do not implement it), we return the x,y attributes of the <g> element (which identify to \r\n       * the center of the graphic element)\r\n       */\r\n      return e.getBBox ?\r\n        convert(e.getBBox(), e.getScreenCTM(), drawingArea) :\r\n        { xmin: e.getAttribute(\"x\"), xmax: e.getAttribute(\"x\"), ymin: e.getAttribute(\"y\"), ymax: e.getAttribute(\"y\") }\r\n    })\r\n    .reduce((acc, e) => ({\r\n      xmin: Math.min(acc.xmin, e.xmin), xmax: Math.max(acc.xmax, e.xmax),\r\n      ymin: Math.min(acc.ymin, e.ymin), ymax: Math.max(acc.ymax, e.ymax)\r\n    }), { xmin: 1e6, xmax: -1e6, ymin: 1e6, ymax: 1e-6 })\r\n\r\n  return {\r\n    x: bbox.xmin - margin,\r\n    y: bbox.ymin - margin,\r\n    width: bbox.xmax - bbox.xmin + 2 * margin,\r\n    height: bbox.ymax - bbox.ymin + 2 * margin\r\n  }\r\n}\r\n\r\n\r\nexport function focusElement(drawingArea: DrawingArea, svgElement: SVGElement) {\r\n\r\n  let boudingBox = svgElement.getBoundingClientRect()\r\n  drawingArea.lookAt(0.5*(boudingBox.left + boudingBox.right), 0.5*(boudingBox.top + boudingBox.bottom))\r\n}\r\n\r\n\r\nfunction mapToFocusCoordinate(activeLayerUpdated$ : Observable<{fromLayerId:string,toLayerId:string}>, appStore: AppStore) {\r\n\r\n  return activeLayerUpdated$.pipe(\r\n    //tap( ({fromLayerId, toLayerId}) => console.log({fromLayerId, toLayerId}) ),\r\n    filter( ({fromLayerId, toLayerId}) => fromLayerId!=undefined &&  toLayerId!=undefined ),\r\n    map( ({fromLayerId, toLayerId}) => ({fromLayer: appStore.getLayer(fromLayerId),toLayer: appStore.getLayer(toLayerId)})),\r\n    map( ({fromLayer, toLayer}) =>{ \r\n        // if zoom-in\r\n        if( fromLayer.getAllChildren(appStore.project.workflow).includes(toLayer))\r\n            return document.getElementById(\"expanded_\"+toLayer.moduleId)    \r\n        \r\n        // if zoom-out\r\n        if( toLayer.getAllChildren(appStore.project.workflow).includes(fromLayer)){\r\n            let targetLayer = toLayer.getDirectChildren(appStore.project.workflow)\r\n            .find( layer => layer instanceof GroupModules.Module && (layer==fromLayer || layer.getModuleIds().includes(fromLayer.moduleId)) )\r\n            return document.getElementById(targetLayer.moduleId)  \r\n        }\r\n        // if zoom from/to different branches of layer tree\r\n        return document.getElementById(\"expanded_\"+toLayer.moduleId)\r\n    }),\r\n    map( svgElement => {\r\n      let boudingBox = svgElement.getBoundingClientRect()\r\n      return [0.5*(boudingBox.left + boudingBox.right), 0.5*(boudingBox.top + boudingBox.bottom)] \r\n    })\r\n  )\r\n}\r\n\r\nexport function plugLayersTransition_noTransition(activeLayerUpdated$ : Observable<{fromLayerId:string,toLayerId:string}>, appStore: AppStore, drawingArea: DrawingArea) {\r\n\r\n    mapToFocusCoordinate(activeLayerUpdated$, appStore)\r\n    .subscribe( (coors) => drawingArea.lookAt(coors[0],coors[1]))\r\n}\r\n\r\nexport function plugLayersTransition_test(activeLayerUpdated$ : Observable<{fromLayerId:string,toLayerId:string}>, appStore: AppStore, drawingArea: DrawingArea) {\r\n    \r\n    \r\n    activeLayerUpdated$.subscribe( () => drawingArea.selectAll(\"g.connection\").remove())\r\n\r\n    mapToFocusCoordinate(activeLayerUpdated$, appStore)\r\n    .subscribe( (coors) => {\r\n      let zoom = drawingArea.zoom\r\n      drawingArea.svgCanvas.transition()\r\n        .duration(1000)\r\n        .call(zoom.translateTo, coors[0], coors[1])\r\n    }) \r\n}","\nexport class BuilderRenderingAPI{\n\n    static workflowPlotter : any\n\n    static initialize( wfPlotter){\n        BuilderRenderingAPI.workflowPlotter = wfPlotter\n        \n    }\n}\n","export * from './workflow-plotter';\nexport * from './modules-plotter';\nexport * from './box-selector-plotter';\nexport * from './connections-plotter';\nexport * from './descriptions-boxes-plotter'","\r\n\r\n\r\n\r\nexport class PlotterEntity{\r\n    constructor(public readonly id : string, public readonly classes : Array<string>, public readonly data: any ) {\r\n    }\r\n}\r\n\r\nexport class PlotterConnectionEntity extends PlotterEntity {\r\n\r\n    constructor(public readonly id : string, \r\n                public readonly classes : Array<string>,\r\n                public readonly inputGroup,\r\n                public readonly outputGroup,\r\n                public readonly data: any,\r\n                public readonly adaptor = undefined) {\r\n                    super(id,classes,data)\r\n    }\r\n}\r\n","\r\nimport * as _ from 'lodash'\r\nimport { Subject, combineLatest } from 'rxjs';\r\nimport {drag as d3Drag} from 'd3-drag'\r\nimport {select} from 'd3-selection'\r\nimport { GroupModules } from '@youwol/flux-core';\r\nimport { DrawingArea, CrossPlot, toCssName } from '@youwol/flux-svg-plots';\r\n\r\nimport { AppStore, AppDebugEnvironment, LogLevel , AppBuildViewObservables, AppObservables } \r\nfrom '../builder-state/index';\r\nimport { PluginsPlotter } from './plugins-plotter';\r\nimport { getBoundingBox} from './drawing-utils';\r\n\r\n/** Temporary until migration is complete\r\n * \r\n * @param mdle \r\n * @param drawingArea \r\n */\r\nexport function  createPlot(mdle,drawingArea){\r\n\r\n    let Factory     = mdle.Factory\r\n    let Rendering   = new Factory.BuilderView()\r\n    let entities$   = new Subject()\r\n    let plotId      = toCssName(Factory.uid) + \"_ModulesPlot\"\r\n    let plotter     = new CrossPlot({ \r\n        plotId:     plotId, \r\n        plotClasses:[ plotId,Factory.packId ],drawingArea,\r\n        entities$\r\n    })\r\n    plotter.defaultElementDisplay = (d)=> Rendering.render(d.data.module)\r\n    return  plotter    \r\n}\r\n\r\n\r\nfunction getCenter(currentViews) {\r\n\r\n    let views = currentViews.modulesView\r\n    let coorsParentLayer = views.map( m => [m.xWorld,m.yWorld])\r\n    let xmin = coorsParentLayer.reduce((acc,e) =>acc<e[0]?acc:e[0] ,1.e10) \r\n    let xmax = coorsParentLayer.reduce((acc,e) =>acc>e[0]?acc:e[0] ,-1.e10) \r\n    let ymin = coorsParentLayer.reduce((acc,e) =>acc<e[1]?acc:e[1] ,1.e10) \r\n    let ymax = coorsParentLayer.reduce((acc,e) =>acc>e[1]?acc:e[1] ,-1.e10) \r\n    return [(xmax+xmin)/2,(ymax+ymin)/2]\r\n}\r\n\r\nfunction getScaleFactors(currentViews){\r\n\r\n    let views = currentViews.modulesView\r\n    let coorsParentLayer = views.map( m => [m.xWorld,m.yWorld])\r\n    let xmin = coorsParentLayer.reduce((acc,e) =>acc<e[0]?acc:e[0] ,1.e10) \r\n    let xmax = coorsParentLayer.reduce((acc,e) =>acc>e[0]?acc:e[0] ,-1.e10) \r\n    let ymin = coorsParentLayer.reduce((acc,e) =>acc<e[1]?acc:e[1] ,1.e10) \r\n    let ymax = coorsParentLayer.reduce((acc,e) =>acc>e[1]?acc:e[1] ,-1.e10) \r\n    return [(xmax-xmin)/2,(ymax-ymin)/2]\r\n}\r\n\r\nfunction drawModules(\r\n    drawingArea : DrawingArea,  \r\n    appStore : AppStore,\r\n    plotObservables$  ){\r\n      \r\n    let allPlots = []      \r\n    let displayedModulesView = appStore.getDisplayedModulesView()\r\n    let projection = undefined       \r\n\r\n    if(appStore.activeLayerId != appStore.rootLayerId ){\r\n\r\n        let center = getCenter(displayedModulesView.currentLayer)\r\n        let factors = getScaleFactors(displayedModulesView.currentLayer)\r\n        let moduleViewLayer = displayedModulesView.parentLayer.currentGroupModuleView\r\n        \r\n        projection = (x,y)=>{\r\n            let d0 = Math.pow( (x-moduleViewLayer.xWorld)*(x-moduleViewLayer.xWorld) + (y-moduleViewLayer.yWorld) * (y-moduleViewLayer.yWorld) ,0.5)\r\n            let cos_theta0 = (x-moduleViewLayer.xWorld)/d0\r\n            let sin_theta0 = (y-moduleViewLayer.yWorld)/d0\r\n            let dx = ( d0 + factors[0]) * cos_theta0 + cos_theta0/Math.abs(cos_theta0) * 50\r\n            let dy = ( d0 + factors[1]) * sin_theta0 + sin_theta0/Math.abs(sin_theta0) * 75\r\n            return [ center[0] + dx, center[1] + dy ]\r\n        }\r\n    }\r\n    let fromModuleViewInside = (view)=>({\r\n        x: view.xWorld, \r\n        y:view.yWorld,\r\n        classes:[\"module\"].concat( appStore.isSelected(view.moduleId) ? [\"selected\"] : []),\r\n        attributes:{ moduleId : view.moduleId },\r\n        id: view.moduleId,\r\n        Factory: view.Factory,\r\n        data:{module:appStore.getModule(view.moduleId),\r\n            moduleView : view } \r\n    })\r\n    let fromModuleOutside = (view)=>Object.assign({}, fromModuleViewInside(view), {projection:projection})\r\n\r\n    let plotsData0 = displayedModulesView.currentLayer.modulesView.map(fromModuleViewInside)\r\n    let plotsData1 = displayedModulesView.parentLayer.modulesView.map(fromModuleOutside)\r\n\r\n    let grouped          = _.groupBy([...plotsData0,...plotsData1], d => d.Factory.uid  )\r\n    let modulesDrawn     = {}\r\n    let activeSeriesId   = []\r\n    let updateMdlesDrawn = (d)=>{\r\n        d.filter(g=>g).forEach( g => {\r\n            if( g.id.includes(\"group\") ){\r\n                let m = appStore.getModule(g.id)\r\n                let mIds = m.inputSlots.map( s => s.moduleId ).concat(m.outputSlots.map( s => s.moduleId ))\r\n                mIds.forEach( mid =>{  modulesDrawn[mid] = g })\r\n            }\r\n        modulesDrawn[g.id] = g \r\n        })\r\n    }\r\n\r\n    Object.entries(grouped).map( ([factId,modules] : [string, Array<any>]) => {\r\n        \r\n        let plot = createPlot(modules[0] , drawingArea )\r\n        \r\n        activeSeriesId.push(plot.plotId)\r\n        allPlots.push(plot)  \r\n        let groups = plot.draw(modules)   \r\n        \r\n        groups.entered._groups.forEach( d =>  updateMdlesDrawn(d))\r\n        groups.updated._groups.forEach( d =>  updateMdlesDrawn(d))\r\n\r\n        plot.entities$.subscribe( d=> plotObservables$.next(d)) \r\n        return plot\r\n    })\r\n    return {modulesDrawn : modulesDrawn,\r\n            activeSeries : activeSeriesId }\r\n}\r\n\r\n\r\nfunction drawExpandedGroup( layerId :string, drawingArea : DrawingArea, appStore : AppStore ){\r\n    \r\n    if(!layerId || layerId === appStore.rootLayerId ){\r\n        let plotter = new CrossPlot({ plotId:\"activeLayerPlotter\", plotClasses:[], drawingArea, entities:[]})\r\n        plotter.draw([])\r\n        return {}\r\n    }\r\n    let activateLayer = appStore.getLayer(layerId)\r\n    let groupMdle = appStore.project.workflow.modules\r\n    .find( m => m instanceof GroupModules.Module && m.moduleId == activateLayer.moduleId) as GroupModules.Module\r\n\r\n    const displayedElements = appStore.getDisplayedModulesView()\r\n    const includedEntities  = displayedElements.currentLayer.modulesView.map(g => g.moduleId)\r\n    let rect                = getBoundingBox(includedEntities,50,drawingArea)\r\n    \r\n    let x = drawingArea.hScale.invert( rect.x + rect.width/2)\r\n    let y = drawingArea.vScale.invert( rect.y + rect.height/2)\r\n    let plotData =  [{ \r\n        id: \"expanded_\"+groupMdle.moduleId, \r\n        x: x, y: y, \r\n        classes:[\"active-layer-box\"], \r\n        attributes:{ layerId : layerId },\r\n        data:{boundingBox:rect }}]\r\n\r\n    let plotter = new CrossPlot({ plotId:\"activeLayerPlotter\",plotClasses:[],\r\n                                  drawingArea: drawingArea, entities:plotData})\r\n    \r\n    plotter.defaultElementDisplay = GroupModules.expandedGroupPlot(groupMdle)\r\n    \r\n    let drawnElements = plotter.draw(plotData)\r\n    let all = drawnElements.entered._groups.concat(drawnElements.updated._groups).reduce( (acc,e)=>acc.concat(e),[]).filter(g=>g)\r\n    return {[groupMdle.moduleId]: all[0]}\r\n}\r\n\r\nexport class ModulesPlotter{\r\n    \r\n    plotsFactory : Object = {}\r\n\r\n    debugSingleton = AppDebugEnvironment.getInstance()\r\n\r\n    modulePlots : Array<CrossPlot> = []\r\n    pluginsPlotter: PluginsPlotter\r\n\r\n    previousActiveSeriesId = []\r\n\r\n    constructor( public readonly drawingArea : DrawingArea,\r\n                 public readonly plottersObservables: AppBuildViewObservables,\r\n                 public readonly appObservables: AppObservables,\r\n                 public readonly appStore : AppStore){\r\n                     \r\n        let plotObservables$ = new Subject<any>()\r\n\r\n        this.debugSingleton.debugOn && \r\n        this.debugSingleton.logWorkflowView( {  \r\n            level : LogLevel.Info, \r\n            message: \"create modules plotter\", \r\n            object: { drawingArea : drawingArea,\r\n                      plottersObservables : plottersObservables}\r\n        });\r\n\r\n        // This line is for ensuring that the active layer is plotted behind everything else :/\r\n        (new CrossPlot({ plotId:\"activeLayerPlotter\", plotClasses:[], drawingArea: drawingArea, entities:[]})).draw([])\r\n\r\n        this.pluginsPlotter = new PluginsPlotter(this.drawingArea, this.plottersObservables, \r\n            this.appObservables, this.appStore)\r\n\r\n        combineLatest([appObservables.packagesLoaded$,  this.plottersObservables.modulesViewUpdated$])\r\n        .subscribe(\r\n            () => {\r\n                let { modulesDrawn, activeSeries } = drawModules(this.drawingArea, this.appStore, plotObservables$)\r\n                let pluginsDrawn = this.pluginsPlotter.draw(modulesDrawn)\r\n                let expandedGroup = drawExpandedGroup( this.appStore.activeLayerId, this.drawingArea, this.appStore )\r\n                this.connectUserInteractions(Object.assign({},modulesDrawn,expandedGroup))\r\n                this.emptyRemovedSeries(this.previousActiveSeriesId, activeSeries)   \r\n                this.previousActiveSeriesId =  activeSeries\r\n                this.plottersObservables.modulesDrawn$.next({...modulesDrawn,...pluginsDrawn,...expandedGroup})\r\n            }\r\n        )\r\n        \r\n        this.appObservables.moduleSelected$.subscribe(\r\n            mdle =>{\r\n                let elem =  document.getElementById(mdle.moduleId)\r\n                if(elem && !elem.classList.contains(\"selected\"))\r\n                    elem.classList.add(\"selected\")}\r\n        )\r\n        \r\n        this.appObservables.modulesUnselected$.subscribe(\r\n            mdles =>{\r\n                mdles.forEach( mdle => {\r\n                let elem =  document.getElementById(mdle.moduleId)\r\n                if(elem && elem.classList.contains(\"selected\"))\r\n                    elem.classList.remove(\"selected\")\r\n                })\r\n        })\r\n\r\n        appObservables.unselect$.subscribe( ()=> {\r\n            this.unselect()\r\n        })       \r\n    }\r\n\r\n    highlight(modulesId:Array<String>){\r\n\r\n        let htmlElems= modulesId\r\n        .map( (mid:string) => document.getElementById(mid))\r\n        htmlElems.forEach( e => { if(e) e.classList.add(\"highlighted\") })\r\n    }\r\n    unselect(){\r\n\r\n        let htmlElems = document.getElementsByClassName(\"selected\")\r\n        while(htmlElems.length>0){            \r\n            htmlElems[0].classList.remove(\"selected\")\r\n            htmlElems = document.getElementsByClassName(\"selected\")\r\n        }\r\n        htmlElems= document.getElementsByClassName(\"highlighted\")\r\n        while(htmlElems.length>0){            \r\n            htmlElems[0].classList.remove(\"highlighted\")\r\n            htmlElems = document.getElementsByClassName(\"highlighted\")\r\n        }\r\n    }\r\n\r\n    dragging = false\r\n    dragTranslation = [0,0]\r\n\r\n    connectUserInteractions(modulesDrawn){\r\n         \r\n        Object.entries(modulesDrawn).forEach( ([moduleId, g] : [string,SVGElement])=> {\r\n            let onclick = (event:any) => { \r\n                if( event.target.classList.contains(\"slot\") ){\r\n                    event.target.classList.contains(\"output\")?\r\n                        this.plottersObservables.plugOutputClicked$.next({event,group:g,moduleId}):                        \r\n                        this.plottersObservables.plugInputClicked$.next({event,group:g,moduleId})\r\n                    return\r\n                }\r\n                event.stopPropagation(); \r\n                this.appStore.selectModule(moduleId)\r\n            }\r\n            g.onclick     = onclick\r\n            g.onmousedown = onclick\r\n            \r\n            if(this.appStore.project.workflow.plugins.map(m=>m.moduleId).includes(moduleId))\r\n                return\r\n            if(g.classList.contains(\"active-layer-box\"))\r\n                return\r\n\r\n            var drag = d3Drag();\r\n            drag\r\n            .on(\"start\",  (ev) => {\r\n                this.dragSelection( ev, false )})\r\n            .on(\"drag\",   (ev) => this.dragSelection( ev, false ))\r\n            .on(\"end\",    (ev) => this.dragSelection( ev, true ))\r\n            select(g).call(drag) \r\n        })\r\n    }\r\n\r\n    emptyRemovedSeries(oldSeries, newSeries) {\r\n        let removeds = oldSeries.filter( name => !newSeries.includes(name))\r\n        removeds.forEach( name => document.querySelector(\"g#\"+name).remove())\r\n    }\r\n\r\n    dragSelection( d3Event, update )  {\r\n\r\n        this.dragging = true\r\n        let modules = this.appStore\r\n        .getModulesSelected()\r\n        .filter( m =>this.appStore.getActiveLayer().getModuleIds().includes(m.moduleId) || m[\"layerId\"] )\r\n\r\n        let newPos = []\r\n        modules.forEach( m => {\r\n            let g = document.getElementById(m.moduleId)\r\n            let plugins = g.querySelectorAll('g.plugin')\r\n            let x = Number(g.getAttribute(\"x\")) + d3Event.dx \r\n            let y = Number(g.getAttribute(\"y\")) + d3Event.dy\r\n            Array.from(plugins).forEach( gPlugin => {\r\n                gPlugin.setAttribute( \"x\", Number(gPlugin.getAttribute(\"x\")) + d3Event.dx)\r\n                gPlugin.setAttribute( \"y\", Number(gPlugin.getAttribute(\"y\")) + d3Event.dy)\r\n            })\r\n            this.dragTranslation[0] += d3Event.dx \r\n            this.dragTranslation[1] -= d3Event.dy \r\n            g.setAttribute( \"x\",x)\r\n            g.setAttribute( \"y\",y)\r\n            g.style.transform = \"translate(\"+ x+\"px,\"+y+\"px)\"\r\n            g.setAttribute(\"transform\" , \"translate(\"+ x+\",\"+y+\")\" )\r\n            if(update){\r\n                newPos.push({\r\n                    moduleId:m.moduleId, \r\n                    x:this.drawingArea.hScale.invert(x),\r\n                    y:this.drawingArea.vScale.invert(y),\r\n                    translation: this.dragTranslation })\r\n                g.style.transform = \"\"\r\n            }\r\n        })\r\n        if(update){\r\n            this.appStore.moveModules(newPos)\r\n            this.dragging = false\r\n            this.dragTranslation = [0,0]\r\n        }\r\n        return newPos\r\n    }\r\n}","\nimport { PluginFlux } from '@youwol/flux-core';\nimport { DrawingArea } from '@youwol/flux-svg-plots';\n\nimport { AppObservables,AppBuildViewObservables, AppDebugEnvironment, LogLevel,\n    AppStore } from '../builder-state/index';\n\n\nfunction drawPlugin(plugin :PluginFlux<any>, containerGroup, appStore: AppStore ) {\n\n    let display = new plugin.Factory.BuilderView()\n    let pluginGroup = display.render(plugin)\n    pluginGroup.onclick = (e) =>{  e.stopPropagation() ; appStore.selectModule(plugin.moduleId) }\n\n    let a = containerGroup.querySelector(\"#\"+plugin.moduleId)\n    if(a)\n        a.remove()\n    pluginGroup.id=plugin.moduleId\n    pluginGroup.classList.add(\"module\",\"plugin\")\n    let dyModule = 0\n    let dyPlugin = 50\n    \n    if(containerGroup.getBBox) \n        dyModule = containerGroup.getBBox().height - containerGroup.querySelector(\".content\").getBBox().height /2 \n    // we need to actually append the group of the plugin to get its bounding box\n    containerGroup.appendChild(pluginGroup)\n    if( pluginGroup.getBBox)\n        dyPlugin =  pluginGroup.getBBox().height/2\n        \n    let dy = dyModule + dyPlugin\n    pluginGroup.setAttribute(\"x\",  containerGroup.getAttribute(\"x\"))\n    pluginGroup.setAttribute(\"y\",  Number(containerGroup.getAttribute(\"y\"))+dy)\n    pluginGroup.setAttribute(\"transform\",  \"translate(0,\" + dy + \")\")\n\n    return pluginGroup\n}\n\nexport class PluginsPlotter {\n\n    debugSingleton = AppDebugEnvironment.getInstance()\n\n    groups = {}\n    constructor(public readonly drawingArea: DrawingArea,\n        public readonly plottersObservables: AppBuildViewObservables,\n        public readonly appObservables: AppObservables,\n        public readonly appStore: AppStore) {\n\n        this.debugSingleton.debugOn &&\n            this.debugSingleton.logWorkflowView({\n                level: LogLevel.Info,\n                message: \"create plugins plotter\",\n                object: {drawingArea, plottersObservables}\n            })\n    }\n\n    draw(modulesDrawn){\n        Object.values(this.groups).forEach( (g:any) => g.remove())\n        let plugInsToPlot = this.appStore.project.workflow.plugins\n        .filter( p => modulesDrawn[p.parentModule.moduleId])\n        .map( p => [p,modulesDrawn[p.parentModule.moduleId]])\n        this.debugSingleton.debugOn &&\n        this.debugSingleton.logWorkflowView({\n            level: LogLevel.Info,\n            message: \"PluginsPlotter draw\",\n            object: { modulesDrawn: modulesDrawn, plugins: this.appStore.project.workflow.plugins,plugInsToPlot }\n        })\n        \n        this.groups = plugInsToPlot\n        .map( ([plugin, parentSvgGroup]) => [ plugin.moduleId, drawPlugin(plugin, parentSvgGroup, this.appStore) ])\n        .reduce( (acc,e) =>{ acc[e[0]] = e[1]; return acc}  , {})\n        return this.groups\n    }\n\n}","\r\nimport { FluxExtensionAPIs } from '@youwol/flux-core';\r\nimport { DrawingArea } from '@youwol/flux-svg-plots';\r\n\r\nimport { AppStore, AppDebugEnvironment, LogLevel, AppObservables, \r\n    AppBuildViewObservables  } from '../builder-state/index';\r\n\r\nimport { ConnectionsPlotter } from './connections-plotter';\r\nimport { ModulesPlotter } from './modules-plotter';\r\nimport { BoxSelectorPlotter } from './box-selector-plotter';\r\nimport { DescriptionsBoxesPlotter } from './descriptions-boxes-plotter';\r\nimport { PluginsPlotter } from './plugins-plotter';\r\nimport { plugLayersTransition_noTransition } from './drawing-utils';\r\nimport { BuilderRenderingAPI } from './extension';\r\n\r\nexport class WorkflowPlotter{\r\n\r\n    debugSingleton = AppDebugEnvironment.getInstance()\r\n\r\n    \r\n    modulesPlotter : ModulesPlotter = undefined\r\n    connectionsPlotters : ConnectionsPlotter = undefined\r\n    boxSelectorPlotter : BoxSelectorPlotter = undefined\r\n    descriptionsBoxesPlotter : DescriptionsBoxesPlotter = undefined\r\n    pluginsPlotter : PluginsPlotter = undefined\r\n\r\n    constructor( public readonly drawingArea : DrawingArea,\r\n                 public readonly appObservables: AppObservables,\r\n                 public readonly plottersObservables : AppBuildViewObservables,\r\n                 public readonly appStore : AppStore,\r\n                 public readonly options = { margin : 50}){\r\n                \r\n        this.descriptionsBoxesPlotter= new DescriptionsBoxesPlotter(this.drawingArea, this.plottersObservables, \r\n            this.appObservables, this.appStore)\r\n\r\n        this.modulesPlotter = new ModulesPlotter(this.drawingArea, this.plottersObservables, \r\n            this.appObservables, this.appStore)\r\n        \r\n        this.connectionsPlotters = new ConnectionsPlotter(this.drawingArea, this.plottersObservables, \r\n            this.appObservables, this.appStore)\r\n\r\n        this.boxSelectorPlotter = new BoxSelectorPlotter(this.drawingArea, this.plottersObservables, \r\n            this.appObservables, this.appStore, this.modulesPlotter)\r\n            \r\n        plugLayersTransition_noTransition(this.appObservables.activeLayerUpdated$, this.appStore, this.drawingArea)\r\n        \r\n        this.debugSingleton.debugOn && \r\n        this.debugSingleton.logWorkflowView( {  \r\n            level : LogLevel.Info, \r\n            message: \"create WorkflowPlotter\", \r\n            object: { \r\n                drawingArea: this.drawingArea,\r\n                modulePlotter : this.modulesPlotter,\r\n                connectionsPlotters: this.connectionsPlotters\r\n            }\r\n        })\r\n        this.appObservables.activeLayerUpdated$.subscribe((activeLayer) => {\r\n            (activeLayer.toLayerId != appStore.rootLayerId)\r\n                ? drawingArea.svgCanvas.select(\".workspace-background\").attr(\"class\", \"workspace-background child-layer\")\r\n                : drawingArea.svgCanvas.select(\".workspace-background\").attr(\"class\", \"workspace-background\")\r\n        })\r\n        let plotObservable = this.plottersObservables\r\n        let boxSelectorPlotter = this.boxSelectorPlotter\r\n        let background = document.querySelector(\"svg\") as SVGElement\r\n\r\n        let toPosition = (event: MouseEvent)=>\r\n            [event.offsetX || event.clientX, event.offsetY || event.clientY]\r\n        \r\n        background.onmousedown = (event) =>  { \r\n            boxSelectorPlotter.startSelection(toPosition(event))\r\n        }\r\n        background.onmousemove = (event) => {             \r\n            if(event.ctrlKey)\r\n                boxSelectorPlotter.moveTo(toPosition(event))\r\n            else\r\n                plotObservable.mouseMoved$.next(toPosition(event)) \r\n               \r\n        }\r\n        background.onmouseup = (event) => { \r\n            if(event.ctrlKey)\r\n                boxSelectorPlotter.finishSelection(toPosition(event))\r\n        }\r\n        background.onclick = (event)  => { \r\n            if(!event.ctrlKey )\r\n                appStore.unselect()\r\n        }\r\n        window.onkeydown = (event) => { \r\n            if(event.key==\"Delete\" && document.activeElement.tagName==\"BODY\") \r\n                this.appStore.deleteSelected()\r\n        }   \r\n        this.loadExtensions()   \r\n    }\r\n\r\n    loadExtensions(){\r\n        // this test is for backward compatibility w/ flux-lib-core\r\n        if(!FluxExtensionAPIs)\r\n            return\r\n        BuilderRenderingAPI.initialize(this)\r\n        FluxExtensionAPIs.registerAPI('BuilderRenderingAPI', BuilderRenderingAPI)\r\n    }\r\n}\r\n","\r\n\r\nexport enum LogLevel{\r\n    Debug,\r\n    Info,\r\n    Error,\r\n}\r\nexport class LogEntry {\r\n\r\n    date : Date\r\n    hours: number =0;\r\n    minutes: number=0;\r\n    seconds: number=0;\r\n    miniseconds: number=0\r\n\r\n    constructor( public readonly topic:string, \r\n                 public readonly message:string,\r\n                 public readonly object:Object, \r\n                 public level: LogLevel\r\n                ){ \r\n        this.date = new Date();\r\n    }\r\n}\r\n\r\nexport class LogerConsole{\r\n\r\n    log(e: LogEntry){\r\n        if(e.level==LogLevel.Info || e.level==LogLevel.Debug)\r\n            console.log( \"#\"+e.topic,\r\n                        { date: e.date.getHours() + \"h\" + e.date.getMinutes() + \"mn\"+ e.date.getSeconds() +\"s\"+ e .date.getMilliseconds(),\r\n                        level : e.level,\r\n                        message: e.message,\r\n                        object: e.object \r\n            })\r\n        if(e.level==LogLevel.Error )\r\n            console.error( \"#\"+e.topic,\r\n                        { date: e.date.getHours() + \"h\" + e.date.getMinutes() + \"mn\"+ e.date.getSeconds() +\"s\"+ e .date.getMilliseconds(),\r\n                        level : e.level,\r\n                        message: e.message,\r\n                        object: e.object \r\n            })\r\n    }\r\n}\r\n\r\nexport class AppDebugEnvironment{\r\n\r\n    debugOn = true\r\n\r\n    WorkflowBuilderEnabled: boolean = true\r\n    WorkflowBuilderLevel : LogLevel = LogLevel.Info\r\n\r\n    workflowViewEnabled: boolean = true\r\n    workflowViewLevel : LogLevel = LogLevel.Info\r\n    \r\n    workflowView$Enabled: boolean = true\r\n    workflowView$Level : LogLevel = LogLevel.Info\r\n\r\n    observableEnabled: boolean = true\r\n    observableLevel : LogLevel  = LogLevel.Info\r\n    \r\n    renderTopicEnabled: boolean = true\r\n    renderTopicLevel : LogLevel  = LogLevel.Info\r\n    \r\n    appTopicEnabled: boolean = true\r\n    appTopicLevel : LogLevel = LogLevel.Info\r\n\r\n    workflowUIEnabled : boolean = true\r\n\r\n    loger = new LogerConsole()\r\n\r\n    constructor(  { WorkflowBuilder, workflowView, observable, UI,renderTopicLevel } :\r\n         {  WorkflowBuilder : LogLevel,\r\n            workflowView : LogLevel,\r\n            UI : LogLevel,\r\n            observable: LogLevel,\r\n            renderTopicLevel: LogLevel,\r\n            appTopicLevel:LogLevel} ){\r\n\r\n        this.WorkflowBuilderLevel = WorkflowBuilder\r\n        this.observableLevel = observable\r\n        this.renderTopicLevel = renderTopicLevel\r\n    }\r\n\r\n    logWorkflowBuilder( { level, message, object} :{level : LogLevel, message :string, object : Object}){\r\n        \r\n        this.WorkflowBuilderEnabled && \r\n        level>= this.WorkflowBuilderLevel && \r\n        this.loger.log( new LogEntry(\"WorkflowBuilder\" , message,object,level) )\r\n    }\r\n\r\n    logObservable( { level, message, object} :{level : LogLevel, message :string, object : Object}){\r\n        \r\n        this.observableEnabled && \r\n        level>= this.observableLevel && \r\n        this.loger.log( new LogEntry(\"Observables\", message,object,level) )\r\n    }\r\n    logWorkflowView( { level, message, object} :{level : LogLevel, message :string, object : Object}){\r\n        \r\n        this.workflowViewEnabled && \r\n        level>= this.workflowViewLevel && \r\n        this.loger.log( new LogEntry(\"WorkflowView\", message,object,level) )\r\n    }\r\n    logWorkflowView$( { level, message, object} :{level : LogLevel, message :string, object : Object}){\r\n        \r\n        this.workflowView$Enabled && \r\n        level>= this.workflowView$Level && \r\n        this.loger.log( new LogEntry(\"WorkflowView Observables\", message,object,level) )\r\n    }\r\n    logRenderTopic( { level, message, object} :{level : LogLevel, message :string, object : Object}){\r\n        \r\n        this.renderTopicEnabled && \r\n        level>= this.renderTopicLevel && \r\n        this.loger.log( new LogEntry(\"Render\", message,object,level) )\r\n    }\r\n    logAppTopic( { level, message, object} :{level : LogLevel, message :string, object : Object}){\r\n        \r\n        this.appTopicEnabled && \r\n        level >= this.appTopicLevel && \r\n        this.loger.log( new LogEntry(\"App\", message,object,level) )\r\n    }\r\n\r\n    private static instance : AppDebugEnvironment | undefined = undefined\r\n\r\n    static getInstance() {\r\n        if(!AppDebugEnvironment.instance)\r\n            AppDebugEnvironment.instance =  new AppDebugEnvironment( \r\n                {   WorkflowBuilder:LogLevel.Info, \r\n                    workflowView:LogLevel.Info, \r\n                    UI:LogLevel.Info,\r\n                    observable: LogLevel.Info,\r\n                    renderTopicLevel: LogLevel.Info,\r\n                    appTopicLevel: LogLevel.Info\r\n                })\r\n        return AppDebugEnvironment.instance\r\n    }\r\n}\r\n","\r\nimport { AppDebugEnvironment, LogLevel } from \"./app-debug.environment\";\r\nimport {ExtensionsObservables  } from '@youwol/flux-core';\r\n\r\nexport class AppExtensionsObservables extends ExtensionsObservables {\r\n\r\n    private static instance : AppExtensionsObservables = undefined\r\n    static getInstance() {\r\n        if(!AppExtensionsObservables.instance)\r\n        AppExtensionsObservables.instance =  new AppExtensionsObservables()\r\n        return AppExtensionsObservables.instance\r\n    }\r\n    debugSingleton = AppDebugEnvironment.getInstance()\r\n\r\n    constructor(){\r\n        super()\r\n        if(this.debugSingleton.debugOn){\r\n            [\"projectUpdated$\"]\r\n            .forEach( id => this[id].subscribe( (...args)    => this.log(id, ...args) )  )\r\n        }        \r\n    }\r\n\r\n    log(name , ...args){\r\n\r\n        this.debugSingleton.debugOn && \r\n        this.debugSingleton.logObservable( {  \r\n            level : LogLevel.Info, \r\n            message: name, \r\n            object:{ args:args \r\n            }})\r\n    }\r\n}","import { Subject, ReplaySubject } from \"rxjs\";\r\nimport { Package, Connection, ModuleFlux, DescriptionBox  }from '@youwol/flux-core';\r\n\r\nimport { AppDebugEnvironment, LogLevel } from \"./app-debug.environment\";\r\nimport { UiState } from './app-store';\r\n\r\n\r\nexport class AppObservables{\r\n\r\n    private static instance : AppObservables = undefined\r\n    static getInstance() {\r\n        if(!AppObservables.instance)\r\n            AppObservables.instance =  new AppObservables()\r\n        return AppObservables.instance\r\n    }\r\n\r\n\r\n    debugSingleton = AppDebugEnvironment.getInstance()\r\n\r\n    packagesObserver$           = new ReplaySubject<any>(1)\r\n    packagesLoaded$             = new ReplaySubject<any>(1)\r\n    uiStateUpdated$             = new ReplaySubject<UiState>(1)\r\n    packagesUpdated$            = new Subject<Array<Package>>()\r\n    connectionsUpdated$         = new Subject<Array<Connection>>()\r\n    modulesUpdated$             = new Subject<{createdElements: Array<ModuleFlux>, removedElements:  Array<ModuleFlux>}>()\r\n    moduleAdded$                = new Subject<ModuleFlux>()\r\n    moduleSelected$             = new Subject<ModuleFlux>()\r\n    modulesUnselected$          = new Subject<Array<ModuleFlux>>()\r\n    moduleSettingsEdited$       = new Subject<any>()\r\n    adaptorEdited$              = new Subject<any>()\r\n    connectionSelected$         = new Subject<Connection>()\r\n    unselect$                   = new Subject()\r\n    renderingLoaded$            = new Subject<{style, layout, cssLinks}>()\r\n    cssUpdated$                 = new Subject<string>()\r\n    descriptionsBoxesUpdated$   = new Subject<Array<DescriptionBox>>()\r\n    activeLayerUpdated$         = new Subject<{fromLayerId:string, toLayerId:string}>()\r\n    ready$                      = new ReplaySubject<boolean>(1)\r\n    flowReady$                  = new Subject<any>()\r\n    suggestions$                = new Subject<Array<any>>()\r\n    \r\n    notifications$              = new Subject<Array<any>>()\r\n\r\n\r\n    constructor(){\r\n\r\n        if(this.debugSingleton.debugOn){\r\n            [\"packagesObserver$\",\"packagesLoaded$\",\"packagesUpdated$\",\"connectionsUpdated$\",\r\n            \"unselect$\",\"moduleSelected$\",\"modulesUnselected$\",\"moduleSettingsEdited$\",\"connectionSelected$\",\r\n            \"renderingLoaded$\",\"moduleAdded$\",\"cssUpdated$\",\"uiStateUpdated$\",\"descriptionsBoxesUpdated$\",\r\n            \"activeLayerUpdated$\",\"ready$\",\"flowReady$\",\"suggestions$\",\"modulesUpdated$\",\"notifications$\"]\r\n            .forEach( id => this[id].subscribe( (...args)    => this.log(id, ...args) )  )\r\n        }        \r\n    }\r\n\r\n    log(name , ...args){\r\n\r\n        this.debugSingleton.debugOn && \r\n        this.debugSingleton.logObservable( {  \r\n            level : LogLevel.Info, \r\n            message: name, \r\n            object:{ args:args \r\n            }})\r\n    }\r\n}","import { Connection, Workflow, Project, Adaptor,  \n     ModuleFlux, BuilderRendering,} from '@youwol/flux-core';\n     \nimport { AppDebugEnvironment, LogLevel } from './app-debug.environment';\nimport { Subscription } from 'rxjs';\nimport { uuidv4 } from './utils';\n\n\nexport function subscribeConnections(  allSubscriptions : Map<Connection, Subscription> , delta : {removedElements,createdElements },\n    modules:Array<ModuleFlux> , plugins:Array<ModuleFlux>){\n\n    let flatInputSlots  = modules.concat( plugins).reduce( (acc,e)=> acc.concat(e.inputSlots) , [])\n    let flatOutputSlots = modules.concat( plugins).reduce( (acc,e)=> acc.concat(e.outputSlots) , [])\n\n    delta.removedElements.forEach( (c:Connection) => {\n        allSubscriptions.get(c).unsubscribe()\n        allSubscriptions.delete(c)\n    })\n    delta.createdElements.forEach( (c:Connection) => {\n        let slotOut      = flatOutputSlots.find(slot => slot.slotId==c.start.slotId && slot.moduleId == c.start.moduleId )\n        let slotIn       = flatInputSlots.find(slot => slot.slotId==c.end.slotId && slot.moduleId == c.end.moduleId )\n        let subscription =   slotOut.observable$.subscribe(d => slotIn.subscribeFct({connection:c,message:d}) )\n        allSubscriptions.set(c,subscription )\n    })\n}\n\n\nexport function addConnection( connection: Connection, \n    project:Project ,\n    allSubscriptions: Map<Connection,Subscription> ): Project{\n\n    let debugSingleton = AppDebugEnvironment.getInstance()\n\n    debugSingleton.debugOn && \n    debugSingleton.logWorkflowBuilder( {  \n        level : LogLevel.Info, \n        message: \"connection added\", \n        object:{    connection: connection\n        }\n    })\n    \n    let modules = project.workflow.modules\n    let connections = project.workflow.connections.concat(connection)\n    let workflow   = new Workflow({  \n        modules,\n        connections,\n        plugins: project.workflow.plugins\n    })\n        \n    workflow   = new Workflow({\n        modules,\n        connections,\n        plugins: project.workflow.plugins\n    })\n\n    let projectNew = new Project({\n        ...project,\n        ...{workflow:workflow}\n    })\n    return projectNew\n}\n\nexport function addAdaptor(connection : Connection,\n    adaptor:Adaptor, \n    project:Project,\n    allSubscriptions: Map<Connection,Subscription>) : Project{\n\n    let connections = project.workflow.connections.filter(c => c!=connection)\n    let newConnection = new Connection(connection.start,connection.end, adaptor )\n    let workflow = new Workflow({\n        ...project.workflow,\n        ...{\n            connections: connections.concat(newConnection)\n        }\n    })\n\n    let projectNew = new Project({\n        ...project,\n        ...{workflow}\n    })\n\n    return projectNew\n}\nexport function updateAdaptor(connection : Connection, mappingFunction : string, project:Project,\n    allSubscriptions: Map<Connection,Subscription>) : Project {\n\n    let connections = project.workflow.connections.filter(c => c!==connection)\n\n    let adaptor = connection.adaptor\n        ? new Adaptor(connection.adaptor.adaptorId,mappingFunction)\n        : new Adaptor( uuidv4(), mappingFunction )\n    let newConnection = new Connection(connection.start,connection.end, adaptor )\n    let workflow = new Workflow({\n        ...project.workflow,\n        ...{\n            connections: connections.concat(newConnection)\n        }\n    })\n\n    let projectNew = new Project({\n        ...project,\n        ...{workflow}\n    })\n    return projectNew\n}\n\nexport function deleteAdaptor(connection : Connection, project:Project,\n        allSubscriptions: Map<Connection,Subscription>) : Project{\n\n    let connections = project.workflow.connections.filter(c => c!=connection)\n    let newConnection = new Connection(connection.start,connection.end, undefined )\n    let workflow = new Workflow({\n        ...project.workflow,\n        ...{\n            connections: connections.concat(newConnection)\n        }\n    })\n\n    let projectNew = new Project({\n        ...project,\n        ...{workflow}\n    })\n\n    return projectNew\n}\n\nexport function deleteConnection(connection : Connection, \n    project:Project,\n    allSubscriptions: Map<Connection,Subscription> ) : Project{\n        \n    let connections = project.workflow.connections.filter(c => c!=connection)\n    let workflow = new Workflow({\n        ...project.workflow,\n        ...{\n            connections\n        }\n    })\n\n    let projectNew = new Project({\n        ...project,\n        ...{workflow}\n    })\n    return projectNew\n}\n\nexport function setConnectionView(connection: Connection, config: any, project:Project ){\n    \n    let connectViews = project.builderRendering.connectionsView\n    .filter(c => c.connectionId != connection.connectionId )\n    .concat( [{connectionId:connection.connectionId, wireless:config.wireless}])\n\n    let builderRendering = new BuilderRendering(project.builderRendering.modulesView, connectViews, project.builderRendering.descriptionsBoxes)\n    let projectNew = new Project({\n        ...project,\n        ...{builderRendering}\n    })\n    \n    return projectNew\n}","\n\nimport { Environment, IEnvironment, LoadingGraphSchema, Project, Requirements } from '@youwol/flux-core'\nimport { Observable, of } from 'rxjs'\nimport { map } from 'rxjs/operators'\n\n\nfunction updateRequirements(loadingGraph: LoadingGraphSchema, project: Project): Project {\n    let actualReqs = project.requirements\n\n    let libraries = loadingGraph.lock.reduce((acc, e) => ({ ...acc, ...{ [e.name]: e.version } }), {})\n    let packs = loadingGraph.lock\n        .filter(library => library.type == 'flux-pack')\n        .map(library => library.name )\n    let requirements = new Requirements(actualReqs.fluxComponents, Array.from(packs),\n        libraries, loadingGraph)\n    let newProject = new Project({\n        ...project,\n        ...{requirements}\n    })\n    return newProject\n}\n\n\nexport function addLibraries(\n    libraries: Array<{ name: string, version: string, namespace: string }>,\n    fluxPacks: Array<{name:string}>,\n    project: Project,\n    environment: IEnvironment\n    ): Observable<Project> {\n\n    let actualLibraries = project.requirements.libraries\n    let versionChecks = libraries\n        .filter(lib => actualLibraries[lib.name] != undefined && actualLibraries[lib.name] != lib.version)\n\n    if (versionChecks.length > 0)\n        console.error(\"You can not dynamically add libraries that are already used with different version\")\n\n    let newLibraries = libraries\n    .filter(lib => actualLibraries[lib.name] == undefined)\n    .reduce((acc, e) => ({ ...acc, ...{ [e.name]: e.version } }), {})\n\n    let actualPacks = project.requirements.fluxPacks\n    \n    let newPacks = Array.from(new Set(fluxPacks.map(p =>p.name)))\n    .filter(pack => !actualPacks.includes(pack))\n\n    newPacks.filter( name =>  {\n        console.log(name, window[name])\n        return window[name] && ( window[name].install || window[name].pack.install) \n    })\n    .forEach((name) => {\n        let install = (window[name].install || window[name].pack.install)(environment)\n        if(install instanceof Observable)\n            install.subscribe()\n        if(install instanceof Promise) \n            install.then( ()=> {})\n    })\n    let body = {\n        libraries: {\n            ...project.requirements.libraries,\n            ...newLibraries\n        } as {[key:string]: string}\n    }\n    return environment.getLoadingGraph(body).pipe(\n        map((loadingGraph) => {\n            let newProject = updateRequirements(loadingGraph, project)\n            return newProject\n        })\n    )\n}\n\nexport function cleanUnusedLibraries(project: Project, environment: IEnvironment): Observable<Project> {\n\n    /*if (!environment.getLoadingGraph) {\n        return of(project)\n    }*/\n    let setPackagesUsed = new Set(\n        [...project.workflow.modules.map(m => m.Factory.packId),\n        ...project.workflow.plugins.map(m => m.Factory.packId)\n        ]\n    )\n    let packagesUsed = new Array(...setPackagesUsed)\n    if (packagesUsed.length == project.requirements.fluxPacks.length)\n        return of(project)\n\n    let libraries = Object.entries(project.requirements.libraries)\n        .filter(([k, v]) => packagesUsed.find(p => k.includes(p)))\n        .reduce((acc, [k, v]) => ({ ...acc, ...{ [k]: v } }), {})\n\n    let body = {\n        libraries: libraries,\n        using: project.requirements.libraries\n    }\n    return environment.getLoadingGraph(body).pipe(\n        map((loadingGraph) => {\n            let newProject = updateRequirements(loadingGraph, project)\n            return newProject\n        })\n    )\n}\n","import { DescriptionBox, Project, BuilderRendering } from '@youwol/flux-core'\n\n\n\nexport function addDescriptionBox(descriptionBox : DescriptionBox, project: Project) : Project{\n\n    let boxes = project.builderRendering.descriptionsBoxes.concat(descriptionBox)\n\n    let projectNew = new Project({\n        ...project,\n        ...{\n            builderRendering:new BuilderRendering(project.builderRendering.modulesView,project.builderRendering.connectionsView,boxes)\n        }\n    })\n\n    return projectNew\n    }\n\nexport function updateDescriptionBox(descriptionBox : DescriptionBox, project: Project) : Project{\n    \n    let toKeeps = project.builderRendering.descriptionsBoxes.filter(\n        b => b.descriptionBoxId != descriptionBox.descriptionBoxId\n    )\n    let boxes = toKeeps.concat([descriptionBox])\n\n    let projectNew = new Project({\n        ...project,\n        ...{\n            builderRendering:new BuilderRendering(project.builderRendering.modulesView,project.builderRendering.connectionsView,boxes)\n        }\n    })\n\n    return projectNew    \n}\n\nexport function deleteDescriptionBox(descriptionBox, project: Project) : Project{\n    \n    let toKeeps = project.builderRendering.descriptionsBoxes.filter(\n        b => b.descriptionBoxId != descriptionBox.descriptionBoxId\n    )\n    let projectNew = new Project({\n        ...project,\n        ...{\n            builderRendering:new BuilderRendering(project.builderRendering.modulesView,project.builderRendering.connectionsView,toKeeps)\n        }\n    })\n\n    return projectNew    \n}\n\n","import { Project, LayerTree, Workflow, BuilderRendering, ModuleView,\n    ModuleFlux, GroupModules, IEnvironment, ModuleConfiguration, Component} from '@youwol/flux-core';\n    \nimport { uuidv4 } from './utils';\nimport { AppDebugEnvironment, LogLevel } from './app-debug.environment';\nimport { updateComponent, updateGroup } from './app-store-modules-group';\n\n\nexport function getLayer(workflow: Workflow, parentGroup: GroupModules.Module, group: GroupModules.Module, id: string) : \n[GroupModules.Module, GroupModules.Module] {\n\n    if( group.moduleId === id )\n        return [group,parentGroup]\n    \n    return group.getDirectChildren(workflow)\n    .filter(mdle => mdle instanceof GroupModules.Module)\n    .map( (mdle:GroupModules.Module) =>{\n        return getLayer(workflow, group, mdle, id)\n    })[0]\n}\n\nlet toHtml = (content: string) => {\n    var template = document.createElement('div');\n    template.innerHTML = (content as any).trim();\n    return template as HTMLDivElement\n}\n\n\nexport function applyHtmlLayout( \n    workflow: Workflow,\n    html: string \n    ) : Workflow {\n    \n    let debugSingleton = AppDebugEnvironment.getInstance()\n\n    let htmlDiv = toHtml(html)\n    if(!htmlDiv)\n        return workflow\n\n    let componentsDiv = Array.from(htmlDiv.querySelectorAll(\".flux-component\"))\n    .reduce( (acc,e) => {\n       return {...acc, ...{[e.id]:e.cloneNode(true)}}\n    }, {})\n\n    let componentIds = Object.keys(componentsDiv)\n    // we only update the components that are part of the html layout\n    // others will keep they previous layout (desired)\n    let componentsToEventuallyUpdate = componentIds\n    .map( (componentId) => workflow.modules.find( mdle => mdle.moduleId==componentId))\n\n    let newComponents = componentsToEventuallyUpdate.map( (component: Component.Module) => {\n        let deepHtml = componentsDiv[component.moduleId]\n        if(!deepHtml)\n            return undefined\n\n        component.getDirectChildren(workflow)\n        .filter( child => child instanceof Component.Module)\n        .forEach( (childComponent: Component.Module) => {\n            let childComponentDiv = deepHtml.querySelector(`#${childComponent.moduleId}`)\n            if(childComponentDiv)\n                childComponentDiv.innerHTML = '' \n        })\n        let html = deepHtml.outerHTML\n        if(html == component.getPersistentData<Component.PersistentData>().html)\n            return undefined\n\n        let newComponent = updateComponent(component, {html})\n        return newComponent\n    })\n    .filter( d => d)\n\n    debugSingleton.debugOn && \n    debugSingleton.logWorkflowBuilder( {  \n        level : LogLevel.Info, \n        message: \"apply html layout\", \n        object:{    \n            newComponents, eventualUpdateNeeded: componentIds\n        }\n    })\n\n    let newWorkflow = new Workflow({\n        ...workflow,\n        modules: workflow.modules\n        .filter( mdle => ! newComponents.find( component => component.moduleId == mdle.moduleId))\n        .concat(...newComponents)\n    })\n    return newWorkflow\n}\n\nexport function applyHtmlCss( \n    rootComponent: Component.Module,\n    workflow: Workflow,\n    css: string \n    ) : Workflow {\n\n    let debugSingleton = AppDebugEnvironment.getInstance()\n\n    let wrapDiv = (html) => {\n        // the html of the current layer is appended to a wrapper div such that \n        // 'querySelectorAll' will also account for the 'Component_xxx' (root DOM) of 'html'\n        let wrapperDiv = document.createElement('div')\n        wrapperDiv.appendChild(html)\n        return wrapperDiv\n    }\n\n    let toCss = (content: string) => {\n\n        let styleSheet = new CSSStyleSheet()\n        content.split('}')\n        .filter( rule => rule!=\"\")\n        .forEach( rule => {\n            styleSheet.insertRule(rule) \n        })\n        return styleSheet; \n    }\n    let isEquivalent = (oldRules: string[], newRules:string[]) => {\n        oldRules = oldRules.filter( d => d!= \"\")\n        newRules = newRules.filter( d => d!= \"\")\n        if(oldRules.length!=newRules.length)\n            return false\n        let founds = oldRules.map( oldRule => newRules.includes(oldRule))\n        return founds.reduce( (acc,e)=> acc && e, true)\n    }\n    let styleSheet = toCss(css)\n    let htmlRoot = wrapDiv(rootComponent.getFullHTML(workflow))\n\n    if(!htmlRoot)\n        return workflow\n\n    \n    let newComponents = workflow.modules\n    .filter( mdle => mdle instanceof Component.Module)\n    // do not update the style if the element is not actually in the view \n    // (required by grapes: if a component is removed all its styles too - we style want to keep them if it is re-inserted)\n    .filter( mdle => htmlRoot.querySelector(`#${mdle.moduleId}`) != undefined)\n    // fetch all the rules that applies for the component\n    .map( (component: Component.Module) => {\n        let html = component.getOuterHTML()\n        let wrapperDiv = wrapDiv(html)\n        let cssRules = new Set<string>()\n\n\n        for(let i=0; i<styleSheet.rules.length;i++) {\n            let cssRule = styleSheet.rules[i] as any\n            let elements =  Array\n            .from(wrapperDiv.querySelectorAll(cssRule.selectorText))\n            // The style of child components belong to the child, not the parent\n            .filter( element => {\n                let childrenComponentId = component\n                .getDirectChildren(workflow)\n                .filter( c => c instanceof Component.Module)\n                .map(child => child.moduleId)\n                return !childrenComponentId.includes(element.id) \n            })\n            if(elements.length>0 )\n                cssRules.add(cssRule.cssText)\n        }\n        let oldCssRules = component.getPersistentData<Component.PersistentData>().css.split(\"\\n\")\n\n        if(isEquivalent(oldCssRules, [...cssRules] ))\n            return undefined\n\n        let css : string = [...cssRules].reduce((acc: string,e: string) => acc+\"\\n\"+e, \"\"); \n       \n        let newComponent = updateComponent(component, {css})\n        return newComponent\n    })\n    .filter( d => d)\n    if(newComponents.length==0){\n        debugSingleton.debugOn && \n        debugSingleton.logWorkflowBuilder( {  \n            level : LogLevel.Info, \n            message: \"no changes in css\", \n            object:{}\n        })\n        return workflow\n    }\n    let newWorkflow = new Workflow({\n        ...workflow,\n        modules: workflow.modules\n        .filter( mdle => ! newComponents.find( component => component.moduleId == mdle.moduleId))\n        .concat(...newComponents)\n    })\n    return newWorkflow\n}\n\n\nexport function cloneLayerTree(\n    layerTree: LayerTree, \n    filter = (mdleId:string)=>true, \n    layout = (layout: LayerTree) => layout.html,\n    css = (layout: LayerTree) => layout.css ) :LayerTree {\n\n    return  new LayerTree({\n        ...layerTree,\n        ...{\n            children:layerTree.children.map(c => cloneLayerTree(c,filter, layout, css)),\n            moduleIds: layerTree.moduleIds.filter( mId=>filter(mId)),\n            html: layout(layerTree),\n            css: css(layerTree)\n        }\n    })\n}\n\n\nexport function cleanChildrenLayers(layerTree: LayerTree, moduleIds = undefined) : LayerTree{\n    \n    let children = layerTree.children.filter( c => c.moduleIds.length > 0)\n    return  new LayerTree({\n        ...layerTree,\n        ...{\n            children:  children.map( c => cleanChildrenLayers(c,moduleIds)),\n            moduleIds: moduleIds ? layerTree.moduleIds.filter( m => moduleIds.includes(m) ) :layerTree.moduleIds\n        }\n    })\n}\n\n\nexport function createLayer(\n    title: string,\n    modules: Array<ModuleFlux>,\n    project:Project, \n    currentLayerId : string,\n    Factory,\n    configuration,\n    workflowGetter,\n    environment: IEnvironment\n    ):{project:Project, layer:LayerTree}{\n    \n    let debugSingleton = AppDebugEnvironment.getInstance()\n    debugSingleton.debugOn && \n    debugSingleton.logWorkflowBuilder( {  \n       level : LogLevel.Info, \n         message: \"createLayer\", \n          object:{\n            modules:modules,\n            title:title\n        }\n    })\n    \n    let modulesId = modules.map( mdle=>mdle.moduleId)\n    \n    let newGrpMdle = new Factory.Module({\n        moduleId: Factory.id.replace(\"@\",\"_\")+\"_\" + uuidv4(), \n        configuration:new ModuleConfiguration({\n            title,\n            description:'',\n            data: new Factory.PersistentData({moduleIds:modules.map(m=>m.moduleId)})\n        }),\n        Factory: Factory,\n        workflowGetter: workflowGetter,\n        environment\n    })\n    let parentGroup = project.workflow.modules.find( mdle => mdle.moduleId == currentLayerId) as GroupModules.Module\n    let parentGroupUpdated = updateGroup(parentGroup, {\n        moduleIds:parentGroup.getModuleIds().filter( mId => !modulesId.includes(mId)).concat(newGrpMdle.moduleId)})\n    \n    let workflow = new Workflow({\n        modules: project.workflow.modules\n        .filter(mdle => mdle.moduleId != parentGroup.moduleId)\n        .concat(newGrpMdle, parentGroupUpdated),\n        connections:project.workflow.connections,\n        plugins:project.workflow.plugins\n    })\n\n    let moduleViewsInGrp  = project.builderRendering.modulesView\n    .filter( view => newGrpMdle.getModuleIds().includes(view.moduleId))\n    \n    let xWorld       = moduleViewsInGrp.reduce((acc,e)=> acc+e.xWorld ,0) / moduleViewsInGrp.length\n    let yWorld       = moduleViewsInGrp.reduce((acc,e)=> acc+e.yWorld ,0) / moduleViewsInGrp.length    \n    let moduleView   = new ModuleView(newGrpMdle.moduleId,xWorld,yWorld,Factory)\n    let moduleViews  = [...project.builderRendering.modulesView,moduleView]\n    \n    let projectNew = new Project({\n        ...project,\n        ...{\n            workflow,\n            builderRendering: new BuilderRendering(moduleViews, project.builderRendering.connectionsView, project.builderRendering.descriptionsBoxes),\n        }\n    })\n\n    return { project:projectNew, layer: undefined}\n}","import { Component, GroupModules, LayerTree, ModuleConfiguration, Project} from '@youwol/flux-core'\n\nexport function updateGroup( original: GroupModules.Module, persistentFields : any ) : GroupModules.Module {\n\n    let persistentData   = new original.Factory.PersistentData({\n        ...original.getPersistentData(),\n        ...persistentFields\n    })\n    let grpConfiguration = new ModuleConfiguration({...original.configuration, data: persistentData})\n    let groupModuleNew = new original.Factory.Module( Object.assign({}, original, { configuration:grpConfiguration })) \n    return groupModuleNew\n}\n\nexport function updateComponent( original: Component.Module, persistentFields : any ) : Component.Module {\n\n    return updateGroup(original, persistentFields) as  Component.Module\n}\n\nexport function getDisplayedModulesView(\n    group: GroupModules.Module,\n    parentGroup: GroupModules.Module | undefined,\n    appStore,\n    project:Project) {\n\n\n    let modulesId = group.getModuleIds()\n    let unitModulesView = project.builderRendering.modulesView.filter(moduleView => modulesId.includes(moduleView.moduleId))\n    let parentUnitModulesView = []\n    if (parentGroup) {\n        \n        let modulesId = parentGroup.getModuleIds()\n        parentUnitModulesView = project.builderRendering.modulesView.filter(moduleView => modulesId.includes(moduleView.moduleId))       \n    }\n    return {\n        parentLayer: {\n            modulesView: parentUnitModulesView.filter( mView =>!mView.moduleId.includes(group.moduleId)),\n            modules: parentUnitModulesView.map(view => appStore.getModule(view.moduleId)),\n            currentGroupModuleView: parentUnitModulesView.find( mView =>mView.moduleId.includes(group.moduleId))\n        },\n        currentLayer: {\n            modulesView: unitModulesView,\n            modules: unitModulesView.map(view => appStore.getModule(view.moduleId))\n        }\n    }\n}\n","import { LogLevel, AppDebugEnvironment } from './app-debug.environment'\nimport { uuidv4 } from './utils'\nimport {\n    ModuleView, Workflow, BuilderRendering, Project, ModuleFlux, GroupModules,\n    ModuleConfiguration, PluginFlux, Connection, RunnerRendering, DescriptionBox, LayerTree, IEnvironment, Component\n}\n    from '@youwol/flux-core'\nimport { Subscription } from 'rxjs'\nimport { cloneLayerTree, getLayer, cleanChildrenLayers } from './app-store-layer'\n\nimport { AppObservables } from './app-observables.service'\nimport { AppStore } from './app-store'\nimport { updateGroup } from './app-store-modules-group'\n\ndeclare var _: any\n\nexport function defaultModuleRendering(mdle) {\n\n    let div = <HTMLDivElement>(document.createElement('div'))\n    div.setAttribute(\"id\", mdle.moduleId)\n    div.setAttribute(\"name\", mdle.configuration.title)\n    div.classList.add(\"flux-component\")\n    if (mdle.moduleId.includes(\"viewer3d\"))\n        div.classList.add(\"fill-parent\")\n\n    if (mdle.moduleId.includes(\"cesium\"))\n        div.classList.add(\"fill-parent\")\n    return div\n}\nexport function isGroupingModule(moduleData) {\n    return [\"GroupModules@flux-pack-core\", \"Component@flux-pack-core\"].includes(moduleData.factoryId)\n}\n/*\nexport function instantiateModules( modulesData, modulesFactory, appObservables : AppObservables,\n     environment, workflowGetter ): Array<ModuleFlux>{\n\n    let debugSingleton = AppDebugEnvironment.getInstance()\n\n    debugSingleton.debugOn && \n    debugSingleton.logWorkflowBuilder( {  \n        level : LogLevel.Info, \n        message: \"instantiateModules\", \n        object:{ modulesFactory: modulesFactory, modulesData:modulesData }\n    })\n\n    let modules = modulesData\n    .map( moduleData => {\n        let factoryKey = JSON.stringify(moduleData.factoryId)\n        let Factory = modulesFactory.get(factoryKey)\n        if(!Factory)\n            throw Error(`Can not get factory ${factoryKey}`)\n        let conf    = new Factory.Configuration({title:         moduleData.configuration.title,\n                                                 description:   moduleData.configuration.description,\n                                                 data:          new Factory.PersistentData(moduleData.configuration.data)\n                                                })\n        let data = Object.assign({},{\n            moduleId:          moduleData.moduleId, \n            configuration:     conf, \n            ready$:            appObservables.ready$,\n            Factory:           Factory,\n            workflowGetter:    workflowGetter, // only relevant for Groups\n            logger:            new ModuleLogger(debugSingleton),\n            environment:       environment}, \n                isGroupingModule(moduleData) ? \n                {workflowGetter, layerId:moduleData.moduleId.split(Factory.id+\"_\")[1] } : {})\n        \n        let mdle  = new Factory.Module(data)                         \n        return mdle \n    } ).filter(m => m)\n    \n    return modules\n}\n*/\nexport function addModule(Factory, coors, project: Project, activeLayerId: string, ready$: any, environment: IEnvironment) {\n\n    let debugSingleton = AppDebugEnvironment.getInstance()\n\n    // 1 - Create the module instance\n    let configuration = new Factory.Configuration()\n    let moduleId = Factory.id + \"_\" + uuidv4()\n    let mdle = new Factory.Module({ moduleId, configuration, Factory, ready$, environment })\n    let moduleView = new ModuleView(mdle.moduleId, coors[0], coors[1], Factory)\n\n    // 2 - Create a new group/component instance with new module added\n\n    let groupMdle = project.workflow.modules.find((mdle) => mdle.moduleId == activeLayerId)\n    let persistentData = new groupMdle.Factory.PersistentData({\n        ...groupMdle.getPersistentData(),\n        moduleIds: groupMdle.getPersistentData<GroupModules.PersistentData>().getModuleIds().concat(moduleId)\n    })\n    let grpConfiguration = new ModuleConfiguration({ ...groupMdle.configuration, data: persistentData })\n    let groupModuleNew = new groupMdle.Factory.Module(Object.assign({}, groupMdle, { configuration: grpConfiguration }))\n\n    // let rootLayerTreeNew = cloneLayerTree(project.workflow.rootLayerTree)\n    // let parentLayer = getLayer(undefined,rootLayerTreeNew,activeLayerId)[0]\n    // parentLayer.moduleIds.push(moduleId)\n\n    let workflow = new Workflow({\n        ...project.workflow,\n        ...{\n            modules: project.workflow.modules\n                .filter(mdle => mdle.moduleId != groupMdle.moduleId)\n                .concat(mdle, groupModuleNew),\n            rootLayerTree: undefined\n        }\n    })\n\n    let builderRendering = new BuilderRendering(\n        project.builderRendering.modulesView.concat(moduleView),\n        project.builderRendering.connectionsView,\n        project.builderRendering.descriptionsBoxes\n    )\n    let layout = project.runnerRendering.layout\n\n    let projectNew = new Project({\n        ...project,\n        ...{\n            workflow,\n            builderRendering,\n            runnerRendering: new RunnerRendering(layout, project.runnerRendering.style)\n        }\n    })\n\n    debugSingleton.debugOn &&\n        debugSingleton.logWorkflowBuilder({\n            level: LogLevel.Info,\n            message: \"add module\",\n            object: {\n                factory: Factory,\n                module: mdle,\n                moduleView: moduleView,\n                project: projectNew\n            }\n        })\n\n    return projectNew\n}\n\nfunction duplicate({ mdle, ready$, configuration, parent, workflow }: { mdle, ready$, configuration?, parent?, workflow?}) {\n\n    let Factory = mdle.Factory\n    if (configuration == undefined) {\n        let persistentData = new Factory.PersistentData(mdle.configuration.data)\n        configuration = new Factory.Configuration({ title: mdle.configuration.title, description: mdle.configuration.description, data: persistentData })\n    }\n    let isPlugin = \"parentModule\" in mdle\n    return isPlugin ?\n        new mdle.Factory.Module({\n            parentModule: parent ? parent : (mdle as PluginFlux<any>).parentModule,\n            moduleId: mdle.moduleId, configuration,\n            ready$,\n            Factory,\n            cache: mdle.cache,\n            environment: mdle.environment\n        }) :\n        new mdle.Factory.Module(Object.assign({}, mdle, { workflow: workflow, configuration, ready$, Factory }))\n}\n\nexport function updateModule(\n    mdle: ModuleFlux,\n    configuration: ModuleConfiguration,\n    project: Project,\n    allConnectionsSubscription: Map<Connection, Subscription>,\n    ready$): Project {\n\n    let debugSingleton = AppDebugEnvironment.getInstance()\n\n    let Factory = mdle.Factory\n    let isPlugin = \"parentModule\" in mdle\n\n    let newModule = duplicate({ mdle, ready$, configuration, workflow: project.workflow })\n\n    if (newModule instanceof GroupModules.Module) {\n        //throw \"UPDATE MODULE: WHAT TO DO IN CASE OF GROUP? Try remove the throw...it may works\"\n\n        // let layerTree = project.workflow.rootLayerTree\n        // layerTree = cloneLayerTree(project.workflow.rootLayerTree)\n        // getLayer(undefined, layerTree, newModule.layerId)[0].title = newModule.configuration.title\n    }\n\n    let getChildrenRec = (mdle: ModuleFlux): Array<any> => {\n        let directChildren = project.workflow.plugins.filter(plugin => plugin.parentModule.moduleId == mdle.moduleId)\n        let indirectChildren = directChildren.map(child => getChildrenRec(child)).filter(d => d.length > 0)\n        if (indirectChildren.length > 0)\n            throw \"UPDATE MODULE: IMPLEMENTATION NOT DONE IN CASE OF NESTED PLUGINS\"\n        return directChildren.concat(indirectChildren.reduce((acc, e) => acc.concat(e), []))\n    }\n    let children = getChildrenRec(mdle)\n\n    let toRemoveIds = [mdle.moduleId].concat(children.map(m => m.moduleId))\n    let otherModules = project.workflow.modules.filter(m => !toRemoveIds.includes(m.moduleId))\n    let otherPlugins = project.workflow.plugins.filter(m => !toRemoveIds.includes(m.moduleId))\n\n    let newModules = isPlugin ? project.workflow.modules : otherModules.concat([newModule])\n    let newPlugins = isPlugin ? otherPlugins.concat([newModule]) : otherPlugins\n    newPlugins = newPlugins.concat(children.map(child => duplicate({ mdle: child, ready$, parent: newModule })))\n\n    /*\n    The module from which updates come can have some inputs/outputs that does not exist anymore.\n    This piece of code select them and remove them from the current connections\n    */\n    let remainingInputSlots = newModule.inputSlots.map(s => s.slotId)\n    let remainingOutputSlots = newModule.outputSlots.map(s => s.slotId)\n    let connections = project.workflow.connections.filter((connection) => {\n        if (connection.start.moduleId == newModule.moduleId && !remainingOutputSlots.includes(connection.start.slotId))\n            return false\n        if (connection.end.moduleId == newModule.moduleId && !remainingInputSlots.includes(connection.end.slotId))\n            return false\n        return true\n    })\n\n    let workflow = new Workflow({\n        modules: newModules,\n        connections,\n        plugins: newPlugins\n    })\n\n    let projectNew = new Project({\n        ...project,\n        ...{ workflow }\n    })\n\n    debugSingleton.debugOn &&\n        debugSingleton.logWorkflowBuilder({\n            level: LogLevel.Info,\n            message: \"module updated\",\n            object: {\n                factory: Factory,\n                newModule: newModule,\n                newConfiguration: configuration,\n                plugins: children,\n                project: projectNew,\n                newPlugins, toRemoveIds, newModules, otherModules, otherPlugins\n            }\n        })\n    return projectNew\n}\n\nexport function alignH(moduleIds: Array<string>, project: Project, ready$) {\n\n    let modulesView = project.builderRendering.modulesView.filter(m => moduleIds.includes(m.moduleId))\n    let modulesViewToKeep = project.builderRendering.modulesView.filter(m => !moduleIds.includes(m.moduleId))\n    let yAverage = modulesView.reduce((acc, m) => acc + m.yWorld, 0) / modulesView.length\n    let newViews = modulesView.map(m => new ModuleView(m.moduleId, m.xWorld, yAverage, m.Factory))\n    let projectNew = new Project({\n        ...project,\n        ...{\n            builderRendering: new BuilderRendering(modulesViewToKeep.concat(newViews),\n                project.builderRendering.connectionsView, project.builderRendering.descriptionsBoxes)\n        }\n    })\n\n    return projectNew\n}\nexport function alignV(moduleIds: Array<string>, project: Project, ready$) {\n\n    let modulesView = project.builderRendering.modulesView.filter(m => moduleIds.includes(m.moduleId))\n    let modulesViewToKeep = project.builderRendering.modulesView.filter(m => !moduleIds.includes(m.moduleId))\n    let xAverage = modulesView.reduce((acc, m) => acc + m.xWorld, 0) / modulesView.length\n    let newViews = modulesView.map(m => new ModuleView(m.moduleId, xAverage, m.yWorld, m.Factory))\n    let projectNew = new Project({\n        ...project,\n        ...{\n            builderRendering: new BuilderRendering(modulesViewToKeep.concat(newViews),\n                project.builderRendering.connectionsView, project.builderRendering.descriptionsBoxes)\n        }\n    })\n\n    return projectNew\n}\n\n\nexport function duplicateModules(\n    modules: Array<ModuleFlux>,\n    project: Project,\n    ready$): Project {\n\n    let debugSingleton = AppDebugEnvironment.getInstance()\n    let wf = project.workflow\n    let newModules = modules.map((m: ModuleFlux) => {\n\n        let configuration = new m.Factory.Configuration({\n            title: m.configuration.title,\n            description: m.configuration.description,\n            data: _.cloneDeep(m.configuration.data)\n        })\n        let moduleId = m.Factory.id + \"_\" + uuidv4()\n        let mdle = new m.Factory.Module({\n            moduleId, configuration, ready$, Factory: m.Factory, environment: m.environment\n        })\n        return mdle\n    })\n\n    let views = project.builderRendering.modulesView.filter(mView => modules.map(m => m.moduleId).includes(mView.moduleId))\n    let maxYWorld = Math.max(...views.map(mView => mView.yWorld))\n    let maxXWorld = Math.max(...views.map(mView => mView.xWorld))\n    let newViews = modules.map((m: ModuleFlux, i) => {\n        let newView = new ModuleView(newModules[i].moduleId, maxXWorld + (i + 1) * 50, maxYWorld + (i + 1) * 50, m.Factory)\n        return newView\n    })\n    let parentGroups = newModules\n        .map((moduleDuplicated) => {\n            let parent = project.workflow.modules\n                .find(mdle =>\n                    mdle instanceof GroupModules.Module &&\n                    mdle.getPersistentData<GroupModules.PersistentData>().getModuleIds().includes(moduleDuplicated.moduleId)\n                )\n            return [parent.moduleId, moduleDuplicated.moduleId]\n        })\n        .reduce((acc, [parentId, mdleId]) => {\n            acc[parentId] = acc[parentId]\n                ? acc[parentId].concat(mdleId)\n                : [mdleId]\n            return acc\n        }, {})\n\n    let newGroups = Object.entries(parentGroups).map(([parentId, moduleIds]: [string, string[]]) => {\n        let parent = project.workflow.modules.find(mdle => mdle.moduleId == parentId) as GroupModules.Module\n        let persistentData = parent.getPersistentData<GroupModules.Module>()\n        let newGroup = updateGroup(parent, { moduleIds: persistentData.getModuleIds().concat(...moduleIds) })\n        return newGroup\n    })\n\n    let builderRenderer = new BuilderRendering(project.builderRendering.modulesView.concat(newViews),\n        project.builderRendering.connectionsView, project.builderRendering.descriptionsBoxes)\n\n    let projectNew = new Project({\n        ...project,\n        ...{\n            workflow: new Workflow({\n                modules: wf.modules\n                    .filter(mdl => !newGroups.map(mdle => mdle.moduleId).includes(mdl.moduleId))\n                    .concat(...newModules, ...newGroups),\n                connections: wf.connections,\n                plugins: wf.plugins\n            }),\n            builderRendering: builderRenderer\n        }\n    })\n\n    debugSingleton.debugOn &&\n        debugSingleton.logWorkflowBuilder({\n            level: LogLevel.Info,\n            message: \"duplicateModules\",\n            object: { modules, newModules, newViews, projectNew }\n        })\n    return projectNew\n}\n\nexport function moveModules(modulesPosition, moduleViews, project: Project, implicitModules): Project {\n\n    let debugSingleton = AppDebugEnvironment.getInstance()\n\n    let explicitModulesPosition = modulesPosition.map(\n        modulePosition => [modulePosition]\n    ).reduce((acc, e) => acc.concat(e), [])\n\n    let modulesViewToKeep = moduleViews.filter(m =>\n        !explicitModulesPosition.map(mNew => mNew.moduleId).includes(m.moduleId))\n\n    let modulesViewNew = explicitModulesPosition\n        .map(mdle => [mdle, moduleViews.find(m => m.moduleId == mdle.moduleId)])\n        .filter(([mdle, mOld]) => Math.abs(mOld.xWorld - mdle.x) > 3 || Math.abs(mOld.yWorld - mdle.y) > 3)\n        .map(([mdle, mOld]) => new ModuleView(mdle.moduleId, mdle.x, mdle.y, mOld.Factory))\n\n    if (modulesViewNew.length == 0)\n        return undefined\n\n    debugSingleton.debugOn &&\n        debugSingleton.logWorkflowBuilder({\n            level: LogLevel.Info,\n            message: \"move modules\",\n            object: { modulesPosition, modulesViewToKeep, modulesViewNew }\n        })\n\n    let boxNeedUpdate = project.builderRendering.descriptionsBoxes.find(box =>\n        box.modulesId.length !== box.modulesId.filter(mId => modulesViewNew.map(m => m.moduleId).indexOf(mId) >= 0).length)\n\n    let descriptionBoxes = boxNeedUpdate ? project.builderRendering.descriptionsBoxes.map(\n        box => {\n            if (!box.modulesId.find(mId => modulesViewNew.map(m => m.moduleId).indexOf(mId) >= 0))\n                return box\n            return new DescriptionBox(box.descriptionBoxId, box.title, box.modulesId, box.descriptionHtml, box.properties)\n        }) :\n        project.builderRendering.descriptionsBoxes\n\n\n    let projectNew = new Project({\n        ...project,\n        ...{\n            builderRendering: new BuilderRendering(modulesViewToKeep.concat(modulesViewNew),\n                project.builderRendering.connectionsView,\n                descriptionBoxes)\n        }\n    })\n\n    return projectNew\n}\n\nexport function deleteModules(modulesDeleted: Array<ModuleFlux>, project: Project): Project {\n\n    let debugSingleton = AppDebugEnvironment.getInstance()\n\n    if (modulesDeleted.length === 0)\n        return undefined\n    debugSingleton.debugOn &&\n        debugSingleton.logWorkflowBuilder({\n            level: LogLevel.Info,\n            message: \"deleteModules\",\n            object: {\n                modulesDeleted: modulesDeleted\n            }\n        })\n    let grpMdlesDeleted = modulesDeleted.filter(mdle => mdle instanceof GroupModules.Module)\n    let inGroupModulesDeleted = grpMdlesDeleted\n    .map((grpMdle: GroupModules.Module) => grpMdle.getAllChildren(project.workflow))\n    .flat()\n    \n    let modulesToDeleteId = [\n        ...modulesDeleted.map(m => m.moduleId), \n        ...inGroupModulesDeleted.reduce((acc, e) => acc.concat(e.moduleId), [])\n    ]\n\n    let indirectDeletedId = project.workflow.plugins\n        .filter(plugin => modulesToDeleteId.includes(plugin.parentModule.moduleId))\n        .map(p => p.moduleId)\n\n    modulesToDeleteId = modulesToDeleteId.concat(indirectDeletedId)\n\n    let newGroups = project.workflow.modules\n        .filter(mdle => mdle instanceof GroupModules.Module)\n        .filter((mdle: GroupModules.Module) => !grpMdlesDeleted.includes(mdle))\n        .map((mdle: GroupModules.Module) => {\n            let childIds = mdle.getModuleIds()\n            let filtered = childIds.filter(mId => !modulesToDeleteId.includes(mId))\n            if (childIds.length == filtered.length)\n                return undefined\n            return updateGroup(mdle, {moduleIds: filtered})\n        })\n        .filter( d => d)\n    \n    let modules = project.workflow.modules\n        .filter(m => !modulesToDeleteId.includes(m.moduleId))\n        .filter(m => !newGroups.map(m => m.moduleId).includes(m.moduleId))\n        .concat(...newGroups)\n\n    let pluginsToKeep = project.workflow.plugins\n        .filter(m => !modulesToDeleteId.includes(m.moduleId))\n\n    let modulesView = project.builderRendering.modulesView\n        .filter(m => !modulesToDeleteId.includes(m.moduleId))\n\n    let connectionsToKeep = project.workflow.connections\n        .filter(c => !modulesToDeleteId.includes(c.end.moduleId) &&\n            !modulesToDeleteId.includes(c.start.moduleId))\n\n    let workflow = new Workflow({\n        modules,\n        connections: connectionsToKeep,\n        plugins: pluginsToKeep\n    })\n\n    let boxNeedUpdate = project.builderRendering.descriptionsBoxes.find(box =>\n        box.modulesId.length !== box.modulesId.filter(mId => modulesDeleted.map(m => m.moduleId).indexOf(mId) >= 0).length)\n\n    let descriptionBoxes = boxNeedUpdate ? project.builderRendering.descriptionsBoxes.map(\n        box => {\n            let moduleIdsToKeep = box.modulesId.filter(mId => modulesDeleted.map(m => m.moduleId).indexOf(mId) < 0)\n            if (moduleIdsToKeep.length == box.modulesId.length)\n                return box\n            console.log(\"REMOVE MODULE FORM DBOX\", moduleIdsToKeep)\n            return new DescriptionBox(box.descriptionBoxId, box.title, moduleIdsToKeep, box.descriptionHtml, box.properties)\n        }) :\n        project.builderRendering.descriptionsBoxes\n\n    let projectNew = new Project({\n        ...project,\n        ...{\n            workflow,\n            builderRendering: new BuilderRendering(modulesView, project.builderRendering.connectionsView, descriptionBoxes)\n        }\n    })\n    return projectNew\n}","\nimport { PluginFlux, Workflow, Project, IEnvironment} from '@youwol/flux-core'\nimport { AppDebugEnvironment, LogLevel } from './app-debug.environment'\nimport { uuidv4 } from './utils'\n\n\nexport function getAvailablePlugins( mdle , pluginsFactory ) {\n\n    let plugins = []\n    Array.from(pluginsFactory.entries()).forEach( ([k,v]) => {\n        if(mdle.factory && v.parentModule === mdle.factory.id)\n            plugins.push({\n                factoryId: k,pluginFactory:v\n            })\n    })\n    return plugins\n}\n\nexport function getPlugins( moduleId: string, project:Project) : Array<PluginFlux<any>> {\n\n    return project.workflow.plugins.filter( plugin => \n        plugin.parentModule.moduleId === moduleId)\n}\n\nexport function addPlugin( Factory, parentModule , project, ready$, environment: IEnvironment ) {\n\n    let debugSingleton = AppDebugEnvironment.getInstance()\n\n    let configuration  = new Factory.Configuration()\n    let moduleId       = Factory.id + \"_\" + uuidv4()\n    let plugin         = new Factory.Module( {parentModule, moduleId, configuration, Factory, ready$, environment}) \n    \n    debugSingleton.debugOn && \n    debugSingleton.logWorkflowBuilder( {  \n        level : LogLevel.Info, \n        message: \"add plugin\", \n        object:{ plugin: plugin, \n            pluginFactory: Factory }\n    })\n\n    let workflow   = new Workflow({\n        ...project.workflow,\n        ...{\n            plugins: project.workflow.plugins.concat([plugin])\n        }\n    })\n    \n    let projectNew = new Project({\n        ...project,\n        ...{\n            workflow\n        }\n    }) \n    \n    return projectNew\n}\n","\nimport { Component, Project, RunnerRendering, Workflow } from '@youwol/flux-core'\nimport { LogLevel, AppDebugEnvironment } from './app-debug.environment'\nimport { applyHtmlCss, applyHtmlLayout } from './app-store-layer'\n\nexport function setRenderingLayout( layout: string, project:Project ) : Project {\n\n    let debugSingleton = AppDebugEnvironment.getInstance()\n\n    debugSingleton.debugOn && \n    debugSingleton.logWorkflowBuilder( {  \n        level : LogLevel.Info, \n        message: \"set rendering layout\", \n        object:{    layout: layout\n        }\n    })\n    let workflow = applyHtmlLayout(project.workflow, layout)\n    let projectNew = new Project({\n        ...project,\n        ...{\n            workflow: workflow,\n            runnerRendering: new RunnerRendering(layout,project.runnerRendering.style )\n        }\n    }) \n    \n    return projectNew\n}\n\nexport function setRenderingStyle(rootComponent: Component.Module, style, project: Project):Project{\n\n    let debugSingleton = AppDebugEnvironment.getInstance()\n\n    debugSingleton.debugOn && \n    debugSingleton.logWorkflowBuilder( {  \n        level : LogLevel.Info, \n        message: \"set rendering style\", \n        object:{    style: style\n        }\n    })\n    let workflow = applyHtmlCss(rootComponent, project.workflow, style)\n    if(workflow==project.workflow)\n        return project\n        \n    let projectNew = new Project({\n        ...project,\n        ...{\n            workflow,\n            runnerRendering: new RunnerRendering(project.runnerRendering.layout,style )\n        }\n    })\n    \n    return projectNew\n}","\nimport {Requirements, \n    Project,Workflow,BuilderRendering,RunnerRendering,\n    Component, Connection, ModuleFlux, PluginFlux,  ModuleConfiguration, \n    DescriptionBox, LayerTree, instanceOfSideEffects, \n    GroupModules, DescriptionBoxProperties,  FluxExtensionAPIs, loadProjectDatabase$, loadProjectURI$, ProjectSchema, IEnvironment, loadProjectDependencies$, createProject } from '@youwol/flux-core';\n\nimport { AppObservables } from './app-observables.service';\nimport { AppDebugEnvironment,LogLevel } from './app-debug.environment';\nimport { AppBuildViewObservables } from './observables-plotters';\nimport { AppExtensionsObservables } from './app-extensions-observables.service';\nimport { toProjectData, toProjectURI } from './factory-utils';\n\nimport { addModule,updateModule, moveModules,deleteModules, duplicateModules, alignH, alignV } from './app-store-modules';\nimport { getAvailablePlugins, getPlugins, addPlugin } from './app-store-plugins';\nimport { addConnection , deleteConnection, addAdaptor, \n    deleteAdaptor, updateAdaptor, subscribeConnections, setConnectionView} from './app-store-connections';\n    \nimport { addDescriptionBox, updateDescriptionBox, deleteDescriptionBox } from './app-store-description-box';\nimport { setRenderingStyle, setRenderingLayout } from './app-store-runner-rendering';\nimport { applyHtmlLayout, createLayer, getLayer } from './app-store-layer';\nimport { getDisplayedModulesView } from './app-store-modules-group';\nimport { filter, mergeMap,map, tap } from 'rxjs/operators';\nimport {  getDelta, workflowDelta } from './project-delta';\nimport * as _ from 'lodash'\nimport { uuidv4, packageAssetComponent, plugBuilderViewsSignals } from './utils';\nimport { BuilderStateAPI } from './extension';\nimport { addLibraries, cleanUnusedLibraries } from './app-store-dependencies';\nimport { Observable, Subject } from 'rxjs';\nimport { CdnEvent } from '@youwol/cdn-client';\n\n\nexport class UiState{\n    constructor(\n        public readonly mode : string,\n        public readonly rendererEditorsVisible: boolean,\n        public readonly isEditing : boolean) {\n\n    }\n}\n\nexport interface BackendInterface{\n    getAdaptors()\n    getProject(id:string)\n    postProject(id:string,body:Object)\n    postAdaptor(body:Object)\n}\n\nexport class AppStore {\n    \n\n    private static instance : AppStore = undefined\n\n    static getInstance(environment: IEnvironment) {\n        if(!AppStore.instance)\n            AppStore.instance =  new AppStore(\n                environment,\n                AppObservables.getInstance(),\n                AppBuildViewObservables.getInstance()\n            )\n        return AppStore.instance\n    }\n    debugSingleton = AppDebugEnvironment.getInstance()\n\n    builderViewsActions = {\n        configurationUpdated: (data) => this.updateModule(data.module,data.configuration)\n    }\n    allSubscriptions = new Map<Connection,any>()\n\n    projectId = undefined\n    project   = new Project({\n        name:\"new project\", \n        schemaVersion:\"1.0\",\n        description: \"\",\n        requirements: new Requirements([],[],{},{}),\n        workflow: new Workflow({\n            modules:[],\n            connections:[],\n            plugins:[]\n        }),\n        builderRendering: new BuilderRendering([],[],[]), \n        runnerRendering: new RunnerRendering(\"\",\"\") \n    })\n    workflow$ = new Subject<Workflow>()\n    \n    rootLayerId = 'Component_root-component'\n    activeLayerId   : string = this.rootLayerId\n    adaptors        = [] \n    history         = new Array<Project>(this.project)\n    indexHistory    = 0\n    uiState         = new UiState( \"combined\", false,false)\n\n    modulesFactory : Map<string, any> \n    pluginsFactory : Map<string,any> \n    packages        = []\n\n    implicitModules         : Array<ModuleFlux> = []\n    moduleSelected          : ModuleFlux = undefined\n    modulesSelected         : Array<ModuleFlux> = []\n    connectionSelected      : Connection =undefined\n    descriptionBoxSelected  : DescriptionBox =undefined\n\n    appExtensionsObservables : AppExtensionsObservables = AppExtensionsObservables.getInstance()\n\n    constructor(\n        public readonly environment: IEnvironment, \n        public appObservables : AppObservables,\n        public appBuildViewObservables: AppBuildViewObservables,\n        ){  \n            this.environment = environment\n\n            this.debugSingleton.logWorkflowBuilder( {  \n                    level : LogLevel.Info, \n                    message: \"AppStore constructed\", \n                    object:{ appStore:this }\n            })\n\n            GroupModules['BuilderView'].notifier$.pipe( filter((event:any)=>event.type==\"layerFocused\")).subscribe( d=>\n                this.selectActiveLayer(d.data))     \n            Component['BuilderView'].notifier$.pipe( filter((event:any)=>event.type==\"layerFocused\")).subscribe( d=>\n                this.selectActiveLayer(d.data))  \n            GroupModules['BuilderView'].notifier$.pipe( filter((event:any)=>event.type==\"closeLayer\")).subscribe( d=>\n                this.selectActiveLayer(this.getParentLayer(d.data).moduleId ))  \n            Component['BuilderView'].notifier$.pipe( filter((event:any)=>event.type==\"closeLayer\")).subscribe( d=>\n                this.selectActiveLayer(this.getParentLayer(d.data).moduleId ))  \n            this.appObservables.renderingLoaded$.next( { style: \"\", layout:\"\", cssLinks: [] } )\n    }\n\n    setUiState(state){\n        this.debugSingleton.debugOn && \n        this.debugSingleton.logWorkflowBuilder( {  \n                level : LogLevel.Info, \n                message: \"ui state updated\", \n                object:{ state:state }\n        })\n\n        this.uiState = state\n        this.appObservables.uiStateUpdated$.next(this.uiState)\n    }\n\n    loadProject(projectId: string, project: ProjectSchema, onEvent? : (CdnEvent) => void){\n        \n        this.projectId = projectId\n        let project$ = loadProjectDependencies$(project, this.environment, onEvent).pipe(\n            map( ({ project, packages }) => {\n                return createProject(project, packages,  this.workflow$, this.allSubscriptions, this.environment)\n            })\n        )\n        \n        this.initializeProject(project$)\n    }\n\n    loadProjectId(projectId: string){\n        \n        this.projectId = projectId\n\n        let project$ = loadProjectDatabase$(projectId, this.workflow$, this.allSubscriptions, this.environment)\n        this.initializeProject(project$)\n    }\n\n    loadProjectURI(projectURI: string){\n        \n        this.projectId = undefined\n        let project$ = loadProjectURI$(projectURI, this.workflow$, this.allSubscriptions, this.environment)\n        this.initializeProject(project$)\n    }\n    \n    initializeProject( project$ : Observable<{project:Project, packages: Array<any>}>){\n        project$.subscribe( ({project, packages}: {project:Project, packages: Array<any>}) => {\n\n            this.appObservables.packagesUpdated$.next(packages);\n            let rootComponent = project.workflow.modules.find( mdle => mdle.moduleId == this.rootLayerId ) as Component.Module\n            this.activeLayerId = rootComponent.moduleId\n\n            this.debugSingleton.debugOn &&\n            this.debugSingleton.logWorkflowBuilder( {  \n                level : LogLevel.Info, \n                message: \"project created\", \n                object:{ project: this.project }\n            })\n            this.updateProject(project)\n\n            this.loadExtensions()\n\n            this.appObservables.ready$.next(true)\n            this.appObservables.packagesLoaded$.next();\n            this.appObservables.uiStateUpdated$.next(this.uiState)\n\n            let layout = rootComponent.getFullHTML(project.workflow)\n            let style = rootComponent.getFullCSS(project.workflow, {asString: true})\n            this.appObservables.renderingLoaded$.next( { \n                style, \n                layout,\n                cssLinks: [] \n            })\n        })\n    }\n\n    loadExtensions(){\n        // this test is for backward compatibility w/ flux-lib-core\n        if(!FluxExtensionAPIs)\n            return\n        BuilderStateAPI.initialize(this)\n        FluxExtensionAPIs.registerAPI('BuilderState', BuilderStateAPI)\n    }\n\n    addLibraries$( libraries: Array<{name: string, version: string, namespace: string}>,\n                   fluxPacks: Array<{name:string}>){\n\n        return addLibraries(libraries, fluxPacks, this.project, this.environment ).pipe(\n            tap( (newProject) => {\n                this.updateProject(newProject)\n            })\n        )\n    }    \n\n    projectSchema$(): Observable<ProjectSchema>{\n        return cleanUnusedLibraries(this.project, this.environment).pipe(\n            map( project => toProjectData(project))\n        )\n    }\n\n    projectURI$(): Observable<string>{\n        return this.projectSchema$().pipe(\n            map( project => {\n                return `/ui/flux-builder/?uri=${toProjectURI(project)}`\n            })\n        )\n    }\n\n    saveProject(){\n        this.projectSchema$().pipe(\n            mergeMap( body => \n                this.environment.postProject(this.projectId, body).pipe(\n                    map( () => body)\n                ))  \n        )\n        .subscribe( (body) => {\n            this.debugSingleton.debugOn && \n            this.debugSingleton.logWorkflowBuilder( {  \n                level : LogLevel.Info, \n                message: \"project saved\",\n                object:{ body, project: this.project } \n            }) \n        })        \n    }\n\n    getModulesFactory(){\n        return this.packages\n        .map( p => Object.entries(p.modules).map( ([_,mdle]:[any,any]) => [ `${mdle.id}@${p.id}`, mdle]))\n        .reduce( (acc,e) => acc.concat(e), [] )\n        .reduce( (acc,e:[string,any]) => _.merge( acc, { [e[0]]:e[1] }), {} )\n    }\n\n    getAvailablePlugins( mdle ) {\n        return getAvailablePlugins( mdle , this.pluginsFactory )\n    }\n\n    getPlugins( moduleId ) : Array<PluginFlux<any>> {\n        return getPlugins(moduleId,this.project)\n    }\n\n    addPlugin( Factory, parentModule ) : ModuleFlux {\n        let project = addPlugin(Factory, parentModule,this.project, this.appObservables.ready$, this.environment)\n        this.updateProject(project)\n        return  project.workflow.plugins.slice(-1)[0]\n    }\n\n    addModule( moduleFactory, coors = [0,0] ) : ModuleFlux{\n\n        let project = addModule( moduleFactory, coors, this.project , this.activeLayerId,this.appObservables.ready$, this.environment)\n        this.updateProject(project)\n        return project.workflow.modules.slice(-1)[0]\n    }\n\n    updateModule(mdle:ModuleFlux, configuration: ModuleConfiguration, unselect = true) {\n        \n        let project = updateModule(mdle,configuration, this.project,this.allSubscriptions,this.appObservables.ready$)\n        if(unselect)\n            this.unselect()\n        this.updateProject(project)\n    }\n\n    duplicateModules( modules : Array<ModuleFlux>) {\n\n        let project = duplicateModules(modules, this.project, this.appObservables.ready$ )\n        this.updateProject(project)\n    }\n\n    alignH( modules : Array<ModuleFlux>) {\n\n        let project = alignH(modules.map(m=>m.moduleId), this.project, this.appObservables.ready$ )\n        this.updateProject(project)\n    } \n\n    alignV( modules : Array<ModuleFlux>) {\n\n        let project = alignV(modules.map(m=>m.moduleId), this.project, this.appObservables.ready$ )\n        this.updateProject(project)\n    }\n\n    moveModules( modulesPosition ){\n        modulesPosition = modulesPosition.filter( m => this.getActiveLayer().getModuleIds().includes(m.moduleId) )\n        let project = moveModules(modulesPosition,this.project.builderRendering.modulesView, this.project,this.implicitModules)\n        this.updateProject(project)\n    }\n\n    getModuleSelected(): ModuleFlux{\n        if(this.moduleSelected )\n            return this.moduleSelected \n        if(this.modulesSelected.length == 1)\n            return this.modulesSelected[0]\n        return undefined\n    }\n\n    getModulesSelected(): Array<ModuleFlux>{\n        if(this.moduleSelected )\n            return [this.moduleSelected]\n        if(this.modulesSelected.length > 0)\n            return this.modulesSelected\n\n        return []\n    }\n\n    isSelected(moduleId:string){\n\n        if(this.moduleSelected && this.moduleSelected.moduleId === moduleId)\n            return true\n        \n        if(this.modulesSelected && this.modulesSelected.find( m => m.moduleId === moduleId) )\n            return true\n\n        return false\n    }\n\n    selectModule(moduleId:string){\n        \n        if(  this.modulesSelected.find(m => m.moduleId == moduleId) || \n            (this.moduleSelected && this.moduleSelected.moduleId == moduleId ) )\n            return \n\n        if( this.moduleSelected && this.moduleSelected.moduleId != moduleId ){\n            this.appObservables.modulesUnselected$.next( [this.moduleSelected] )\n            this.moduleSelected = undefined\n        }\n        \n        if( !this.modulesSelected.find(m => m.moduleId == moduleId) ){\n            this.appObservables.modulesUnselected$.next( this.modulesSelected )\n            this.modulesSelected  = []\n        }\n        \n        this.moduleSelected = this.getModule(moduleId)\n        this.debugSingleton.debugOn && \n        this.debugSingleton.logWorkflowBuilder( {  \n            level : LogLevel.Info, \n            message: \"module selected\", \n            object:{    module: this.moduleSelected\n            }\n        })\n        this.appObservables.moduleSelected$.next(this.moduleSelected )\n    }\n\n    selectConnection(connection: Connection | string){\n\n        this.unselect()\n        this.connectionSelected = connection instanceof Connection\n            ? connection\n            : this.getConnection(connection)\n        this.debugSingleton.debugOn && \n        this.debugSingleton.logWorkflowBuilder( {  \n            level : LogLevel.Info, \n            message: \"connection selected\", \n            object:{    module: this.connectionSelected\n            }\n        })\n        this.appObservables.connectionSelected$.next(this.connectionSelected )\n        let moduleFrom = this.getModule(this.connectionSelected.start.moduleId)\n        let moduleTo = this.getModule(this.connectionSelected.end.moduleId)\n        let suggestions = this.adaptors.filter( a =>\n            a.fromModuleFactoryId === moduleFrom[\"factoryId\"] &&\n            a.toModuleFactoryId   === moduleTo[\"factoryId\"] &&\n            a.fromModuleSlotId === this.connectionSelected.start.slotId &&\n            a.toModuleSlotId === this.connectionSelected.end.slotId)\n        if(!this.connectionSelected.adaptor)\n            this.appObservables.suggestions$.next(suggestions)\n    }\n\n    select( {modulesId,connectionsId}: {modulesId:Array<String>, connectionsId:Array<Connection>}){\n\n        this.unselect()\n        this.modulesSelected= this.project.workflow.modules.filter(m=>modulesId.includes(m.moduleId))\n        this.modulesSelected.forEach( m => this.appObservables.moduleSelected$.next(m))\n    }\n\n    getModuleOrPlugin(moduleId:string):ModuleFlux{\n        let allModules= this.getModulesAndPlugins()\n        let m = allModules.find( m => m.moduleId === moduleId)\n        return m\n    }\n\n    getModule(moduleId:string):ModuleFlux{\n\n        let m = this.getModulesAndPlugins().find( m => m.moduleId === moduleId)\n        if(m)\n            return m\n        m = this.implicitModules.find( m => m.moduleId === moduleId)\n        return m\n    }\n    \n    deleteModules(modulesDeleted:Array<ModuleFlux>){\n        \n        this.unselect()\n        let project = deleteModules(modulesDeleted,this.project)\n        if(!project)\n            return \n        let rootComponent = project.workflow.modules\n        .find( mdle => mdle.moduleId == this.rootLayerId) as Component.Module\n        \n        if(!getLayer(project.workflow, rootComponent, rootComponent, this.activeLayerId)){\n            // if the group has been deleted => we focus on the root-component\n            let oldLayer = this.activeLayerId\n            this.activeLayerId = this.rootLayerId\n            this.updateProject(project)            \n            this.appObservables.activeLayerUpdated$.next({fromLayerId:oldLayer, toLayerId: this.activeLayerId})\n            return\n        }\n        this.updateProject(project)            \n    }\n        \n    deleteModule(mdle:ModuleFlux){\n        \n        if(mdle==this.moduleSelected)\n            this.unselect()\n        this.deleteModules([mdle])\n    }\n\n    getActiveLayer() : GroupModules.Module{\n        return getLayer(this.project.workflow, undefined, this.getModule(this.rootLayerId) as Component.Module, this.activeLayerId)[0]\n    }\n\n    getRootLayer() :  Component.Module{ \n        return getLayer(this.project.workflow, undefined, this.getModule(this.rootLayerId) as Component.Module, this.rootLayerId)[0] as Component.Module\n    }\n\n    getLayer(layerId) : GroupModules.Module{\n        let a =  getLayer(this.project.workflow, undefined, this.getModule(this.rootLayerId) as Component.Module, layerId)\n        if(a==undefined){\n            console.error(\"Can not find layer \",layerId)\n            return undefined\n        }\n        return a[0]\n    }\n\n    getParentLayer(layerId) : GroupModules.Module{\n        return getLayer(this.project.workflow, undefined, this.getModule(this.rootLayerId) as Component.Module, layerId)[1]\n    }\n\n    selectActiveLayer(layerId) {\n        this.debugSingleton.debugOn && \n        this.debugSingleton.logWorkflowBuilder( {  \n            level : LogLevel.Info, \n            message: \"selectActiveLayer\", \n            object:{    \n                layerId: layerId\n            }\n        })\n        if(this.activeLayerId == layerId)\n            return\n        let oldLayerId = this.activeLayerId\n        this.activeLayerId = layerId\n        this.appBuildViewObservables.modulesViewUpdated$.next(this.getActiveModulesView()) \n        this.appObservables.descriptionsBoxesUpdated$.next(this.project.builderRendering.descriptionsBoxes) \n        this.appObservables.activeLayerUpdated$.next({fromLayerId:oldLayerId, toLayerId:layerId})\n        //this.addDescriptionBox(descriptionBox)\n    }\n\n    getActiveModulesId(){\n        return this.getLayer(this.activeLayerId).getModuleIds()\n    }\n\n    getActiveModulesView(){\n        //deprecated, use getDisplayedModulesView, need to remove from tests\n        const displayed = this.getDisplayedModulesView()\n        return [...displayed.currentLayer.modulesView, ...displayed.parentLayer.modulesView]\n    }\n    \n    getDisplayedModulesView(){\n        \n        let [activeGroup, parentGroup] = getLayer(this.project.workflow, undefined, this.getModule(this.rootLayerId) as Component.Module, this.activeLayerId)\n        return getDisplayedModulesView(activeGroup,parentGroup,this,this.project)\n    }\n\n    getGroupModule(layerId:string): GroupModules.Module{\n        return this.project.workflow.modules\n        .find( m => m instanceof GroupModules.Module && m.moduleId == layerId) as GroupModules.Module\n    }\n\n    getParentGroupModule(moduleId:string): GroupModules.Module{\n\n        let mdle = this.getModule(moduleId)\n        if( this.project.workflow.plugins.map(plugin=>plugin.moduleId).includes(mdle.moduleId))\n            mdle = (mdle as PluginFlux<any>).parentModule\n\n        return this.project.workflow.modules\n            .filter( mdle => mdle instanceof GroupModules.Module)\n            .find( (grp: GroupModules.Module) => grp.getModuleIds().includes(mdle.moduleId)) as GroupModules.Module\n    }\n\n    getChildrenRecursive(layerId) : ModuleFlux[] {\n        let layer = this.getLayer(layerId)\n        let all = layer.getAllChildren(this.project.workflow)\n        return all\n    }\n\n    getModulesAndPlugins(): Array<ModuleFlux>{\n        return this.project.workflow.modules.concat(this.project.workflow.plugins)\n    }\n\n    addRemoteComponent(componentId: string, [x,y] : [number, number]){\n        /*Backend.getComponent(componentId).subscribe( component=> {\n            let project = addRemoteComponent(component, this.modulesFactory,[x,y],this.project, this.activeLayerId,\n                (_)=>this.project.workflow, this.appObservables.ready$, this.environment) \n            console.log(\"New project!\", project)\n            this.updateProject(project)\n            }\n        )\n        */\n    }\n    \n    getConnection(connectionId:string):Connection{\n\n        let c = this.project.workflow.connections.find( c => c.connectionId === connectionId)\n        return c\n    }\n    \n    addConnection( connection: Connection ){\n        let project = addConnection(connection, this.project, this.allSubscriptions)\n        \n        this.updateProject(project)\n        this.unselect()\n        this.appObservables.connectionsUpdated$.next(this.project.workflow.connections)\n    }\n\n    setConnectionView(connection: Connection, properties, unselect = true ){\n        let project = setConnectionView(connection, properties, this.project)\n        this.updateProject(project)\n        if(unselect)\n            this.unselect()\n        this.appObservables.connectionsUpdated$.next(this.project.workflow.connections)\n    }\n\n    getConnectionSelected(){\n        return this.connectionSelected\n    }\n\n    getConnectionView(connectionId:string){\n        return this.project.builderRendering.connectionsView.find( c=>c.connectionId == connectionId)\n    }\n\n    deleteConnection(connection : Connection) {\n        \n        if( this.connectionSelected=== connection){\n            this.connectionSelected = undefined\n            this.appObservables.unselect$.next()\n        }\n        let project = deleteConnection(connection,this.project, this.allSubscriptions)        \n        this.updateProject(project)\n        this.appObservables.connectionsUpdated$.next(this.project.workflow.connections)\n    }\n\n    addAdaptor(adaptor, connection : Connection){\n\n        let project = addAdaptor(connection, adaptor, this.project, this.allSubscriptions)\n        this.updateProject(project)\n        this.appObservables.connectionsUpdated$.next(this.project.workflow.connections)\n    }\n\n    deleteAdaptor(connection : Connection){\n\n        let project = deleteAdaptor(connection, this.project, this.allSubscriptions)\n        this.updateProject(project)\n        this.appObservables.connectionsUpdated$.next(this.project.workflow.connections)\n    }\n\n    publishAdaptor(connection : Connection){\n        \n        /*this.environment.backend.postAdaptor({\n            adaptorId:connection.adaptor.adaptorId,\n            fromModuleFactoryId: this.getModule(connection.start.moduleId)[\"factoryId\"],\n            toModuleFactoryId: this.getModule(connection.end.moduleId)[\"factoryId\"],\n            fromModuleSlotId:connection.start.slotId,\n            toModuleSlotId:connection.end.slotId,\n            configuration:connection.adaptor.configuration\n            }).subscribe(()=> console.log(\"adaptor published\"))\n            */\n    }\n\n    updateAdaptor(connection : Connection, mappingFunction: string ){\n        let project = updateAdaptor(connection, mappingFunction, this.project, this.allSubscriptions)\n        this.updateProject(project)\n        this.appObservables.connectionsUpdated$.next(this.project.workflow.connections)\n    }\n\n    unselect(){\n        this.modulesSelected = []\n        this.moduleSelected = undefined\n        this.connectionSelected =undefined\n        this.descriptionBoxSelected =undefined\n        this.appObservables.unselect$.next()\n        this.appObservables.suggestions$.next([])\n    }\n    deleteSelected(){\n        if(this.uiState.isEditing)\n            return \n            \n        this.debugSingleton.debugOn && \n        this.debugSingleton.logWorkflowBuilder( {  \n            level : LogLevel.Info, \n            message: \"delete selected\", \n            object:{    connectionSelected: this.connectionSelected,\n                moduleSelected:this.moduleSelected,\n                modulesSelected:this.modulesSelected,\n                descriptionBoxSelected:this.descriptionBoxSelected\n            }\n        })\n        if(this.connectionSelected){\n            this.deleteConnection(this.connectionSelected)\n        }\n        if(this.moduleSelected){\n            this.deleteModule(this.moduleSelected)\n        }\n        if(this.modulesSelected && this.modulesSelected.length>0){\n            this.deleteModules(this.modulesSelected)\n        }\n        if(this.descriptionBoxSelected){\n            this.deleteDescriptionBox(this.descriptionBoxSelected)\n        }\n        this.appObservables.suggestions$.next([])\n    }\n\n    addDescriptionBox(descriptionBox : DescriptionBox){\n        \n        let project = addDescriptionBox(descriptionBox,this.project)\n        this.updateProject(project)\n        this.appObservables.descriptionsBoxesUpdated$.next(this.project.builderRendering.descriptionsBoxes)\n    }\n\n    selectDescriptionBox(descriptionBoxId){\n        this.unselect()\n        this.descriptionBoxSelected = this.project.builderRendering.descriptionsBoxes.find(\n            b => b.descriptionBoxId == descriptionBoxId\n        )\n        this.appObservables.descriptionsBoxesUpdated$.next(this.project.builderRendering.descriptionsBoxes)\n    \n    }\n    deleteDescriptionBox(descriptionBox){\n        if(descriptionBox==this.descriptionBoxSelected)\n            this.unselect()\n        let project = deleteDescriptionBox(descriptionBox,this.project)\n        this.updateProject(project)\n\n        this.appObservables.descriptionsBoxesUpdated$.next(this.project.builderRendering.descriptionsBoxes)\n    }\n\n    addGroup( moduleIds : Array<string> ){\n        let dBox = new DescriptionBox(uuidv4(),\"grouped module\",moduleIds,\"\",new DescriptionBoxProperties(undefined))\n        let config = new GroupModules[\"Configuration\"]({title:dBox.title})\n        let {project} = createLayer(dBox.title,dBox.modulesId.map(mid=>this.getModule(mid)), this.project,\n            this.activeLayerId, GroupModules,config, (_)=> this.project.workflow, this.environment)\n        this.updateProject(project)\n    }\n\n    addComponent( moduleIds : Array<string> ){\n        let dBox = new DescriptionBox(uuidv4(),\"component\",moduleIds,\"\",new DescriptionBoxProperties(undefined))\n        let config = new Component[\"Configuration\"]({title:dBox.title})\n        let {project} = createLayer(dBox.title,dBox.modulesId.map(mid=>this.getModule(mid)),this.project,\n            this.activeLayerId, Component, config, (_)=> this.project.workflow, this.environment)\n        this.updateProject(project)\n    }\n\n    publishComponent(component: Component.Module){\n        \n        let data = packageAssetComponent(component, this.project)\n        sessionStorage.setItem( component.moduleId, JSON.stringify(data))\n        window.open(\"/ui/assets-publish-ui?kind=flux-component&related_id=\"+ component.moduleId, '_blank');\n    }\n\n    projectSettings(){\n        window.open(\"/ui/assets-publish-ui?kind=flux-project&related_id=\"+this.projectId, '_blank');\n    }\n\n    updateDescriptionBox(descriptionBox){\n        this.unselect()\n        let project = updateDescriptionBox(descriptionBox,this.project)\n        this.updateProject(project)\n        this.appObservables.descriptionsBoxesUpdated$.next(this.project.builderRendering.descriptionsBoxes)    \n    }\n\n    setRenderingLayout( layout, asNewState = true ){\n        \n        let project = setRenderingLayout(layout, this.project)\n        this.updateProject(project, asNewState)\n    }\n\n    applyStyle(){        \n        this.appObservables.cssUpdated$.next(this.project.runnerRendering.style)\n    }\n\n    setRenderingStyle(style, asNewState = true){\n\n        let rootComponent = this.getLayer(this.rootLayerId) as Component.Module\n\n        let project = setRenderingStyle(rootComponent, style, this.project)\n        if(project != this.project)\n            this.updateProject(project, asNewState)\n    }\n    \n    addModuleRenderDiv(outerHtml){\n\n        let newLayout = this.project.runnerRendering.layout + outerHtml+ \"\\n\" \n        this.setRenderingLayout(newLayout)\n    }\n\n    updateProjectToIndexHistory(indexHistory, oldIndex){\n        \n        let updatesDone ={\n            modules: false,\n            modulesView: false,\n            connections: false,\n            activeLayer: false,\n            descriptionBox: false\n        }\n        this.indexHistory   = indexHistory   \n        this.project        = this.history[this.indexHistory]\n        let oldProject      = this.history[oldIndex]\n        \n        let delta           = workflowDelta(oldProject.workflow,this.project.workflow )\n        this.project.workflow.setup()\n\n        if( delta.modules.removedElements ){\n            delta.modules.removedElements.filter( m=> instanceOfSideEffects(m)).forEach( m => m.dispose() )\n        }\n        if( delta.modules.createdElements ){\n            plugBuilderViewsSignals( delta.modules.createdElements, this.builderViewsActions, \n                this.appBuildViewObservables.notification$ )\n            delta.modules.createdElements.filter( m => instanceOfSideEffects(m)).forEach( m => m.apply() )\n        }\n        if( !updatesDone.modules && (delta.modules.createdElements.length > 0 || delta.modules.removedElements.length > 0)  ){\n            this.appObservables.modulesUpdated$.next(delta.modules)\n            this.appBuildViewObservables.modulesViewUpdated$.next(this.getActiveModulesView())\n            updatesDone.modules = true\n            updatesDone.modulesView = true\n        }\n        if( !updatesDone.connections && (delta.connections.createdElements.length > 0 || delta.connections.removedElements.length > 0 )){\n            this.appObservables.connectionsUpdated$.next(this.project.workflow.connections)\n            updatesDone.connections = true\n        }\n        if( !updatesDone.modulesView && (this.project.builderRendering.modulesView  !== oldProject.builderRendering.modulesView)){\n            let delta = getDelta( oldProject.builderRendering.modulesView, this.project.builderRendering.modulesView)\n            let updates = [\n                ...delta.createdElements.filter( e => delta.removedElements.find( e2 => e2.moduleId == e.moduleId) == undefined ),\n                ...delta.createdElements.filter( e => delta.removedElements.find( e2 => e2.moduleId == e.moduleId) == undefined )\n            ]\n            updates.length > 0 \n                ? this.appBuildViewObservables.modulesViewUpdated$.next(this.getActiveModulesView())\n                : this.appObservables.connectionsUpdated$.next(this.project.workflow.connections)\n            if(updates.length > 0 )\n                updatesDone.modulesView = true\n        }            \n        if( !updatesDone.activeLayer && \n            (this.activeLayerId != this.rootLayerId ||\n             this.project.workflow.modules.find( m => m.moduleId == this.rootLayerId) != \n             oldProject.workflow.modules.find( m => m.moduleId == this.rootLayerId) )){\n\n            if(!updatesDone.modulesView)     \n                this.appBuildViewObservables.modulesViewUpdated$.next(this.getActiveModulesView())\n            this.appObservables.descriptionsBoxesUpdated$.next(this.project.builderRendering.descriptionsBoxes)      \n            this.appObservables.activeLayerUpdated$.next({fromLayerId:undefined, toLayerId:this.activeLayerId})\n            updatesDone.activeLayer = true\n        }\n        if( !updatesDone.descriptionBox && (this.project.builderRendering.descriptionsBoxes  !== oldProject.builderRendering.descriptionsBoxes)){           \n            this.appObservables.descriptionsBoxesUpdated$.next(this.project.builderRendering.descriptionsBoxes) \n            updatesDone.descriptionBox = true\n        } \n        subscribeConnections(this.allSubscriptions, delta.connections, this.project.workflow.modules, this.project.workflow.plugins )  \n        this.appExtensionsObservables.projectUpdated$.next(delta)\n\n        this.debugSingleton.debugOn &&\n        this.debugSingleton.logWorkflowBuilder( {  \n            level : LogLevel.Info, \n            message: \"updateProjectToIndexHistory\", \n            object:{ oldProject, delta, newProject:this.project, history: this.history , updatesDone}\n        })\n\n    }\n\n    undo(){\n        if(this.indexHistory==0)\n            return\n        this.debugSingleton.debugOn &&\n        this.debugSingleton.logWorkflowBuilder( {  \n            level : LogLevel.Info, \n            message: \"undo\", \n            object: {history: this.history}\n        })\n        this.updateProjectToIndexHistory( this.indexHistory- 1 , this.indexHistory )\n    }\n\n    redo(){\n\n        if(this.indexHistory==this.history.length - 1)\n            return\n        this.debugSingleton.debugOn && \n        this.debugSingleton.logWorkflowBuilder( {  \n                level : LogLevel.Info, \n                message: \"redo\", \n                object:{history: this.history}\n            })        \n        this.updateProjectToIndexHistory( this.indexHistory + 1 , this.indexHistory)\n    }\n\n    updateProject(newProject:Project, asNewState = true){\n        if(!newProject)\n            return\n        let oldIndex = this.indexHistory\n        if(!asNewState){\n            this.history = this.history.slice(0,-1)\n            this.indexHistory--\n        }\n        if(this.indexHistory === this.history.length - 1){\n            this.history.push(newProject)\n            this.indexHistory++\n        }\n        if(this.indexHistory < this.history.length - 1){\n\n            this.history = this.history.slice(0,this.indexHistory+1)\n            this.history.push(newProject)\n            this.indexHistory = this.history.length-1\n        }\n        this.debugSingleton.debugOn && \n        this.debugSingleton.logWorkflowBuilder( {  \n                level : LogLevel.Info, \n                message: \"updateProject\", \n                object:{    \n                    newProject: newProject,\n                    history: this.history\n                }\n            })\n        this.updateProjectToIndexHistory( this.indexHistory ,oldIndex )\n    }\n\n}","import { map, filter, take, tap, mergeMap } from 'rxjs/operators'\nimport { BehaviorSubject, interval } from 'rxjs'\n\n\nexport namespace CodeEditor{\n\n    let senderFluxChannel   =  new BroadcastChannel(\"out=>code-editor@BroadcastDrive\")\n    let recieverFluxChannel =  new BroadcastChannel(\"code-editor@BroadcastDrive=>out\")\n\n    export function mountBroadcastDrive( codeEditor, urlCodeEditor ) {\n\n        let ownerId = codeEditor.ownerId\n        let pingMessage = {\n            action:\"ping\", \n            channelResp :\"code-editor=>flux\", \n            ownerId: ownerId\n        }\n        let isConnected = false\n        let communicationEstablished$ = new BehaviorSubject<boolean>(false)\n        let interval$ = interval(500).pipe( take(1))\n        let mountedDrive = undefined\n\n        interval$.pipe( take(1) )\n        .subscribe( () => {\n            if(!isConnected){\n               window.open(urlCodeEditor, '_tab_code_editor')\n               interval(200).pipe(filter( () => !isConnected)).subscribe( () => senderFluxChannel.postMessage(pingMessage))\n            }\n        })\n\n        senderFluxChannel.postMessage(pingMessage)\n\n        communicationEstablished$.pipe(\n            filter( d => d == true ),\n            mergeMap( () =>  codeEditor.mount$.pipe( map( d => codeEditor.drive(d) ), tap( d => mountedDrive = d)))\n        ).subscribe( (drive:any) => {\n            let action =  { \n                action:\"mount\",  \n                ownerId: ownerId,\n                codeEditor: { drive: { name: drive.name, data: drive.data}, UI: codeEditor.UI }}\n            senderFluxChannel.postMessage(action)\n        })\n\n        let subs = codeEditor.unmount$.subscribe( () =>{\n            senderFluxChannel.postMessage({  action:\"unmount\",  ownerId: ownerId })\n            subs.unsubscribe()\n        })\n\n        recieverFluxChannel.onmessage = ({data}) => {\n\n            if( data.action == \"ping-ack\" && data.ownerId == ownerId ){\n                isConnected = true\n                communicationEstablished$.next(true)\n            }\n            if( data.action ==\"updateFile\" && data.ownerId == ownerId  ){\n                let ack = () => senderFluxChannel.postMessage({ action:\"updateFile-ack\", actionId: data.actionId, ownerId: ownerId })\n                mountedDrive.onFileUpdated( data.data, ack)\n            }\n        }\n    }\n}","import { AppStore } from './app-store'\n\nexport class BuilderStateAPI{\n\n    static appStore : AppStore \n\n    static initialize( appStore : AppStore){\n        BuilderStateAPI.appStore = appStore\n    }\n}\n\n","import { Project, LayerTree, Workflow, WorkflowSchema, ProjectSchema, RequirementsSchema } from '@youwol/flux-core';\n\n\n\nexport function serializeWorkflow(workflow: Workflow) : WorkflowSchema {\n\n    return {\n        modules:workflow.modules.map( mdle=>({\n            moduleId:mdle.moduleId,\n            factoryId:{module:mdle.Factory.id, pack:mdle.Factory.packId},\n            configuration: { title: mdle.configuration.title,\n                             description:mdle.configuration.description,\n                             data:Object.assign({},mdle.configuration.data) }\n        })),\n        connections:workflow.connections.map(c=>Object.assign( {\n            end:{\n                moduleId:c.end.moduleId,\n                slotId:c.end.slotId,\n            },\n            start:{\n                moduleId:c.start.moduleId,\n                slotId:c.start.slotId,\n            }},\n            c.adaptor ? \n            {  adaptor : {\n                adaptorId: c.adaptor.adaptorId,\n                mappingFunction: c.adaptor.toString()\n                }\n            }: {})\n        ),\n        plugins:workflow.plugins.map( plugin=>({\n            parentModuleId:plugin.parentModule.moduleId,\n            moduleId:plugin.moduleId,\n            factoryId:{module:plugin.Factory.id, pack:plugin.Factory.packId},\n            configuration: { title: plugin.configuration.title,\n                             description:plugin.configuration.description,\n                             data:Object.assign({},plugin.configuration.data) }\n        })),\n        rootLayerTree : undefined\n    }\n}\nexport function toProjectData(project:Project): ProjectSchema{\n\n    return {\n        name: project.name,\n        schemaVersion:\"1.0\",\n        description:project.description,\n        runnerRendering: project.runnerRendering,\n        builderRendering: {\n            descriptionsBoxes: project.builderRendering.descriptionsBoxes.map(d =>\n                ({ descriptionBoxId:d.descriptionBoxId,\n                    descriptionHtml: d.descriptionHtml,\n                    modulesId: d.modulesId,\n                    title:d.title,\n                    properties: {\n                        color:d.properties.color\n                    }\n                })\n                ),\n            modulesView:project.builderRendering.modulesView.map( m =>({\n                moduleId:m.moduleId,\n                xWorld: m.xWorld,\n                yWorld: m.yWorld\n            }) ),\n            connectionsView:project.builderRendering.connectionsView.map( c =>({\n                connectionId:c.connectionId,\n                wireless: c.wireless\n            }) )\n        },\n        requirements: project.requirements as RequirementsSchema,\n        workflow: serializeWorkflow(project.workflow)\n    }\n}\n\nexport function toProjectURI(projectData: ProjectSchema): string{\n\n    return encodeURIComponent(JSON.stringify(projectData))\n}\n\nexport function fromProjectURI(uri: string): ProjectSchema {\n\n    return JSON.parse(decodeURIComponent(uri))\n}\n","export * from './app-debug.environment'\nexport * from './factory-utils'\nexport * from './app-observables.service'\nexport * from './observables-plotters'\nexport * from './app-store'\nexport * from './app-store-connections'\nexport * from './app-store-description-box'\nexport * from './app-store-layer'\nexport * from './app-store-modules'\nexport * from './app-store-modules-group'\nexport * from './app-store-plugins'\nexport * from './app-store-runner-rendering'\nexport * from './code-editor-broadcast'\nexport * from './utils'\nexport * from './extension'\n","import { Subject, ReplaySubject } from \"rxjs\";\r\nimport { LogLevel, AppDebugEnvironment } from \"./app-debug.environment\";\r\nimport { Connection, ModuleFlux,ModuleView } from '@youwol/flux-core';\r\n\r\n\r\nexport class AppBuildViewObservables{\r\n\r\n    private static instance : AppBuildViewObservables = undefined\r\n    static getInstance() {\r\n        if(!AppBuildViewObservables.instance)\r\n            AppBuildViewObservables.instance =  new AppBuildViewObservables()\r\n        return AppBuildViewObservables.instance\r\n    }\r\n\r\n\r\n    debugSingleton = AppDebugEnvironment.getInstance()\r\n\r\n    connectionsView$  = new Subject<Array<Connection>>()\r\n    modulesViewUpdated$ = new Subject<Array<ModuleView>>()\r\n    moduleViewSelected$ = new Subject<any>()\r\n    \r\n    modulesDrawn$ = new ReplaySubject<any>(1)\r\n    connectionsDrawn$ = new ReplaySubject<any>(1)\r\n    descriptionsBoxesDrawn$ = new ReplaySubject<any>(1)\r\n    activeLayerDrawn$ = new ReplaySubject<any>(1)\r\n    modulesViewCompleted$ = new Subject<Array<ModuleFlux>>()\r\n    plugsViewCompleted$ = new Subject<Array<ModuleFlux>>()\r\n    connectionsViewCompleted$ = new Subject<Array<ModuleFlux>>()\r\n\r\n    \r\n    moduleEvent$ = new Subject<any>()\r\n\r\n    moduleSelected$ = new Subject<any>()\r\n    \r\n    plugInputClicked$ = new Subject<any>()\r\n    plugOutputClicked$ = new Subject<any>()\r\n    mouseMoved$ = new Subject<any>()\r\n    notification$ = new ReplaySubject<any>(1)\r\n\r\n    constructor(){\r\n\r\n        if(this.debugSingleton.debugOn){\r\n            [\"modulesViewUpdated$\",\"moduleViewSelected$\",\"moduleSelected$\",\"moduleEvent$\",\"modulesDrawn$\",\r\n            \"descriptionsBoxesDrawn$\",\"activeLayerDrawn$\",\"notification$\", \"connectionsDrawn$\" ]\r\n            .forEach( id => this[id].subscribe( (...args)    => this.log(id, ...args) )  )\r\n        }\r\n    }\r\n\r\n    log(name , ...args){\r\n\r\n        this.debugSingleton.debugOn && \r\n        this.debugSingleton.logWorkflowView$( {  \r\n            level : LogLevel.Info, \r\n            message:  name, \r\n            object:{ args:args \r\n            }})\r\n    }\r\n}\r\n","import { Workflow } from '@youwol/flux-core';\n\ndeclare var _ : any\n\nexport function getDelta<T>(oldCollection : Array<T>, newCollection : Array<T>) : {createdElements: Array<T>,removedElements: Array<T>}{\n\n    let createdElements = newCollection.filter(x => !oldCollection.includes(x));\n    let removedElements = oldCollection.filter(x => !newCollection.includes(x));\n    return { createdElements,removedElements}\n}\n    \n\n\nexport function workflowDelta(oldWf:Workflow,newWf:Workflow){\n    \n    let diffsConnection = {createdElements:[], removedElements:[]}\n    let diffModules = {createdElements:[], removedElements:[]}\n    if( newWf.connections  !== oldWf.connections){        \n        let diffs = getDelta( oldWf.connections, newWf.connections)\n        diffsConnection.createdElements.push(...diffs.createdElements)\n        diffsConnection.removedElements.push(...diffs.removedElements)\n    }\n  \n    if( newWf.modules  !== oldWf.modules){\n        let diffs = getDelta( oldWf.modules, newWf.modules )\n        diffModules.createdElements.push(...diffs.createdElements)\n        diffModules.removedElements.push(...diffs.removedElements)\n\n        let createdMdlesId =  diffs.createdElements.map(m=>m.moduleId)\n        let deletedMdlesId =  diffs.removedElements.map(m=>m.moduleId)\n        \n        diffsConnection.createdElements.push( ...newWf.connections.filter( c =>  createdMdlesId.includes(c.end.moduleId ) ), \n                                              ...newWf.connections.filter( c =>  createdMdlesId.includes(c.start.moduleId ) ) )\n\n        diffsConnection.removedElements.push( ...oldWf.connections.filter( c =>  deletedMdlesId.includes(c.start.moduleId ) || deletedMdlesId.includes(c.end.moduleId )  ) )\n    }\n    if( newWf.plugins  !== oldWf.plugins){\n        \n        let diffs = getDelta( oldWf.plugins, newWf.plugins )\n        diffModules.createdElements.push(...diffs.createdElements)\n        diffModules.removedElements.push(...diffs.removedElements)\n\n        let createdMdlesId =  diffs.createdElements.map(m=>m.moduleId)\n        let deletedMdlesId =  diffs.removedElements.map(m=>m.moduleId)\n        \n        diffsConnection.createdElements.push( ...newWf.connections.filter( c =>  createdMdlesId.includes(c.end.moduleId ) ), \n                                              ...newWf.connections.filter( c =>  createdMdlesId.includes(c.start.moduleId ) ) )\n\n        diffsConnection.removedElements.push( ...oldWf.connections.filter( c =>  deletedMdlesId.includes(c.start.moduleId ) || deletedMdlesId.includes(c.end.moduleId )  ) )\n    }\n    diffsConnection.createdElements = Array.from(new Set(diffsConnection.createdElements))\n    diffsConnection.removedElements = Array.from(new Set(diffsConnection.removedElements))\n\n    diffModules.createdElements = Array.from(new Set(diffModules.createdElements))\n    diffModules.removedElements = Array.from(new Set(diffModules.removedElements))\n    return { connections: diffsConnection, modules: diffModules }  \n  }","import { Component, PluginFlux, Workflow, Project, GroupModules, ModuleFlux} from '@youwol/flux-core';\nimport { filter } from 'rxjs/operators';\nimport { serializeWorkflow, toProjectData } from './factory-utils';\n\n\nexport function uuidv4() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n      var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n      return v.toString(16);\n    });\n  }\n\n  function css(el, doc) {\n    var sheets = doc.styleSheets, ret = [];\n    el.matches = el.matches || el.webkitMatchesSelector || el.mozMatchesSelector \n        || el.msMatchesSelector || el.oMatchesSelector;\n    for (var i in sheets) {\n        var rules = sheets[i].rules || sheets[i].cssRules;\n        for (var r in rules) {\n            if (el.matches(rules[r][\"selectorText\"])) {\n                ret.push(rules[r].cssText);\n            }\n        }\n    }\n    return ret;\n}\n\n  export function packageAssetComponent(component: Component.Module | GroupModules.Module, project: Project) {\n    /*\n    let allModules = [component, ...component.getAllChildren()]\n    let modules = allModules.filter( m=>!(m instanceof PluginFlux))\n    let moduleIds = modules.map( m=>m.moduleId)\n    let plugins = project.workflow.plugins.filter( m=>moduleIds.includes(m.parentModule.moduleId))\n\n    let connections = component.getConnections()\n    let workflow = new Workflow({modules,connections:connections.internals, plugins})\n\n    let fluxPacks = new Set(allModules.map(m => m.Factory.packId))\n    let builderRendering = {\n        modulesView: moduleIds.map( mdleId => project.builderRendering.modulesView.find( mView =>mView.moduleId==mdleId)),\n        connectionsView: connections.internals.map( cId => project.builderRendering.connectionsView.find( c =>c.connectionId==cId))\n                                        .filter( c=>c)\n    }\n    \n    let contentHtml = document.createElement('div')\n    contentHtml.innerHTML = project.runnerRendering.layout\n    let componentHtml = contentHtml.querySelector(\"#\"+component.moduleId)\n    if (!componentHtml )\n      return {\n        componentId: component.moduleId,\n        workflow:serializeWorkflow(workflow),\n        builderRendering, \n        fluxPacks: new Array(...fluxPacks), \n      }\n\n    let innerHtml = componentHtml ? componentHtml.outerHTML : \"\"\n\n    let root = window[\"youwol\"].renderView.document.querySelector(\"#\"+component.moduleId) \n    var all = root.getElementsByTagName('*');\n    let divs = [root]\n    for (var i = -1, l = all.length; ++i < l;) {\n      divs.push(all[i]);\n    }\n    \n    let cssItems = new Set(divs\n    .filter(el=>el.matches)\n    .map( el => css(el, window[\"youwol\"].renderView.document))\n    .reduce( (acc,e)=> acc.concat(e),[])\n    .filter( e => e[0]==\"#\" || e[0]==\".\"))\n    \n    return { \n        componentId: component.moduleId,\n        workflow:serializeWorkflow(workflow),\n        builderRendering, \n        fluxPacks: new Array(...fluxPacks), \n        runnerRendering:{layout:innerHtml,style:[...cssItems].reduce( (acc,e)=>acc+\" \"+e,\"\")}\n        }\n        */\n       return undefined\n  }\n  \n\n  export function packageAssetProject(project: Project){\n\n    let publishRequest = {\n      asset:{\n        name: project.name,\n        description: project.description\n      },\n      project:toProjectData(project)\n      }\n    return publishRequest\n  }\n\n\n  export function plugBuilderViewsSignals(modules: Array<ModuleFlux>, actions, redirections$){\n\n      modules.forEach( mdle => {\n\n          // This should go somewhere else above at some point (when multiple FluxAppstore data will be needed) \n          if(!mdle.Factory.consumersData.FluxAppstore)\n            mdle.Factory.consumersData.FluxAppstore = {notifiersPluged: false}\n\n          // notifier is static, we subscribe only one time to it\n          if(mdle.Factory.BuilderView.notifier$ && !mdle.Factory.consumersData.FluxAppstore.notifiersPluged){\n\n              mdle.Factory.BuilderView.notifier$.pipe( \n                  filter((event:any)=>event.type==\"configurationUpdated\"))\n              .subscribe( (event)=> {\n                  actions[event.type] && actions[event.type](event.data)\n              })\n              mdle.Factory.BuilderView.notifier$.subscribe(d => redirections$.next(d)) \n              mdle.Factory.consumersData.FluxAppstore.notifiersPluged = true\n          }\n      })\n  }","\nexport function commandsBuilder() {\n\n    function changeActiveBttnsState(selection : any, i : any = undefined) {\n        /* when trigering command programatically, the button associated is not toggled, this is\n        the purpose of this method. It is likely that something better exist in grapesjs */\n        let elements = document.querySelectorAll(selection)\n        let selectionClasses= [\"gjs-pn-active\",\"gjs-four-color\"]\n        elements.forEach( e => e.classList.remove(...selectionClasses))\n        if(i != undefined)\n            elements[i].classList.add(...selectionClasses)\n    }\n    \n    return [\n        ['show-attributes', {\n            run(editor : any, sender : any) {\n                const lmEl = document.getElementById(\"attributes-panel\")\n                changeActiveBttnsState(\"#panel__builder-managers-actions .gjs-pn-btn\", 0 )\n                if (lmEl)\n                    lmEl.classList.remove(\"d-none\") \n            },\n            stop(editor : any, sender : any) {\n                const lmEl = document.getElementById(\"attributes-panel\")                \n                changeActiveBttnsState(\"#panel__builder-managers-actions .gjs-pn-btn\" )\n\n                if (lmEl)\n                    lmEl.classList.add(\"d-none\") \n            },\n        }],/*\n        ['show-suggestions', {\n            run(editor : any, sender : any) {\n                const lmEl = document.getElementById(\"suggestions-panel\")\n                changeActiveBttnsState(\"#panel__builder-managers-actions .gjs-pn-btn\", 3 )\n                if (lmEl)\n                    lmEl.classList.remove(\"d-none\") \n            },\n            stop(editor : any, sender : any) {\n                const lmEl = document.getElementById(\"suggestions-panel\")                \n                changeActiveBttnsState(\"#panel__builder-managers-actions .gjs-pn-btn\" )\n\n                if (lmEl)\n                    lmEl.classList.add(\"d-none\") \n            },\n        }],\n        ['show-extensions', {\n            run(editor : any, sender : any) {\n                const lmEl = document.getElementById(\"extensions-panel\")\n                changeActiveBttnsState(\"#panel__builder-managers-actions .gjs-pn-btn\", 4 )\n                if (lmEl)\n                    lmEl.classList.remove(\"d-none\") \n            },\n            stop(editor : any, sender : any) {\n                changeActiveBttnsState(\"#panel__builder-managers-actions .gjs-pn-btn\" )\n                const lmEl = document.getElementById(\"extensions-panel\")\n                if (lmEl)\n                    lmEl.classList.add(\"d-none\") \n            },\n        }],*/\n        ['show-hide-panels', {\n            run(editor : any, sender : any) {\n                \n                document.getElementById(\"panels-container-builder\").classList.add(\"collapsed\")\n                let panel = document.getElementById(\"panel__right_builder\")\n                panel.classList.add(\"collapsed\")\n                panel.querySelectorAll(\".flex-align-switch\").forEach( (e:HTMLElement) => e.style.flexDirection = \"column\" )\n                let buttons = panel.querySelector(\".buttons-toolbox>.gjs-pn-buttons\") as HTMLDivElement\n                buttons.style.flexDirection = \"column\"\n            },\n            stop(editor : any, sender : any) {\n                \n                document.getElementById(\"panels-container-builder\").classList.remove(\"collapsed\")\n                let panel = document.getElementById(\"panel__right_builder\")\n                panel.classList.remove(\"collapsed\")\n                panel.querySelectorAll(\".flex-align-switch\").forEach( (e:HTMLElement) => e.style.flexDirection = \"row\" )\n                panel.querySelectorAll(\".buttons-toolbox\")\n                let buttons = panel.querySelector(\".buttons-toolbox>.gjs-pn-buttons\") as HTMLDivElement\n                buttons.style.flexDirection = \"row\"\n                \n            },\n        }]\n    ]\n}\n","import { HTMLReactiveElement } from \"@youwol/flux-core\";\nimport { ImmutableTree } from \"@youwol/fv-tree\"\nimport { ContextMenu } from \"@youwol/fv-context-menu\"\nimport { fromEvent, Observable } from \"rxjs\";\nimport { tap } from \"rxjs/operators\";\nimport { AppStore } from '../builder-state/index';\nimport { DrawingArea } from \"@youwol/flux-svg-plots\";\nimport { AddPluginsNode, ContextTreeNode, NewModulesNode, \n    ContextRootNode, JournalsNode, DocumentationNode } from \"./nodes\";\n\n\n\nlet ALL_ACTIONS = {\n    newModules: {\n        createNode: ( state : AppStore) => new NewModulesNode(),\n        applicable: ( state: AppStore) => state.getModulesSelected().length >= 0\n    },\n    addPlugins: {\n        createNode: () => new AddPluginsNode(),\n        applicable: ( state: AppStore) => state.getModulesSelected().length == 1\n    },\n    journals: {\n        createNode: (state : AppStore) => new JournalsNode(),\n        applicable: ( state: AppStore) => {\n            return state.getModulesSelected().length == 1  &&\n            state.getModuleSelected().journals.length > 0 \n        }\n    },\n    documentation: {\n        createNode: (state : AppStore) => new DocumentationNode(state),\n        applicable: ( state: AppStore) => {\n            if(state.getModulesSelected().length !=1 )\n                return false\n            let mdle = state.getModuleSelected()\n            let resources = mdle.Factory.resources \n            return resources && Object.entries(resources).length > 0\n        }\n    }\n}\nexport class ContextMenuState extends ContextMenu.State{\n\n    public readonly htmlElement : HTMLDivElement\n\n    constructor(\n        public readonly appState : AppStore, \n        public readonly drawingArea: DrawingArea\n        ){\n        super( \n            fromEvent(drawingArea.parentDiv,'contextmenu').pipe(\n            tap( (ev:Event)=> ev.preventDefault()) \n        ) as Observable<MouseEvent>\n        )\n        this.htmlElement = drawingArea.parentDiv\n    }\n\n    dispatch(ev: MouseEvent){\n        \n        let children = Object.values(ALL_ACTIONS)\n        .filter( action => action.applicable(this.appState))\n        .map( action => action.createNode(this.appState))\n\n        let root = new ContextRootNode({children})\n        let state = new ContextTreeState(root)\n        \n        let view = new ImmutableTree.View(\n            {\n                state, \n                headerView,\n                class: \"fv-bg-background fv-text-primary p-2 rounded\"\n            }as any)\n        state.selectedNode$.next(root)\n        state.selectedNode$.subscribe( (node) => node.execute(this, {event:ev}))\n        return view\n    }\n\n}\n\n\nclass ContextTreeState extends ImmutableTree.State<ContextTreeNode>{\n\n    constructor(root:ContextTreeNode ){\n        super({rootNode:root, expandedNodes:  [root.id]})\n    }\n}\n\nfunction headerView(state:ContextTreeState, node:ContextTreeNode) : HTMLReactiveElement{\n\n    return {\n        class: 'd-flex w-100 align-items-baseline fv-pointer fv-hover-bg-background-alt px-1',\n        children: [\n            { tag: 'i', class: node.faIcon },\n            { tag: 'span', class: 'mx-2 w-100', innerText: node.name, style:{'user-select': 'none'}}\n        ]\n    }\n}\n","export * from './context-menu'\nexport * from './nodes'","import { ImmutableTree } from '@youwol/fv-tree'\nimport { AppStore } from '../builder-state'\nimport { AssetsExplorerView } from '../views/assets-explorer.view'\nimport { ImportModulesView } from '../views/import-modules.view'\nimport { JournalsView } from '../views/journals.view'\nimport { ContextMenuState } from \"./context-menu\"\n\n\nexport class ContextTreeNode extends ImmutableTree.Node{\n\n    public readonly faIcon\n    public readonly name\n\n    constructor({id, children, name, faIcon} : {id:string, children: Array<ContextTreeNode>, name:string, faIcon:string}) {\n        super({id,children})\n        this.name = name\n        this.faIcon = faIcon\n    }\n\n    execute(state: ContextMenuState, {event}:{event: MouseEvent}){}\n}\n\nexport class ContextRootNode extends ContextTreeNode{\n\n    constructor({children} : {children: Array<ContextTreeNode>}) {\n        super({id:'root',children, name:'menu list', faIcon:''})\n    }\n\n}\n\nexport class NewModulesNode extends ContextTreeNode{\n\n    constructor() {\n        super({id:'new-modules',children:undefined, name:'new module(s)', faIcon:'fas fa-microchip'})\n    }\n    \n    execute(\n        state: ContextMenuState, \n        {event} : {event: MouseEvent}\n        ){ \n\n        let worldCoordinates = state.drawingArea.invert(event.clientX, event.clientY)  \n        ImportModulesView.popupModal(\n            state.appState,\n            (nodes: Array<AssetsExplorerView.ModuleItemNode>) => {\n                let libraries = nodes.map( node => node.library )\n                let fluxPacks = nodes.flatMap( node => node.fluxPacks.map( fluxPack => fluxPack))\n                state.appState.addLibraries$(libraries, fluxPacks).subscribe( () => {\n                    nodes.forEach( node => state.appState.addModule(node.factory, worldCoordinates ) ) \n                })\n            }\n        )\n    }\n\n}\n\nexport class AddPluginsNode extends ContextTreeNode{\n\n    constructor() {\n        super({id:'add-plugins',children:undefined, name:'add plugin(s)', faIcon:'fas fa-microchip'})\n    }\n\n    execute(state: ContextMenuState, {event}:{event: MouseEvent}){ \n\n        ImportModulesView.popupModal(\n            state.appState,\n            (nodes: Array<AssetsExplorerView.ModuleItemNode>) => {\n                let parentModule = state.appState.getModuleSelected()\n                let libraries = nodes.map( node => node.library )\n                let fluxPacks = nodes.flatMap( node => node.fluxPacks.map( fluxPack => fluxPack))\n                state.appState.addLibraries$(libraries, fluxPacks).subscribe( () => {\n                    nodes.forEach( node =>  state.appState.addPlugin(node.factory, parentModule ))\n                })\n            })\n    }\n}\n\nexport class JournalsNode extends ContextTreeNode{\n\n    constructor() {\n        super({id:'journals',children:undefined, name:'journals', faIcon:'fas fa-newspaper'})\n    }\n\n    execute(state: ContextMenuState){\n        let module = state.appState.getModuleSelected()\n        JournalsView.popupModal({module})\n    }\n}\n\nexport class DocumentationNode extends ContextTreeNode{\n\n    static createChildren(appStore: AppStore){\n        let resources = appStore.getModuleSelected().Factory.resources\n        return Object.entries(resources).map(([name, url]) => {\n            return new ResourceNode({name, url})\n        })\n    }\n    constructor(appStore: AppStore) {\n        super({id:'documentation',children:DocumentationNode.createChildren(appStore), name:'documentation', faIcon:'fas fa-book'})\n    }\n}\n\nexport class ResourceNode extends ContextTreeNode{\n\n    public readonly url: string\n    constructor({name, url}) {\n        super({id:name,children:undefined, name:name, faIcon:'fas fa-book'})\n        this.url = url\n\n    }\n\n    execute(state: ContextMenuState){\n        window.open( this.url,'_blank')\n    }\n}","\r\n\r\nexport function getConnections$(connectionsUpdated$ ){\r\n    /*let maping = ( c : Connection) => ({\r\n        //data: { input : c.end, output: c.start},\r\n        data: c,\r\n        classes : [\"connection\"], id: c.end.moduleId+\"-\"+c.start.moduleId,\r\n        selector1 : \"g#\"+ c.end.moduleId + \"-\"+c.end.slotId+\".plug.input.\"+c.end.moduleId+\" circle\",\r\n        x1:  (element) : number => Number(element.getAttribute(\"x1\")),\r\n        y1:  (element) : number => Number(element.getAttribute(\"y1\")),\r\n        selector2 : \"g#\"+ c.start.moduleId + \"-\"+c.start.slotId+\".plug.output.\"+c.start.moduleId+\" circle\",\r\n        x2: (element) : number=> Number(element.getAttribute(\"x2\")),\r\n        y2: (element)  : number=> Number(element.getAttribute(\"y2\")),\r\n    }) \r\n\r\n    return connectionsUpdated$.pipe(\r\n        operators.map( (connections:Array<Connection>) =>\r\n            connections.reduce( (acc: any, c:Connection) => acc.concat( maping(c) ),[] ))            \r\n    )*/\r\n}\r\nexport function convert(bbox,matrix,drawingArea) {\r\n    var offset = document.getElementById(drawingArea.svgCanvas.attr(\"id\")).getBoundingClientRect();\r\n    let transform = drawingArea.overallTranform\r\n    let a = {\r\n      xmin: ((matrix.a * bbox.x) + (matrix.c * bbox.y) + matrix.e - offset.left \r\n      - transform.translateX)/transform.scale,\r\n      ymin: ((matrix.b * bbox.x) + (matrix.d * bbox.y) + matrix.f - offset.top\r\n      - transform.translateY)/transform.scale,\r\n      xmax: ((matrix.a * (bbox.x+bbox.width)) + (matrix.c * (bbox.y+bbox.height)) + matrix.e - offset.left\r\n      - transform.translateX)/transform.scale,\r\n      ymax: ((matrix.b * (bbox.x+bbox.width)) + (matrix.d * (bbox.y+bbox.height)) + matrix.f - offset.top \r\n      - transform.translateY)/transform.scale\r\n    }\r\n    return a\r\n}\r\n\r\nexport function getBoundingBox(modulesId:Array<String>,margin:number,drawingArea ){\r\n        \r\n    let bbox= modulesId\r\n    .map( (mid: string) => document.getElementById(mid))\r\n    .filter(e => e)\r\n    .map( (e:any) => convert(e.getBBox(),e.getScreenCTM(),drawingArea) )\r\n    .reduce( (acc,e)=>({\r\n        xmin:Math.min(acc.xmin,e.xmin),xmax:Math.max(acc.xmax,e.xmax),\r\n        ymin:Math.min(acc.ymin,e.ymin),ymax:Math.max(acc.ymax,e.ymax)\r\n    }),  {xmin:1e6,xmax:-1e6,ymin:1e6,ymax:1e-6})\r\n    \r\n    return {x:bbox.xmin-margin, \r\n            y:bbox.ymin-margin,\r\n            width:bbox.xmax-bbox.xmin+2*margin,\r\n            height:bbox.ymax-bbox.ymin+2*margin}\r\n}","\nexport * from './context-menu/index'\nexport * from './views/index'\nexport * from './commands'\nexport * from './drawing-utils'\nexport * from './panel-module-attributes'\nexport * from './panel-suggestion'\nexport * from './panels'\nexport * from './utils.view'","\nimport { merge } from 'rxjs';\nimport { ModuleFlux, Connection } from '@youwol/flux-core';\nimport { render, VirtualDOM } from '@youwol/flux-view'\n\nimport { AppObservables, AppStore } from './builder-state/index';\nimport { ModuleSettingsState, ModuleSettingsView } from './views/module-settings.view';\nimport { ConnectionSettingsState, ConnectionSettingsView } from './views/connection-settings.view';\nimport { Module } from 'node:module';\n\n\nfunction moduleControls(mdle: ModuleFlux, appStore: AppStore): VirtualDOM {\n\n    let state = new ModuleSettingsState(mdle, appStore)\n    return new ModuleSettingsView(state)\n}\n\nfunction connectionControls(connection: Connection, appStore: AppStore): VirtualDOM {\n\n    let state = new ConnectionSettingsState(connection, appStore)\n    return new ConnectionSettingsView(state)\n}\n\nexport function createAttributesPanel(appStore: AppStore, appObservables: AppObservables) {\n\n    merge(appObservables.moduleSelected$, appObservables.connectionSelected$).subscribe(\n        (d: ModuleFlux | Connection) => {\n            \n            let virtualDOM = {\n                id: \"attribute-panel\",\n                class: \"panel-builder text-left w-100 h-100 position-relative d-flex flex-column fv-text-primary\",\n                style: { fontSize: \"small\", paddingTop: \"0px\" },\n                children:[\n                    d instanceof ModuleFlux \n                    ? moduleControls(d as ModuleFlux, appStore) \n                    : connectionControls(d as Connection, appStore)\n                ] \n            }\n            document.getElementById(\"panels-container-builder\").innerHTML = \"\"\n            let panelDiv = document.getElementById(\"panels-container-builder\") as HTMLDivElement\n            /*let virtualDOM = d.moduleId ?\n                moduleControls(d as ModuleFlux, appStore) :\n                connectionControls(d as Connection, appStore)*/\n            panelDiv.appendChild(render(virtualDOM))\n        }\n    )\n    appObservables.unselect$.subscribe((_) => {\n        document.getElementById(\"panels-container-builder\").innerHTML = \"\"\n    })\n}\n","import { DrawingArea } from '@youwol/flux-svg-plots';\nimport { Connection } from '@youwol/flux-core';\nimport { AppStore } from './builder-state/index';\n\ndeclare var _ : any\n\nexport function createPart(title: string, classes) {\n\n    let block = document.createElement(\"div\") as HTMLDivElement\n    let titleDiv = document.createElement(\"div\") as HTMLDivElement\n    let icon = document.createElement(\"i\") as HTMLDivElement\n    let blockC = document.createElement(\"div\") as HTMLDivElement\n\n    blockC.classList.add(\"gjs-blocks-c\", \"d-none\", ...classes)\n    titleDiv.classList.add(\"gjs-title\")\n    block.classList.add(\"gjs-block-category\", \"gjs-open\")\n    icon.classList.add(\"gjs-caret-icon\", \"fa\", \"fa-caret-right\")\n\n    titleDiv.onclick = (event) => {\n        \n        let elem = titleDiv.firstChild as Element\n        if (blockC.classList.contains(\"d-flex\")) {\n            blockC.classList.remove(\"d-flex\")\n            blockC.classList.add(\"d-none\")\n            elem.classList.remove(\"fa-caret-down\")\n            elem.classList.add(\"fa-caret-right\")\n        }\n        else {\n            blockC.classList.remove(\"d-none\")\n            blockC.classList.add(\"d-flex\")\n            elem.classList.remove(\"fa-caret-right\")\n            elem.classList.add(\"fa-caret-down\")\n            scaleSvgIcons(blockC)\n        }\n    }\n    titleDiv.appendChild(icon)\n    titleDiv.innerHTML += title\n    block.appendChild(titleDiv)\n    block.appendChild(blockC)\n    return block\n\n}\nfunction createModuleDiv( moduleFactory, drawingArea) {\n\n    let moduleDiv = document.createElement(\"div\") as HTMLDivElement\n    moduleDiv.classList.add(\"gjs-block\", \"gjs-one-bg\", \"gjs-four-color-h\")\n    let labelDiv = document.createElement(\"div\") as HTMLDivElement\n    labelDiv.classList.add(\"gjs-block-label\")\n    labelDiv.innerText = moduleFactory.displayName\n\n    let svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n    svg.setAttribute(\"width\", \"100px\");\n    svg.setAttribute(\"height\", \"70px\");\n    let item = new moduleFactory.ModuleRendererBuild().icon()\n\n    const g = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\")\n    g.id = moduleFactory.id\n    g.classList.add(\"group-target\")\n    g.innerHTML = item.content\n    g.style.stroke = \"currentColor\"\n    svg.appendChild(g)\n    moduleDiv.appendChild(labelDiv)\n    moduleDiv.append(svg)\n    return moduleDiv\n}\n\nfunction addDragingAbility(mdleFromId : string, direction, moduleDiv, moduleFactory, packId, drawingArea , appStore : AppStore){\n\n    moduleDiv.draggable = true\n\n    moduleDiv.ondragstart = (ev) => {\n        ev.dataTransfer.setData(\"text/plain\", moduleFactory.id);\n        ev.dataTransfer.dropEffect = \"copy\";\n    }\n    moduleDiv.ondragend = (ev) => {\n\n        let mdleFrom = appStore.getModule(mdleFromId)\n        let scale    = drawingArea.overallTranform[\"scale\"]\n        let x0       = (ev.x - drawingArea.overallTranform.translateX) / scale\n        let y0       = (ev.y - 50 - drawingArea.overallTranform.translateY) / scale\n        let x        = drawingArea.hScale.invert(x0)\n        let y        = drawingArea.vScale.invert(y0)\n        let m1       = appStore.addModule( moduleFactory, [x, y])\n\n        if( direction==\"down\" &&  m1.inputSlots.length==1 && mdleFrom.outputSlots.length==1){\n            let c = new Connection( mdleFrom.outputSlots[0], m1.inputSlots[0])\n            appStore.addConnection(c)\n        }\n        if( direction==\"up\" &&  mdleFrom.inputSlots.length==1 && m1.outputSlots.length==1){\n            let c = new Connection( m1.outputSlots[0] , mdleFrom.inputSlots[0])\n            appStore.addConnection(c)\n        }\n\n        appStore.selectModule(m1.moduleId)\n    }\n\n}\nexport function createSuggestionsPanel(appStore: AppStore, drawingArea: DrawingArea, suggestions$) {\n\n    suggestions$.subscribe(([mdleFrom,associations]) => {\n\n        let modulesFactory = appStore.getModulesFactory()\n        let container = document.getElementById(\"suggestions-panel\")\n        container.innerHTML = \"\"\n\n        var fragment = document.createDocumentFragment();\n        let connectionDown = createPart(\"down stream\", [])\n        let connectionUp = createPart(\"up stream\", [])\n\n        fragment.appendChild(connectionDown)\n        fragment.appendChild(connectionUp)\n        container.appendChild(fragment)\n        let startDict = associations.starts.reduce( (acc,start)=>_.merge(acc,{[start.factoryId]:start}) , {})\n        Object.values(startDict).forEach((start:any) => {\n            let moduleDiv = createModuleDiv(modulesFactory[start.factoryId],drawingArea) \n            addDragingAbility(mdleFrom.moduleId,\"up\", moduleDiv,modulesFactory[start.factoryId],start.packId, drawingArea,appStore)\n            connectionUp.children[1].appendChild(moduleDiv)\n        })\n\n        let endDict = associations.ends.reduce( (acc,end)=>_.merge(acc,{[end.factoryId]:end}) , {})\n        Object.values(endDict).forEach((end:any) => {\n            let moduleDiv = createModuleDiv(modulesFactory[end.factoryId],drawingArea) \n            addDragingAbility(mdleFrom.moduleId, \"down\", moduleDiv,modulesFactory[end.factoryId],end.packId,drawingArea,appStore)\n            connectionDown.children[1].appendChild(moduleDiv)\n        })\n    })\n    var container = document.createDocumentFragment();\n    return container    \n}\n\nfunction scaleSvgIcons( dom: HTMLDivElement) {\n\n    dom.querySelectorAll(\".group-target\").forEach((g: HTMLElement) => {\n        if (g.style.transform)\n            return\n        let parentBRect = g.parentElement.getBoundingClientRect()\n        let bRect = g.getBoundingClientRect()\n        let ty = parentBRect.top - bRect.top\n        let tx = parentBRect.left - bRect.left\n        let scale = Math.min(parentBRect.width / bRect.width, parentBRect.height / bRect.height)\n        g.style.transform = `translate(${parentBRect.width / 4}px,${parentBRect.height / 4}px) scale(${0.5 * scale}) translate(${tx}px,${ty}px)`;\n    })\n}\n","export function getBuilderPanels(): Array<any> {\n\n    return [{\n            id: 'app-builder-extensions',\n            el: '#extensions-panel'\n        }, {\n            id: 'app-builder-modules',\n            el: '#modules-panel',\n            buttons: []\n        },{\n            id: 'app-builder-components',\n            el: '#components-panel',\n            buttons: []\n        },{\n            id: 'app-builder-attributes',\n            el: '#attributes-panel',\n            buttons: []\n        },\n        {\n            id: 'builder-managers-actions',\n            el: '#panel__builder-managers-actions',\n            buttons: [\n                {\n                    id: 'show-attributes',\n                    active: false,\n                    label: '<i class=\"fas fa-tools\"></i>',\n                    command: 'show-attributes',\n                },\n                /*\n                {\n                    id: 'show-suggestions',\n                    active: false,\n                    label: '<i class=\"fas fa-lightbulb\"></i>',\n                    command: 'show-suggestions',\n                },\n                {\n                    id: 'show-extensions',\n                    active: false,\n                    label: '<i class=\"fas fa-puzzle-piece\"></i>',\n                    command: 'show-extensions',\n                }\n            */\n           ]\n        },\n        {\n            id: 'builder-show-actions',\n            el: '#panel__builder-show-actions',\n            buttons: [\n                {\n                    id: 'show-hide-panels',\n                    active: false,\n                    label: '<i class=\"fas fa-eye\"></i>',\n                    command: 'show-hide-panels',\n                }\n            ]\n        }]\n}","\n\n\nexport function grapesButton({onclick, title, classes}){\n\n    return {\n        onclick,\n        children:[\n            {\n                tag: 'span',\n                class: 'gjs-pn-btn gjs-pn-active fv-text-focus d-flex align-items-center ',\n                children:[\n                    {\n                        tag: 'i',\n                        class: classes+ \" px-1\"\n                    },\n                    {   tag: 'div',\n                        style:{'font-weight':'lighter', 'letter-spacing':'1px'},\n                        class: 'px-1',\n                        innerText: title\n                    }]\n            }\n        ]\n    }\n}","import { Connection, Contract, IExpectation, ModuleFlux } from \"@youwol/flux-core\";\nimport { child$, render, VirtualDOM } from \"@youwol/flux-view\";\nimport { BehaviorSubject, combineLatest, Observable } from \"rxjs\";\nimport { debounceTime, map } from \"rxjs/operators\";\nimport { AppStore } from \"../builder-state\";\nimport { CodeEditorView } from \"./code-editor.view\";\nimport * as _ from 'lodash'\nimport { infoView } from \"./info.view\";\nimport { DataTreeView } from \"./data-tree.view\";\nimport { InputStatusView } from \"./input-status.view\";\nimport { Button } from \"@youwol/fv-button\";\nimport { Modal } from \"@youwol/fv-group\";\nimport { ModalView } from \"./modal.view\";\n\nexport namespace AdaptorEditoView{\n\n\n    class ExecutionError{\n        constructor(public readonly message:string, public readonly row: number, public readonly col: number){}\n    }\n        \n    function parseError(stack:string): ExecutionError{\n    \n        try{\n            let lines = stack.split('\\n')\n            let message = lines[0]\n            lines = lines.filter( line => line.includes('eval') && line.split(',').length==2)\n            if(lines.length==0){\n                return new ExecutionError(message, undefined, undefined)\n            }\n            let p = lines[0].split(',')[1].split('<anonymous>:')[1].split(')')[0]\n            let [row,col] = [ Number(p.split(':')[0]) - 2, Number(p.split(':')[1]) ]\n            return new ExecutionError(message, row, col)\n        }\n        catch(e){\n            return new ExecutionError(\"Unidentified error\", undefined, undefined)\n        }\n    }\n    function invalidParsingView(error: ExecutionError){\n\n        return {\n            class: 'flex-grow-1 py-2', \n            style:{\n                'min-height':'0px',\n                'font-family': 'monospace'\n            },\n            children:[\n                {\n                    innerText: 'error while executing the adaptor'\n                },\n                {\n                    innerText: `${error.message}.` + (error.row? ` Row:${error.row}, column:${error.col}` : '')\n                }\n            ]\n        }\n    }\n\n    \n    export class State{\n\n        public readonly appStore: AppStore\n        public readonly connection: Connection\n        public readonly codeEditorState: CodeEditorView.State\n        public readonly mdleStart: ModuleFlux\n        public readonly mdleEnd: ModuleFlux\n        public readonly contract: IExpectation<unknown>\n        public readonly rawInput$: Observable<{data, configuration, context}>\n\n        public readonly adaptedInput$ : Observable<{data, configuration, context}>\n\n        constructor({\n            connection,\n            initialCode,\n            appStore\n        }:{\n            connection: Connection,\n            initialCode: string,\n            appStore: AppStore\n        }){\n            this.appStore = appStore\n            this.connection = connection\n            let codeContent$ = new BehaviorSubject<string>(initialCode)\n            this.codeEditorState = new CodeEditorView.State({\n                content$:codeContent$\n            })\n            this.mdleStart = this.appStore.getModule(connection.start.moduleId)\n            this.mdleEnd =  this.appStore.getModule(connection.end.moduleId) \n            this.rawInput$ = this.mdleStart.getOutputSlot(connection.start.slotId).observable$\n\n            this.contract = this.mdleEnd.getInputSlot(this.connection.end.slotId).contract\n\n            this.adaptedInput$ = combineLatest([\n                codeContent$.pipe(debounceTime(0.5)),\n                this.rawInput$\n            ]).pipe(\n                map( ([content, data]) => { \n                    try{\n                        let result = new Function(content)()(data, this.mdleEnd.helpers)\n                        result.configuration = _.merge({}, this.mdleEnd.getPersistentData(), result.configuration)\n                        return result\n                    }\n                    catch(e){\n                        return parseError(e.stack)\n                    }\n                })\n            )\n            \n        }\n    }\n\n    type TOptions = {\n        containerClass?: string,\n        containerStyle?: {[key:string]: string},\n        untilFirst?: VirtualDOM \n    }\n\n    export class View implements VirtualDOM{\n\n        static defaultOptions  = {\n            containerClass: 'fv-bg-background p-3 fv-text-primary rounded d-flex h-100 w-100',\n            containerStyle: {},\n            untilFirst: {\n                class:'d-flex flex-column fv-text-primary ',\n                style:{'font-family': 'monospace'},\n                children:[\n                    {\n                        tag:'p',\n                        innerText: 'No data available: the module has not played any scenario yet. Having data available may help to write your code.'\n                    },\n                    {\n                        tag:'p',\n                        innerText: 'Getting some data is usually as easy as connecting the input(s) of your module.'\n                    }\n                ]\n            }\n        }\n        \n        public readonly state: State\n        public readonly class: string\n        public readonly style: {[key:string]: string}\n        public readonly children: Array<VirtualDOM>\n        public readonly options: TOptions\n\n\n        constructor({\n            state,\n            editorConfiguration,\n            options,\n            ...rest\n        }: {\n            state: State,\n            editorConfiguration?: any,\n            options?: TOptions\n        }) {\n            Object.assign(this, rest)\n\n            this.options = {...View.defaultOptions, ...(options ? options : {}) }\n            this.state = state\n            this.class = this.options.containerClass\n            this.style = this.options.containerStyle \n            \n            this.children = [\n                this.dataColumnView(),\n                { \n                    class:'d-flex flex-grow-1 flex-column h-100 w-100 mx-2',\n                    style: {'min-width': '0px'},\n                    children:[\n                        new CodeEditorView.View({\n                            state: state.codeEditorState,\n                            editorConfiguration,\n                            options:{\n                                containerClass:'w-100 h-50'\n                            }\n                        }),\n                        this.statusView()\n                    ]\n                }\n            ]\n        }\n\n        dataColumnView() : VirtualDOM{\n\n            return {\n                class:'d-flex flex-column h-100 fv-text-primary w-50',\n                style:{'font-family': 'monospace'},\n                children:[\n                    this.rawInputView(),\n                    this.adaptedInputView()\n                ]\n            }\n        }\n\n        statusView() : VirtualDOM{\n                        \n            let info = \"Presented here is a blind test of the input that is reaching the module's implementation \"+\n            \"with respect to its internal validation rules. \\n Make sure the trigger turn green before updating the adaptor.\"\n            \n            return { \n                style:{height:'33%', 'font-family': 'monospace'},\n                class:'overflow-auto flex-grow-1 d-flex flex-column',\n                children:[\n                    infoView(info),\n                    child$(\n                        this.state.adaptedInput$,\n                        ( input ) => {\n\n                            if (input instanceof ExecutionError || !input.data)\n                                return invalidParsingView(input)\n\n                            let state = new InputStatusView.State({\n                                mdle: this.state.mdleEnd,\n                                adaptedInput: input,\n                                contract: this.state.contract\n                            })\n                            return new InputStatusView.View({\n                                state,\n                                options:{\n                                    containerClass:'flex-grow-1 w-100 overflow-auto',\n                                    containerStyle:{'min-height':'0px'}\n                                }\n                            })\n                        }\n                    )\n                ]\n            }\n        }\n\n\n        \n        rawInputView() : VirtualDOM{\n\n            let info = \"Presented here is the latest input that have reached the adaptor, before any transformation. \"+\n                       \"The input that is actually reaching the module's implementation is presented below.\"\n\n            return {   \n                class:'h-50 d-flex flex-column overflow-auto py-1',\n                children:[\n                    {\n                        innerText: \"Adaptor's input data\", \n                        class:'text-center fv-text-focus'\n                    },                            \n                    {\n                        class:'flex-grow-1 d-flex flex-column', style:{'min-height':'0'},\n                        children:[\n                            infoView(info),\n                            this.dataTreeView(this.state.rawInput$, 'input')\n                        ]\n                    }\n                ]\n            }\n        }\n\n        adaptedInputView() : VirtualDOM{\n\n            let info = \"Presented here is the input that is actually reaching the module's implementation. \"+\n            \"Here, the configuration part of the input is merging the default one (defined in module's settings) \"+\n            \"with the one returned by the adaptor (as presented in the previous tab).\"\n            \n            return {   \n                class:'h-50 d-flex flex-column overflow-auto py-1',\n                children:[\n                    {\n                        innerText: \"Module's input data\", \n                        class:'text-center  fv-text-focus'\n                    },\n                    {\n                        class:'flex-grow-1 d-flex flex-column', style:{'min-height':'0'},\n                        children:[\n                            infoView(info),\n                            this.dataTreeView( \n                                this.state.adaptedInput$, \n                                'input'\n                            )\n                        ]\n                    }\n                ]\n            }\n        }\n\n        dataTreeView( input$: Observable<{data, configuration, context}>, rootNodeName){\n   \n            let expandedNodes = [rootNodeName+\"_0\"]\n\n            return {\n                class:'cm-s-blackboard overflow-auto flex-grow-1', style:{'min-height':'0px'},\n                children:[\n                    child$(\n                        input$,\n                        (result) => {\n                            if(!result)\n                                return { 'innerText': 'code not valid', class:'p-3'}\n        \n                            let treeState = new DataTreeView.State({\n                                title: rootNodeName,\n                                data: result,\n                                expandedNodes:expandedNodes\n                            } as any)\n        \n                            let treeView = new DataTreeView.View({\n                                state: treeState,\n                                connectedCallback: (elem) => {\n                                    elem.subscriptions.push(\n                                        treeState.expandedNodes$.subscribe( nodes => expandedNodes = nodes)\n                                    )\n                                }\n                            } as any)\n        \n                            return treeView\n                        },\n                        { untilFirst: this.options.untilFirst }\n                    )\n                ]\n            }\n        }\n    }\n\n    export function popupModal({\n        connection, \n        initialCode,\n        appStore,\n        onUpdate\n    }: {\n        connection: Connection, \n        initialCode: string,\n        appStore: AppStore,\n        onUpdate: (string) => void\n    }){\n        let state = new State({connection, initialCode, appStore})\n        let view = new View({\n            state: state, \n            options:{\n                containerClass: 'p-3 d-flex flex-grow-1 w-100',\n                containerStyle: {'min-height':'0px'}\n            }\n        })\n        ModalView.popup({\n            view,\n            style: { height:'50vh', width:'90vw', 'max-width':'1500px'}\n        }).subscribe( () => {\n            onUpdate( state.codeEditorState.content$.getValue())\n        })\n    }\n}","import { LoadingGraph } from \"@youwol/cdn-client\"\nimport { Factory, uuidv4 } from \"@youwol/flux-core\"\nimport { attr$, child$ } from \"@youwol/flux-view\"\nimport { ImmutableTree } from \"@youwol/fv-tree\"\nimport { BehaviorSubject, Observable, of, Subject } from \"rxjs\"\nimport { map, scan, tap } from \"rxjs/operators\"\nimport { AssetsBrowserClient, ChildrenResp, GroupsResp } from \"../../clients/assets-browser.client\"\nimport { AppStore } from \"../builder-state\"\n\n\nexport namespace AssetsExplorerView{\n\n    export let singletonState : State\n\n    export class State extends ImmutableTree.State<ExplorerTreeNode>{\n\n        // expandedNodes = ['exporer']\n        public readonly appStore : AppStore\n\n        public selectionBuffer$ : Observable<Array<ModuleItemNode>>\n\n        public readonly selection$ : Subject<{node:ModuleItemNode, selected: boolean}>        \n        static readonly favorites$ = new BehaviorSubject<Array<Favorite>>(getStoredFavorites())\n        \n        public readonly favorites = new Array<any>()\n\n        constructor({\n            appStore,\n            selectionBuffer$\n        }:{\n            appStore: AppStore,\n            selectionBuffer$?: Observable<Array<ModuleItemNode>>\n        }) {\n            super({\n                rootNode: new RootNode( {favorites:State.favorites$.getValue()})\n            })\n            this.appStore = appStore\n            this.selectionBuffer$ = selectionBuffer$ \n                ? selectionBuffer$ \n                : of([])\n\n            State.favorites$.subscribe( favorites => {\n                localStorage.setItem('flux-builder#favorites', JSON.stringify(favorites))\n            })\n            this.selection$ = new Subject<{node:ModuleItemNode, selected: boolean}>()\n            //this.clearBuffer()\n        }\n\n\n        toggleFavorite(node: ExplorerTreeNode){\n\n            let favorites = getStoredFavorites()\n            let originalId = node instanceof FavoriteNode ? node.favorite.id : node.id\n            if(favorites.find( f => f.id == originalId)){\n                favorites = favorites.filter( favorite => favorite.id != originalId)\n                State.favorites$.next(favorites)\n                this.removeNode(node instanceof FavoriteNode ? node.id : \"favorite_\"+originalId)\n                return \n            }\n            let favorite =  new Favorite(originalId, node.name, node.type)\n            favorites = favorites.concat([favorite])\n            State.favorites$.next(favorites)\n            this.addChild('explorer', new FavoriteNode({favorite}))\n        }\n    }\n\n\n    export class View extends ImmutableTree.View<ExplorerTreeNode>{\n\n        constructor({state,...rest}: {\n            state: State\n        }){\n            super({\n                state,\n                headerView,\n                ...rest\n            })\n        }\n    }\n\n\n    function headerView(state: State, node: ExplorerTreeNode) {\n\n        if( !(node instanceof ModuleItemNode)){\n            let favoriteClassBase = 'fas fa-star fa-xs fv-hover-opacity fv-pointer '\n            return {\n                class: 'd-flex w-100 align-items-center fv-pointer',\n                children: [\n                    { \n                        tag: 'i', \n                        class: node.faIcon ? node.faIcon : \"\" \n                    },\n                    node instanceof FavoriteNode \n                        ?{ \n                            tag: 'i', class: 'fas fa-star fa-xs px-1 fv-text-focus fv-hover-opacity',\n                            onclick: (ev) => { ev.stopPropagation(); state.toggleFavorite(node)}\n                        }\n                        :{}, \n                    { \n                        tag: 'span', \n                        class: 'mx-2', \n                        innerText: node.name, \n                        style: { 'user-select': 'none' } \n                    },\n                    node instanceof AssetFolderNode\n                        ? { \n                            tag:'i',\n                            class: attr$(\n                                State.favorites$,\n                                (favorites) =>  favorites.find( f => f.id ==node.id)\n                                    ? favoriteClassBase + \"fv-text-focus\" \n                                    : favoriteClassBase + \"fv-text-primary\" \n                            ),\n                            onclick: (ev)=> {\n                                ev.stopPropagation();\n                                state.toggleFavorite(node)\n                            }\n                        }\n                        : {},\n                    child$(\n                        node.status$,\n                        (statusList) => statusList.find(status => status.type == 'request-pending')\n                            ? { tag: 'i', class: 'fas fa-spinner fa-spin' }\n                            : {}\n                    )\n                ]\n            }\n        }\n        if( node instanceof ModuleItemNode){\n            return {\n                class: 'd-flex w-100 align-items-baseline fv-pointer',            \n                onclick: () => state.selection$.next({node:node, selected: true}), \n                children: [\n                    { \n                        tag:'i', \n                        class: attr$(\n                            state.selectionBuffer$,\n                            (buffer: Array<ModuleItemNode>) => buffer.includes(node) ? 'fv-text-focus': '',\n                            { wrapper: (d) => 'fas fa-cloud-download-alt fv-text-primary fv-hover-opacity '+d}\n                        )\n                    },\n                    { \n                        tag: 'span', \n                        class: 'mx-2 w-100', \n                        innerText: node.name, \n                        style: { 'user-select': 'none' } \n                    }\n                ]\n            } \n        }\n    }\n\n    type TChildren = Array<ExplorerTreeNode> | Observable<Array<ExplorerTreeNode>>\n\n    class ExplorerTreeNode extends ImmutableTree.Node {\n\n        public readonly faIcon: string\n        public readonly name: string\n        public readonly type: string\n        public readonly status$ = new BehaviorSubject< Array<{type: string, id: string}>>([])\n\n        constructor({ id, name, children, type, faIcon }: {\n            id: string, \n            name: string, \n            type:string,\n            children?: TChildren, \n            faIcon?: string\n        }) {\n            super({ id, children })\n            this.name = name\n            this.faIcon = faIcon\n            this.type = type\n        }\n\n        addStatus({type, id} : {type:string, id?: string}){\n            id = id || this.id\n            let newStatus = this.status$.getValue().concat({type,id})\n            this.status$.next(newStatus)\n        }\n\n        removeStatus({type, id} : {type:string, id?: string}){\n            id = id || this.id\n            let newStatus = this.status$.getValue().filter( s => s.type!=type && s.id!=id)\n            this.status$.next(newStatus)\n        }\n\n        resolveChildren() : Observable<Array<ExplorerTreeNode>> {\n            if(!this.children || Array.isArray(this.children))\n                return\n            \n            let uid = uuidv4()\n            this.addStatus( {type:'request-pending', id:uid })\n            return super.resolveChildren().pipe(\n                tap(() => {\n                    this.removeStatus( {type:'request-pending', id:uid })\n                })\n            ) as Observable<Array<ExplorerTreeNode>>\n        }\n    }\n\n\n    class FolderNode extends ExplorerTreeNode {\n\n        constructor({ id, name, type, children, faIcon }: {\n            id: string, \n            name: string, \n            type?: string,\n            children: TChildren, \n            faIcon?: string\n        }) {\n            super({ \n                id, \n                name, \n                type: type || \"FolderNode\", \n                children, \n                faIcon: faIcon ? faIcon : \"fas fa-folder\" })\n        }\n    }\n\n\n    class RootNode extends FolderNode {\n\n        public readonly favorites: Array<Favorite>\n\n        constructor({favorites, children}: {\n            favorites, \n            children?: TChildren}) {\n\n            super({ \n                id: 'explorer', \n                name: 'Explorer', \n                type:\"RootNode\", \n                children: children ? children : getRootChildren$() \n            })\n            this.favorites = favorites\n        }\n    }\n\n\n    class GroupNode extends FolderNode {\n\n        public readonly groupId: string\n        public readonly  path: string\n        constructor({groupId, path, children}:{\n            groupId: string, \n            path, \n            children?\n        }) {\n\n            super({ \n                id: groupId, name: path.split('/').slice(-1)[0], \n                type:\"GroupNode\",\n                children:  children ? children: getGroupChildren$(path),\n                faIcon: \"fas fa-users\"\n            })\n            this.groupId= groupId\n            this.path=path\n        }\n    };\n\n    class DriveNode extends FolderNode {\n\n        public readonly name: string\n        public readonly driveId: string\n        public readonly groupId: string\n\n        constructor({ driveId, name, children }: {\n            driveId, \n            name, \n            children?\n        }) {\n            super({ \n                id: driveId, \n                name,             \n                type:\"DriveNode\",\n                children: children? children : getFolderChildren$(driveId),\n                faIcon: \"fas fa-hdd\" })\n            this.driveId = driveId    }\n    }\n\n\n    class AssetFolderNode extends FolderNode {\n        public readonly name: string\n        public readonly folderId: string\n\n        constructor({ folderId, name, children }:{ \n            folderId, \n            name, \n            children? \n        }) {\n            super({ \n                id: folderId, \n                name,  \n                type:\"AssetFolderNode\", \n                children: children ? children : getFolderChildren$(folderId) })\n            this.folderId = folderId\n        }\n    }\n\n\n    class ItemNode extends ExplorerTreeNode {\n\n        constructor({ id, name , type, children, faIcon} : {\n            id:string, \n            name: string, \n            type?: string,\n            children?:TChildren, \n            faIcon\n        }) {\n            super({ \n                id, \n                name, \n                type: type || \"ItemNode\", \n                children, \n                faIcon })\n        }\n    }\n\n\n    class AssetItemNode extends ItemNode {\n        public readonly assetId: string\n\n        constructor({ assetId, name, rawId, children }:{\n            assetId, \n            name, \n            rawId, \n            children?\n        }) {\n            super({ \n                id: assetId,\n                name, \n                type:\"AssetItemNode\",\n                children: children ? children : getModules$( rawId), faIcon: \"fas fa-box\" })\n            this.assetId = assetId\n        }\n    }\n\n\n    export class ModuleItemNode extends ItemNode {\n        \n        public readonly factory : any\n        public readonly library: {name: string, namespace: string, version: string}\n        public readonly fluxPacks: Array<{name}>\n        constructor({ factory, library, fluxPacks}) {\n            super({ \n                id: factory.uid, \n                name: factory.displayName, \n                type:\"ModuleItemNode\",\n                faIcon:\"\" \n            })\n            this.factory = factory\n            this.library = library\n            this.fluxPacks = fluxPacks\n        }\n    }\n\n\n    class FavoriteNode extends ItemNode {\n\n        public readonly favorite : Favorite\n\n        static getChildrenFactory = {\n            'AssetFolderNode' : (favorite) => getFolderChildren$(favorite.id),\n        }\n        public readonly assetId: string\n\n        constructor({favorite} : {\n            favorite:Favorite\n        }) {\n            super({ \n                id: \"favorite_\"+favorite.id,\n                name: favorite.name, \n                type:\"FavoriteNode\",\n                children: FavoriteNode.getChildrenFactory[favorite.type](favorite), \n                faIcon: \"fas fa-folder\" \n            })\n            this.favorite = favorite\n        }\n    }\n\n\n    class Favorite{\n\n        constructor(\n            public readonly id: string, \n            public readonly name: string, \n            public readonly type: string){}\n    }\n\n    function getStoredFavorites(){\n\n        let favoritesStr = localStorage.getItem('flux-builder#favorites') \n        let favorites = favoritesStr ? JSON.parse(favoritesStr) : []\n        return favorites as Array<Favorite>\n    }\n\n\n    function getRootChildren$() {\n        let favorites = getStoredFavorites()\n        return getGroupChildren$().pipe(\n            map( children => [...children,...favorites.map( favorite => new FavoriteNode({favorite}))])\n        )\n    }\n\n\n    function getGroupChildren$(path=\"\"): Observable<Array<GroupNode | DriveNode>> {\n        return AssetsBrowserClient.getGroupChildren$(path).pipe(\n            map( (groupResp: GroupsResp) => {\n                return [\n                    ...groupResp.groups.map( group => {\n                        return new GroupNode( {groupId: group.id, path: group.path})\n                    }),\n                    ...groupResp.drives.map( drive => {\n                        return new DriveNode( {driveId: drive.driveId, name: drive.name})\n                    })\n                ]\n            })\n        ) as any\n    }\n\n    function getFolderChildren$(folderId: string): Observable<Array<AssetFolderNode | AssetItemNode>> {\n        return AssetsBrowserClient.getFolderChildren$(folderId).pipe(\n            map( (resp: ChildrenResp) => {\n                return [\n                    ...resp.folders.map( folder => {\n                        return new AssetFolderNode( {folderId: folder.folderId, name: folder.name})\n                    }),\n                    ...resp.items\n                    .filter( item => item[\"kind\"]=='package')\n                    .map( item => {\n                        return new AssetItemNode( { assetId: item.assetId, name: item.name, rawId: item.rawId})\n                    })\n                ]\n            })\n        )\n    }\n\n    function getModules$(assetId: string): Observable<Array<any>> {\n        \n        return AssetsBrowserClient.getModules$(assetId).pipe(\n            map( ( {factories, library, loadingGraph}:{\n                factories: Array<Factory>, \n                library: any, \n                loadingGraph: LoadingGraph})=> {\n                    \n                return factories.map( v => new ModuleItemNode({\n                    factory:v, \n                    library: {name:library.name, version: library.versions[0], namespace:library.namespace},\n                    fluxPacks: loadingGraph.lock.flat().filter( library => library.type == 'flux-pack')\n                    })\n                )\n            })\n        )\n    }\n\n}","import { BehaviorSubject, combineLatest, Observable, Subscription } from 'rxjs'\n\nimport { map, tap } from 'rxjs/operators'\nimport { Switch } from '@youwol/fv-button'\nimport { TextInput, NumberInput, Select, ColorPicker, Slider} from '@youwol/fv-input'\nimport { Tabs } from '@youwol/fv-tabs'\nimport { attr$, child$, HTMLElement$, VirtualDOM } from '@youwol/flux-view'\nimport {cloneDeep} from 'lodash'\n\nexport namespace AutoForm {\n\n    export interface ValueDescription{ name: string, type: string, metadata: any }\n    export type ValueType = number | string | boolean\n\n    export interface Schema {\n\n        [key: string]: ValueDescription\n    }\n\n    export class State {\n\n        inputValues$: BehaviorSubject<Object>\n        currentValue$ : BehaviorSubject<Object>\n\n        outputValues$ = new Array<Observable<{path:Array<string>,value:ValueType}>>()\n\n        constructor(\n            inputValues$: BehaviorSubject<Object> | Object, \n            public readonly schema: Schema,\n            public readonly elementsViewFactory: any = viewFactory\n            ) {\n            this.inputValues$ = (inputValues$ instanceof BehaviorSubject)\n            ? inputValues$ \n            : new BehaviorSubject<Object>(inputValues$ as Object)\n            console.log(\"Scemas\",schema )\n            this.currentValue$ = new BehaviorSubject(this.inputValues$.getValue())\n\n        }\n    }\n\n    export let viewFactory = [\n        {\n            test: (value: ValueDescription) => value.type == \"Boolean\",\n            view: (value$: BehaviorSubject<boolean>) => {\n                Switch.View.defaultRadius = 10\n                return new Switch.View({\n                    state: new Switch.State(value$)\n                } as any)\n            }\n        },\n        {\n            test: (value: ValueDescription) => value.metadata.type == \"color\",\n            view: (value$: BehaviorSubject<string>, description: ValueDescription) => {\n                \n                return new ColorPicker.View({\n                    state: new ColorPicker.State(value$)\n                } as any)\n            }\n        },\n        {\n            test: (value: ValueDescription) => value.metadata.enum,\n            view: (value$: BehaviorSubject<string>, description: ValueDescription) => {\n                let items = description.metadata.enum.map( text => new Select.ItemData(text, text))\n                return new Select.View({\n                    state: new Select.State(items, value$),\n                    class: 'w-100 ',\n                    style: { fontSize: 'larger' }\n                } as any)\n            }\n        },\n        {\n            test: (value: ValueDescription) => value.type == \"String\",\n            view: (value$: BehaviorSubject<string>) => {\n                return { \n                    tag:'input', \n                    type:'text', \n                    value: value$.getValue(),\n                    onchange:  (event) => value$.next(event.target.value)\n                }\n            }\n        },\n        {\n            test: (value: ValueDescription) =>{\n                return value.type == \"Number\" && value.metadata.min != undefined && value.metadata.max != undefined\n            },\n            view: (value$: BehaviorSubject<number>, description: ValueDescription) =>{\n                let hovered$ = new BehaviorSubject(false)\n                let state = new Slider.State({min: description.metadata.min, max: description.metadata.max, value:value$, count:1000 })\n                return {\n                    class:'d-flex',\n                    children:[\n                        { \n                            tag:'input',\n                            class: attr$( hovered$, (isHovered) => isHovered ? 'w-100' : 'w-25'), \n                            type:'number', \n                            value: attr$( value$, (v) => v ),\n                            onchange:  (event) => value$.next(Number(event.target.value)),\n                            onmouseenter: () => hovered$.next(true),\n                            onmouseleave:  () => hovered$.next(false),\n                        },\n                        new Slider.View({state, class:\"w-75\"} as any) \n                    ]\n                }\n            }\n        },\n        {\n            test: (value: ValueDescription) => value.type == \"Number\",\n            view: (value$: BehaviorSubject<number>) =>{\n                return { \n                    tag:'input', \n                    type:'number', \n                    value: value$.getValue(),\n                    onchange: (event) => value$.next(Number(event.target.value))\n                }\n            }\n        },\n    ]\n\n    export class View implements VirtualDOM {\n\n        public readonly state: State\n\n        children : Array<VirtualDOM>\n\n        constructor({state, ...rest} : {state: State}) {\n            Object.assign(this, rest)\n            this.state = state\n\n            this.children = [\n                child$( \n                    state.inputValues$,\n                    (formDescription) => {\n                        return groupItems( \n                            Object.entries(state.schema), \n                            formDescription, \n                            [],\n                            state\n                        )\n                    },\n                    {\n                        sideEffects: (_, elem: HTMLElement$) => {\n                            \n                            let sub = combineLatest( this.state.outputValues$ ).subscribe( entries => {\n                                let base = cloneDeep(state.inputValues$.getValue())\n                                entries.forEach( ({path, value}) => {\n                                    let lastPart = path.slice(-1)[0]\n                                    let parentParts = path.slice(0,-1)\n                                    parentParts.reduce( (acc,e) => acc[e], base )[lastPart] = value\n                                })\n                                state.currentValue$.next(base)\n                            })\n                            elem.ownSubscriptions(sub)\n                        }\n                    }\n                )\n            ]\n        }\n    }\n\n    function createAttributesGrid(\n        items: Array< [string, ValueDescription]>,\n        basePath: Array<string>, \n        configurationBase: Object,\n        state: State\n        //observables: Array<Observable<{path:Array<string>,value:ValueType}>> \n        ) : VirtualDOM{\n        \n        let order = Object.keys(basePath.reduce((acc, e) => acc[e], configurationBase))\n        \n        items= items.sort( (lhs, rhs) => order.indexOf(lhs[0]) - order.indexOf(rhs[0]))\n        if (items.length == 0) \n            return {}\n\n        return {\n            class:'row', style:{ padding:'0px', margin:'0px'},\n            children: items.map( item => [\n                {\n                    class:'col my-auto p-0',\n                    innerText: item[0]\n                },\n                {\n                    class:'col pl-0', style:{ 'align-self': 'center' },\n                    children: [\n                        leafView(item[1], basePath.concat(item[0]), configurationBase, state)\n                    ]\n                },\n                {   class:\"w-100 py-1\"}\n            ]).reduce((acc,e)=> acc.concat(e))\n        }\n    }\n    function isLeaf(v: ValueDescription) {\n        return v.type && [\"Number\", \"String\", \"Boolean\", \"Object\"].includes(v.type)\n    }\n\n    function leafView(\n        valueMeta: ValueDescription, \n        path: Array<string>, \n        configuration, \n        state: State\n        //observables: Array<Observable<{path:Array<string>,value:ValueType}>>\n        ): VirtualDOM {\n\n        let value0 = path.reduce((acc, e) => acc[e], configuration)\n        let factory = state.elementsViewFactory.find(element => element.test(valueMeta))\n        if(! factory)\n            return { id:'unkwnown-element-'+ valueMeta.name+'-'+valueMeta.type}\n        let value$ = new BehaviorSubject(value0)\n        let view = factory.view(value$, valueMeta);\n        let obs = ( value$ as Observable<any>).pipe(map(value => ({ path, value })))\n        state.outputValues$.push(obs)\n        return view\n    }\n\n    function groupItems(\n            items, \n            configurationBase, \n            //observables: Array<Observable<{path:Array<string>,value:ValueType}>>,\n            basePath: Array<string> = [],\n            state: State\n            ): VirtualDOM {\n\n        let currentItems = items.filter(([k, v]: [string, ValueDescription]) => !k.includes(\".\") && isLeaf(v))\n\n        let children = items\n            .filter(item => item[0].includes(\".\"))\n            .map(([key, val]) => {\n                let prefix = key.split(\".\")[0]\n                let suffix = key.split(\".\").slice(1).join('.')\n                return [prefix, [suffix, val], basePath.concat(prefix)]\n            })\n            .reduce((acc: any, [prefix, val, basePath]: any) => {\n                if (!acc[prefix])\n                    acc[prefix] = { values: [], basePath }\n                acc[prefix].values.push(val)\n                return acc\n            }, {})\n        \n        let r = Object.entries(children)\n            .map(([prefix, { values, basePath }]: any) => [prefix, groupItems(values, configurationBase, basePath, state)])\n            .reduce((acc, [k, v]) => Object.assign({}, acc, { [k]: v }), {})\n        \n        let itemsView = createAttributesGrid(currentItems, basePath, configurationBase, state)\n        \n        let tabsData = Object.entries(r).map( ([key, val]) => {\n            let tabData =  new Tabs.TabData(key,key)\n            tabData['view'] = val\n            return tabData\n        }) \n        if(tabsData.length==0)\n            return {\n                'class': 'p-2',\n                'children': [itemsView]\n            }\n        let tabState = new Tabs.State(tabsData)\n        let tabView = new Tabs.View({\n            state: tabState,\n            contentView: (_,tabData) => tabData['view'],\n            headerView: (_,tabData) => ({innerText: tabData.name, class:'px-2'})\n        })\n        let data = {\n            'class': 'p-2',\n            'children': [\n                itemsView,\n                tabView\n            ]\n        }\n        return data\n    }\n\n}","import { child$, VirtualDOM } from \"@youwol/flux-view\";\nimport { BehaviorSubject, from } from \"rxjs\";\nimport { mergeMap } from \"rxjs/operators\";\n\n\nexport namespace CodeEditorView{\n\n\n    export class State{\n        \n        public readonly content$ : BehaviorSubject<string>\n\n        constructor({\n                content$ \n            }:\n            {\n                content$: BehaviorSubject<string>\n            }\n        ){\n            this.content$ = content$\n        }\n    }\n\n\n    type TOptions = {\n        containerClass?: string,\n        containerStyle?: {[key:string]: string},\n    }\n\n    export class View implements VirtualDOM{\n\n        static defaultOptions  = {\n            containerClass: 'h-100 w-100',\n            containerStyle: {},\n        }\n        public readonly state: State\n        public readonly class: string\n        public readonly style: {[key:string]: string}\n        public readonly children: Array<VirtualDOM>\n\n        constructor({\n            state,\n            editorConfiguration,\n            options,\n            ...rest\n        }: {\n            state: State,\n            editorConfiguration: any,\n            options?: TOptions\n        }){\n            Object.assign(this, rest)\n            let styling : TOptions = {...View.defaultOptions, ...(options ? options : {}) }\n            this.state = state\n            this.class = styling.containerClass\n            this.style = styling.containerStyle\n            let configuration = {\n                ...{\n                    value: state.content$.getValue(),\n                    mode: 'javascript',\n                    lineNumbers: true,\n                    theme:'blackboard',\n                    extraKeys: {\n                        \"Tab\": (cm) => cm.replaceSelection(\"    \" , \"end\")\n                       }\n                },\n                ...( editorConfiguration || {} )\n            }\n\n            this.children = [\n                child$( \n                    fetchCodeMirror$(configuration.mode),\n                    () => {\n                        return {\n                            id: 'code-mirror-editor',\n                            class: 'w-100 h-100',\n                            connectedCallback: (elem) => {\n                                let editor = window['CodeMirror'](elem, configuration)\n                                editor.on(\"changes\" , () => {\n                                    state.content$.next(editor.getValue())\n                                })\n                            }\n                        }\n                    }\n                )\n            ]\n        }\n    }\n\n    function fetchCodeMirror$(mode: string){\n        let cdn = window['@youwol/cdn-client']\n        \n        let urlsMode = {\n            \"javascript\": \"codemirror#5.52.0~mode/javascript.min.js\",\n            \"python\": \"codemirror#5.52.0~mode/python.min.js\",\n            \"css\":  \"codemirror#5.52.0~mode/css.min.js\",\n            \"xml\":  \"codemirror#5.52.0~mode/xml.min.js\",\n            \"html\":  \"codemirror#5.52.0~mode/htmlmixed.min.js\"                \n        }\n        return from(cdn.fetchBundles( {  codemirror: { version: '5.52.0' } },  window)\n        ).pipe(\n            mergeMap( () =>{\n                let urls = Array.isArray(urlsMode[mode]) ? urlsMode[mode] : [urlsMode[mode]]\n\n                let promise = cdn.fetchJavascriptAddOn(\n                    urls, \n                    window\n                    )\n                return from(promise)\n            })\n        )\n    }\n}","import { ModuleFlux } from \"@youwol/flux-core\"\nimport { render, VirtualDOM } from \"@youwol/flux-view\"\nimport { Button } from \"@youwol/fv-button\"\nimport { Modal } from \"@youwol/fv-group\"\nimport { BehaviorSubject } from \"rxjs\"\nimport { CodeEditorView } from \"./code-editor.view\"\nimport { ModalView } from \"./modal.view\"\n\n\nexport namespace CodePropertyEditorView{\n\n\n    export class State{\n\n        public readonly mdle: ModuleFlux\n        public readonly codeEditorState: CodeEditorView.State\n\n        constructor({\n            mdle,\n            initialCode\n        } : {\n            mdle: ModuleFlux,\n            initialCode: string\n        }){\n            this.mdle = mdle \n            let content$ = new BehaviorSubject<string>(initialCode)\n            this.codeEditorState = new CodeEditorView.State({content$})\n        }\n    }\n\n\n    type TOptions = {\n        containerClass?: string,\n        containerStyle?: {[key:string]: string}\n    }\n\n    export class View implements VirtualDOM {\n\n        static defaultOptions  = {\n            containerClass: 'fv-bg-background p-3 fv-text-primary rounded d-flex ',\n            containerStyle: { height:'50vh', width:'90vw', 'max-width':'1500px'}\n        }\n\n        public readonly state: State\n        public readonly class: string\n        public readonly style: {[key:string]: string}\n        public readonly children: Array<VirtualDOM>\n        public readonly options: TOptions\n\n        constructor({\n            state,\n            editorConfiguration,\n            options,\n            ...rest\n        }: {\n            state: State,\n            editorConfiguration: any,\n            options?: TOptions\n        }){\n            Object.assign(this, rest)\n\n            this.options = {...View.defaultOptions, ...(options ? options : {}) }\n            this.state = state\n            this.class = this.options.containerClass\n            this.style = this.options.containerStyle \n\n            this.children = [\n                this.moduleContextView(),\n                { \n                    class:'d-flex flex-column h-100 w-100 mx-2',\n                    children:[\n                        new CodeEditorView.View({state: this.state.codeEditorState, editorConfiguration})\n                    ]\n                }\n            ]\n\n\n        }\n\n        moduleContextView(){\n            return {}\n        }\n\n    }\n\n\n    export function popupModal({\n        mdle, \n        initialCode, \n        editorConfiguration,\n        onUpdate\n    }: {\n        mdle: ModuleFlux, \n        initialCode: string, \n        editorConfiguration: any,\n        onUpdate: (string) => void\n    }){\n\n        let state = new State({mdle, initialCode})\n        let view = new View({\n            state: state, \n            editorConfiguration,\n            options:{\n                containerClass: 'p-2 d-flex flex-grow-1 w-100',\n                containerStyle: {'min-height':'0px'}\n            }\n        })\n        ModalView.popup({\n            view,\n            style: { height:'50vh', width:'90vw', 'max-width':'1500px'}\n        }).subscribe( () => {\n            onUpdate( state.codeEditorState.content$.getValue())\n        })\n    }\n}","import { ConfigurationStatus} from \"@youwol/flux-core\";\nimport { VirtualDOM } from \"@youwol/flux-view\";\nimport { DataTreeView } from \"./data-tree.view\";\n\n\nexport namespace ConfigurationStatusView{\n\n\n    export class State{\n\n        public readonly status :  ConfigurationStatus<unknown>\n        public readonly typingErrors : DataTreeView.State | undefined\n        public readonly missingFields : DataTreeView.State | undefined\n        public readonly unexpectedFields : DataTreeView.State | undefined\n\n        public readonly stringLengthLimit: number\n        constructor({\n            status,\n            stringLengthLimit\n        }: {\n            status: ConfigurationStatus<unknown>,\n            stringLengthLimit?: number\n        }) {\n\n            this.status = status\n            this.stringLengthLimit = stringLengthLimit || 100\n\n            // Following hack is becaus of 'instanceof' issue with 2 versions of flux-core:\n            // - one is used by flux-builder\n            // - one is used by the application\n            // They are not necessarly the same, not sure what's the best way to fix this problem yet\n            let statusAny = status as any\n\n            if( statusAny.intrus.length == 0 && !statusAny.typeErrors && !statusAny.missings)\n                return \n\n            if( statusAny.typeErrors && statusAny.typeErrors.length > 0 )\n                this.typingErrors = new DataTreeView.State({\n                    title: 'typing errors',\n                    data: statusAny.typeErrors\n                })\n            if(  statusAny.missings && statusAny.missings.length > 0 )\n                this.missingFields = new DataTreeView.State({\n                    title: 'missing fields',\n                    data: statusAny.missings\n                })\n            if(statusAny.intrus.length>0)\n                this.unexpectedFields = new DataTreeView.State({\n                    title: 'unexpected fields',\n                    data: statusAny.intrus\n                })\n        }\n    }\n\n    type TOptions = {\n        containerClass?: string,\n        containerStyle?: {[key:string]: string},\n    }\n\n    export class View implements VirtualDOM {\n\n        static defaultOptions  = {\n            containerClass: 'd-flex flex-column',\n            containerStyle: { 'min-height':'0px'},\n        }\n\n        public readonly state: State\n        public readonly class: string\n        public readonly style: {[key: string]: string}\n        public readonly children: Array<VirtualDOM>\n\n        constructor({\n            state,\n            options,\n            ...rest\n        }:\n        {\n            state: State,\n            options?: TOptions\n        }) {\n            Object.assign(this, rest)\n            let styling : TOptions = {...View.defaultOptions, ...(options ? options : {}) }\n            this.state = state\n            this.class = styling.containerClass\n            this.style = styling.containerStyle\n\n            let views = [this.state.typingErrors, this.state.missingFields, this.state.unexpectedFields]\n            .filter( d => d)\n            .map( state => new DataTreeView.View({ state}))\n\n            this.children = (views.length==0) \n                ? [ { innerText: 'Your configuration is validated'} ]\n                : views            \n        }\n    }\n\n    export function journalWidget( data: ConfigurationStatus<unknown>) : VirtualDOM{\n\n        let dataState = new DataTreeView.State({\n            title: \"merged configuration\",\n            data: data.result\n        })\n        let configurationState = new ConfigurationStatusView.State({\n            status:data\n        })\n\n        return {\n            children:[\n                {\n                    class: 'd-flex justify-content-around w-100',\n                    style:{'white-space': 'nowrap'},\n                    children: [\n                        new DataTreeView.View({state: dataState}),\n                        {class:'px-4'},\n                        new ConfigurationStatusView.View({state:configurationState})\n                    ]\n                }\n            ]\n        }\n    }\n\n/*\n    function headerView(status: ConfigurationStatus<unknown>){\n\n        let icon = {}\n        if (status instanceof UnconsistentConfiguration)\n            icon = { class:'fas fa-times fv-text-error px-1'}\n        if (status instanceof ConsistentConfiguration &&  status.intrus.length>0)\n            icon = { class:'fas fa-exclamation fv-text-danger px-1'}\n        if (status instanceof ConsistentConfiguration &&  status.intrus.length==0)\n            icon = { class:'fas fa-check fv-text-success px-1'}  \n        \n        return {\n            class:'d-flex align-items-center px-2',\n            children:[\n                icon,\n                {innerText: 'configuration'}\n            ]\n        }\n    }\n    */\n}","import { Adaptor, Connection, flattenSchemaWithValue, ModuleConfiguration, ModuleFlux, Property, Schema, uuidv4 } from \"@youwol/flux-core\"\nimport { HTMLElement$, VirtualDOM } from \"@youwol/flux-view\"\nimport { BehaviorSubject, Subscription } from \"rxjs\"\nimport { filter } from \"rxjs/operators\"\nimport { AppStore } from \"../builder-state\"\nimport { AdaptorEditoView } from \"./adaptor-editor.view\"\nimport { AutoForm } from \"./auto-form.view\"\n\n\n@Schema({\n    pack: {}\n})\nexport class ConnectionView{\n\n    @Property({ \n        description: \"wireless\" \n    })\n    readonly wireless : boolean = false\n\n    @Property({ \n        description: \"adaptor\", \n        type:'code'\n    })\n    readonly adaptor : string = `\n    return ({data,configuration,context}) => ({\n        data: data,\n        context:{},\n        configuration: configuration\n    })`\n\n    constructor( params: { wireless?: boolean, adaptor?: string } = {}) {   \n        Object.assign(this, params)\n    }\n}\n\n\nlet elementViewsFactory = (connection: Connection, appStore: AppStore) => [\n    {\n        test: (value: AutoForm.ValueDescription) => {\n            return value.metadata && value.metadata.type == \"code\"\n        },\n        view: (value$: BehaviorSubject<string>) => {\n            return {\n                class: \"fab fa-js-square fv-pointer fa-2x fv-hover-bg-background\",\n                onclick: () => {\n                    AdaptorEditoView.popupModal({\n                        connection,\n                        initialCode: value$.getValue(),\n                        appStore,\n                        onUpdate: (content) => value$.next(content)\n                    })\n                }\n            }\n        }\n    },\n    ...AutoForm.viewFactory\n]\n\nexport class ConnectionSettingsState{\n\n    public readonly autoFormState : AutoForm.State\n    public readonly initialSettings$ : BehaviorSubject<ConnectionView>\n\n    subscriptions : Subscription[]\n\n    constructor(\n        connection: Connection, \n        public readonly appStore: AppStore\n        ){\n            \n        let connectionViewData = appStore.getConnectionView( connection.connectionId)\n        let data = new ConnectionView({\n            ...(connectionViewData? {wireless:connectionViewData.wireless} : {}),\n            ...(connection.adaptor? {adaptor:connection.adaptor.toString()} : {})\n        })\n        let schemaWithValue = flattenSchemaWithValue(data)\n        Object.keys(schemaWithValue).forEach( k => schemaWithValue[k] = schemaWithValue[k][0])\n        let configurationIn$ = new BehaviorSubject<Object>(data)\n\n        this.autoFormState = new AutoForm.State(\n            configurationIn$,\n            schemaWithValue as any, \n            elementViewsFactory(connection, appStore)\n            )\n        \n        this.initialSettings$ = new BehaviorSubject(data)\n\n        let sub1 = this.autoFormState.currentValue$.pipe(\n            filter( (value) => value['wireless'] != this.initialSettings$.getValue()['wireless'] )\n        )\n        .subscribe( (value: ConnectionView) => {\n            this.initialSettings$.next(value)\n            this.appStore.setConnectionView(connection, {wireless: value.wireless}, true)\n            this.appStore.selectConnection(connection.connectionId)\n        })\n\n        let sub2 = this.autoFormState.currentValue$.pipe(\n            filter( (value) => value['adaptor'] != this.initialSettings$.getValue()['adaptor'] )\n        )\n        .subscribe( (value: ConnectionView) => {\n            this.initialSettings$.next(value)\n            let adaptor = new Adaptor(uuidv4(), value.adaptor)\n            appStore.addAdaptor(adaptor, connection)\n            this.appStore.selectConnection(connection.connectionId)\n        })\n        this.subscriptions = [sub1, sub2]\n    }\n}\n\nexport class ConnectionSettingsView implements VirtualDOM{\n\n    public readonly class = \"h-100 d-flex flex-column\"\n    public readonly children: VirtualDOM[]\n    public readonly style = { fontSize:'smaller'}\n    \n    connectedCallback?: (d: HTMLElement$) => void\n\n    constructor( public readonly state: ConnectionSettingsState){\n\n        this.children = [\n            new AutoForm.View({state: state.autoFormState, class:'flex-grow-1 overflow-auto my-1', style:{'min-height':'0px'}} as any)\n            ]\n        this.connectedCallback = (elem: HTMLElement$) => {\n            elem.ownSubscriptions(...state.subscriptions)\n        }\n    }\n}\n\n","import { ConfigurationStatus, Context, ErrorLog, ExpectationStatus, Log, \n    ModuleError, uuidv4, ContextStatus, Journal } from \"@youwol/flux-core\";\nimport { render, VirtualDOM } from \"@youwol/flux-view\";\nimport { Button } from \"@youwol/fv-button\";\nimport { Modal } from \"@youwol/fv-group\";\nimport { ImmutableTree } from \"@youwol/fv-tree\";\nimport { ConfigurationStatusView } from \"./configuration-status.view\";\nimport { DataTreeView } from \"./data-tree.view\";\nimport { ExpectationView } from \"./expectation.view\";\nimport { ModalView } from \"./modal.view\";\n\n\nexport namespace ContextView{\n\n\n    function nodeFactory(node: Context | Log | unknown) : NodeBase {\n\n        if( node instanceof window['@youwol/flux-core'].Context){\n            return new ContextNode({context: node as Context})\n        }\n        if( node instanceof window['@youwol/flux-core'].ErrorLog){\n            return new LogNodeError({log: node as Log})\n        }\n        if( node instanceof window['@youwol/flux-core'].WarningLog){\n            return new LogNodeWarning({log: node as Log})\n        }\n        if( node instanceof window['@youwol/flux-core'].InfoLog){\n            return new LogNodeInfo({log: node as Log})\n        }\n    }\n\n\n    class NodeBase extends ImmutableTree.Node{\n\n        constructor({id, children}:{id: string, children?:Array<NodeBase> | undefined}){\n            super({id, children})\n        }\n    }\n\n\n    class ContextNode extends NodeBase{\n\n        public readonly context: Context\n        constructor({context}: {context: Context}){\n            super({ id: context.id, children: context.children.map( node => nodeFactory(node)) })\n            this.context=context\n        }\n    }\n\n\n    class DataNodeBase extends NodeBase{\n\n        public readonly data: unknown\n\n        constructor({data} : {data:unknown}){\n            super({id:uuidv4()})\n            this.data = data\n        }\n    }\n\n\n    class LogNodeBase<T=unknown> extends NodeBase{\n\n        public readonly log: Log\n\n        constructor({log} : {log:Log}){\n            super({ id:log.id, children:log.data != undefined ? [new DataNodeBase({data:log.data})] : undefined })\n            this.log = log\n        }\n    }\n\n\n    class LogNodeInfo extends LogNodeBase{\n        constructor(d){ super(d) }\n    }\n\n\n    class LogNodeWarning extends LogNodeBase{\n        constructor(d){ super(d) }\n    }\n\n\n    class LogNodeError extends LogNodeBase{\n        constructor(d){ super(d) }\n    }\n\n\n    function nodePath(node: Context)  {\n        return node.parent ? nodePath(node.parent).concat([node.id]) : [node.id]\n    }\n\n    export class State extends ImmutableTree.State<NodeBase>{\n\n        public readonly tStart: number\n        public readonly tEnd: number\n        public readonly context: Context\n        public readonly rootCtx: Context\n\n        constructor({ context, expandedNodes, selectedNode }:\n            {   \n                context : Context, \n                expandedNodes: Array<string>,\n                selectedNode?: string\n            }){\n            super({\n                rootNode: nodeFactory(context.root()),\n                expandedNodes\n            })\n            this.rootCtx = context.root()\n            this.context = context \n            this.tStart = this.rootCtx.startTimestamp\n            this.tEnd = this.rootCtx.startTimestamp + this.rootCtx.elapsed()\n            selectedNode &&  this.selectedNode$.next(this.getNode(selectedNode))\n        }\n    }\n\n    type TOptions = {\n        containerClass?: string,\n        containerStyle?: {[key:string]: string},\n        treeViewClass?: string,\n        treeViewStyle?: {[key:string]: string}\n    }\n\n    export class View implements VirtualDOM{\n\n        static defaultOptions  = {\n            containerClass: 'p-4 fv-bg-background fv-text-primary',\n            containerStyle: { width: \"100%\", height: \"100%\"},\n            treeViewClass: 'h-100 overflow-auto',\n            treeViewStyle: {}\n        }\n        public readonly domId: string = 'contextView-view'\n        public readonly state: State\n        public readonly children: Array<VirtualDOM>\n\n        public readonly class: string\n        public readonly style: {[key:string]: string}\n\n        constructor({\n            state,\n            options,\n            ...rest \n        }\n        : {\n            state: State,\n            options?: TOptions\n        }){\n            Object.assign(this, rest)\n            this.state = state\n            let styling : TOptions = {...View.defaultOptions, ...(options ? options : {}) }\n            this.class = styling.containerClass\n            this.style = styling.containerStyle\n\n            let treeView = new ImmutableTree.View({\n                state,\n                headerView,\n                class:styling.treeViewClass,\n                style:styling.treeViewStyle,\n                options: {\n                    classes: { \n                        header: \"d-flex align-items-baseline fv-tree-header fv-hover-bg-background-alt \"\n                    }\n                }\n            } as any)\n\n            this.children = [\n                treeView\n            ]\n        }\n    }\n\n    export function reportContext(context: Context, nodeId?:string){\n\n        let state = new State({\n            context,\n            expandedNodes: nodeId ? nodePath(context).concat(nodeId) : nodePath(context),\n            selectedNode:  nodeId//errorLog.id\n        })\n        let view = new View({\n            state,\n        })\n        ModalView.popup({\n            view,\n            style: { 'max-height':'75vh', width:'75vw' },\n            options: {displayCancel:false, displayOk: false}\n\n        })\n    }\n\n    function headerView( state:State, node: NodeBase){\n        let heightBar = '3px'\n        if (node instanceof ContextNode){\n\n            let tStart = node.context.startTimestamp - state.rootCtx.startTimestamp\n            let left =  100 * tStart / (state.tEnd - state.tStart)\n            let width = 100 * node.context.elapsed() / (state.tEnd - state.tStart)\n            let elapsed = Math.floor(100 * node.context.elapsed()) / 100\n            let classes = {\n                [ContextStatus.FAILED] : \"fas fa-times fv-text-error\",\n                [ContextStatus.SUCCESS] : \"fas fa-check fv-text-success\",\n                [ContextStatus.RUNNING] : \"fas fa-cog fa-spin\",\n\n            }\n            return { \n                class:'w-100 pb-2',\n                children:[\n                    {   class: \"d-flex align-items-center\",\n                        children: [\n                            {\n                                tag: 'i',\n                                class: classes[node.context.status()]\n                            },                            \n                            {\n                                innerText: node.context.title +`  - ${elapsed} ms`, \n                                class: 'fv-pointer px-2',\n                                style: {'font-family': 'fantasy'}\n                        }]\n                    },\n                    {   class: 'fv-bg-success',\n                        style: {\n                            top: '0px',\n                            height:heightBar,\n                            width: width+'%',\n                            position:'absolute',\n                            left: left+'%'\n                        }\n                    }\n                ]\n            }\n        }\n        if (node instanceof LogNodeBase){\n\n            let tStart = node.log.timestamp - state.rootCtx.startTimestamp\n            let left =  100 * tStart / (state.tEnd - state.tStart)\n\n            let classes = 'fv-text-primary fas fa-info'\n            \n            if(node instanceof LogNodeError){\n                classes = 'fv-text-error fas fa-times'\n            }\n            if(node instanceof LogNodeWarning){\n                classes = 'fv-text-focus fas fa-exclamation'\n            }\n            return { \n                class:'pb-1 fv-pointer w-100',\n                children:[\n                    {\n                        class: 'd-flex align-items-center',\n                        children:[\n                            { class: classes},\n                            { innerText: node.log.text, class:'px-2'},\n                        ] \n                    },\n                    {   class: 'fv-bg-success rounded',\n                        style: {\n                            height:heightBar,\n                            width: heightBar,\n                            top: '0px',\n                            position:'absolute',\n                            left: `calc( ${left}% - 5px)`\n                        }\n                    }\n                ]\n            }\n        }\n        if (node instanceof DataNodeBase){\n\n            let views = Journal.getViews(node.data).map( view => view.view)\n            \n            if(views.length>0)\n                return {\n                    class: 'd-flex flex-grow-1',\n                    style:{'white-space': 'nowrap', \"min-width\":'0px'},\n                    children: \n                        views\n                }\n\n            let dataState = new DataTreeView.State({\n                title: \"\",\n                data: node.data,\n                expandedNodes:['_0']\n            })\n            return {\n                children: [\n                    new DataTreeView.View({state: dataState})\n                ]\n            }\n        }\n        return { innerText: \"unknown type\"}\n    }\n\n}","import {ImmutableTree} from '@youwol/fv-tree'\nimport { exception } from 'node:console'\nimport { BehaviorSubject, Observable, of } from 'rxjs'\nimport { map } from 'rxjs/operators'\n\n\nexport namespace DataTreeView{\n\n\n    function nodeFactory(\n        name: string, \n        data: string | number | boolean | Array<any> | Object | undefined,\n        nestedIndex: number\n        ): DataNode {\n    \n        if(data==undefined)\n            return new UndefinedNode({name, nestedIndex})\n    \n        if(typeof data == 'string')\n            return new StringNode({name, data, nestedIndex})\n        \n        if(typeof data == 'number')\n            return new NumberNode({name, data, nestedIndex})\n        \n        if(typeof data == 'boolean')\n            return new BoolNode({name, data, nestedIndex})\n    \n        if(typeof data == 'function')\n            return new FunctionNode({name, data, nestedIndex})\n    \n        if( Array.isArray(data))\n            return new ArrayNode({name, data, nestedIndex})\n          \n        if( data instanceof ArrayBuffer)\n            return new ArrayBufferNode({name, data, nestedIndex})\n          \n        if(typeof data == 'object')\n            return new ObjectNode({name, data, nestedIndex})\n    \n        return new UnknownNode({name, nestedIndex})           \n    }\n    \n    export class DataNode extends ImmutableTree.Node{\n\n        name: string\n        nestedIndex: number\n        classes: string\n\n        constructor(\n            {id, name, children, classes, nestedIndex} :\n            {id?: string, name: string, children?: Observable<Array<ImmutableTree.Node>> , classes:string, nestedIndex:number}){\n            super( {id: id ? id : `${name}_${nestedIndex}`, children}) // `${Math.floor(Math.random()*1e6)}`\n            this.name = name\n            this.classes = classes\n            this.nestedIndex = nestedIndex\n        }\n    }\n\n    export class UndefinedNode extends DataNode{\n\n        constructor({name, nestedIndex, id} : {name: string, nestedIndex:number, id?: string}){\n            super( {id, name, classes:\"fv-text-disabled\", nestedIndex} )\n        }\n    }\n\n    export class UnknownNode extends DataNode{\n\n        constructor({name, nestedIndex, id} : {name: string, nestedIndex:number, id?: string}){\n            super( {id, name, classes:\"\", nestedIndex} )\n        }\n    }\n\n    export class ValueNode<T> extends DataNode{ \n\n        data: T\n        classes: string\n\n        constructor({name, data, classes, nestedIndex, id} : {name: string, data: T, classes:string, nestedIndex:number, id?: string}){\n            super( {id, name, classes, nestedIndex} )\n            this.data = data\n        }\n    }\n\n    export class NumberNode extends ValueNode<number>{\n        constructor({name, data, nestedIndex, id} : {name: string, data: number, nestedIndex:number, id?: string}){\n            super( {id, name, data, classes:\"cm-number\", nestedIndex} )\n        }\n    }\n\n    export class StringNode  extends ValueNode<string>{\n        constructor({name, data, nestedIndex, id} : {name: string, data: string, nestedIndex:number, id?: string}){\n            super( {id, name, data, classes:\"cm-string\", nestedIndex} )\n        }\n    }\n\n    export class BoolNode extends ValueNode<boolean>{\n\n        constructor({name, data, nestedIndex, id} : {name: string, data: boolean, nestedIndex: number, id?: string}){\n            super( {id, name, data, classes:\"cm-atom\", nestedIndex} )\n        }\n    }\n\n    export class ArrayBufferNode  extends ValueNode<ArrayBuffer>{\n        constructor({name, data, nestedIndex, id} : {name: string, data: ArrayBuffer, nestedIndex:number, id?: string}){\n            super( {id, name, data, classes:\"cm-string\", nestedIndex} )\n        }\n    }\n\n    export class FunctionNode extends DataNode{\n\n        data: any\n        constructor({name, data, nestedIndex, id} : {name: string, data: any, nestedIndex, id?: string}){\n            super( {id, name, classes:\"cm-def\", nestedIndex} )\n            this.data = data\n        }\n    }\n\n    export class ObjectNode extends DataNode{\n\n        getChildrenNodes(object:Object){\n            \n            let attributes = []\n            for (var key in object) {\n                attributes.push(nodeFactory(key, object[key], this.nestedIndex+1) )\n            }\n            let functions = []\n            try{\n                functions = Object.entries(object['__proto__']).map( ([k,v]) => new FunctionNode({name:k,data:v, nestedIndex: this.nestedIndex+1}))\n            }\n            catch(error){\n            }\n            return [...attributes, ...functions]\n        }\n\n        data: Object\n        constructor({name, data, nestedIndex, id} : {name: string, data: Object, nestedIndex:number, id?: string}){\n            super( { \n                id,\n                name, \n                children: of(data).pipe( map( (data)=> this.getChildrenNodes(data) )),\n                classes: \"\",\n                nestedIndex\n            })\n            this.data = data\n        }\n    }\n\n    export class ArrayNode extends DataNode{\n\n        data: Array<any>\n        constructor({name, data, nestedIndex, id} : {name: string, data: Array<any>, nestedIndex:number, id?: string}){\n            super( {\n                id, \n                name, \n                children: of(data).pipe( map( (data)=> Object.entries(data).map( ([k,v]) => nodeFactory(`${k}`,v, nestedIndex+1)))),\n                classes:\"\",\n                nestedIndex\n            } )\n            this.data = data\n        }\n    }\n\n    export class State extends ImmutableTree.State<DataNode>{\n\n        public readonly stringLengthLimit\n    \n        constructor({\n                title,\n                data, \n                expandedNodes,\n                ...rest\n            }: \n            {   title: string,\n                data:any,\n                expandedNodes?: Array<string> | BehaviorSubject<Array<string>>\n            } ){\n            super({\n                rootNode: nodeFactory(title, data, 0),\n                expandedNodes: expandedNodes,\n                ...rest\n            })\n        }\n    }\n    \n    type TOptions = {\n        stringLengthLimit?: number,\n        containerClass?: string,\n        containerStyle?: {[key:string]: string},\n    }\n\n    export class View extends ImmutableTree.View<DataNode>{\n\n        static defaultOptions  = {\n            containerClass: 'cm-s-blackboard',\n            containerStyle: {'white-space': 'nowrap'},\n        }\n\n        static getStyling( options ) : TOptions {\n            return {...View.defaultOptions, ...(options ? options : {}) } \n        }\n        constructor({\n            state,\n            options,\n            ...rest\n        }:\n        {\n            state: State,\n            options?: TOptions\n        }){\n            super({\n                state,\n                headerView: dataNodeHeaderView,\n                class: View.getStyling(options).containerClass,\n                style: View.getStyling(options).containerStyle,\n                ...rest\n            } as any)\n        }\n    }\n\n\n    export function dataNodeHeaderView(state: State, node:DataNode ){\n\n        if(node instanceof UnknownNode)\n            return {\n                class:'d-flex fv-text-disabled flex-wrap',\n                innerText: node.name\n            }\n        let content = \"\"\n        if(node instanceof ValueNode){\n            content = String(node.data)\n            if(typeof node.data=='string')\n                content= \"'\"+content+\"'\"\n        }\n\n        if(node instanceof UndefinedNode)\n            content = 'undefined'\n\n        if(node instanceof FunctionNode){\n            content = `f(${node.data.length} arg(s))`\n        }\n\n        if(node instanceof ObjectNode)\n            content = '{...}'\n        \n        if(node instanceof ArrayNode)\n            content = '[...]'\n\n        if(node instanceof ArrayBufferNode)\n            content = `Array Buffer (${node.data.byteLength} bytes)`\n\n        return {\n            class:'d-flex fv-pointer',\n            children:[\n                {\n                    innerText: node.name\n                },\n                {   \n                    class:'px-2 w-100 '+node.classes,\n                    innerHTML: `<i>${content}</i>`,\n                    style:{\n                        \"white-space\":\"nowrap\",\n                        overflow:\"hidden\",\n                        \"text-overflow\":\"ellipsis\",\n                        //\"max-width\": `${state.stringLengthLimit * 10}px`\n                    }\n                }\n            ]\n        }  \n    }\n}\n\n","import { AllOf, AnyOf, Contract, ExpectationStatus, Of, OptionalsOf, uuidv4 } from \"@youwol/flux-core\";\nimport { VirtualDOM } from \"@youwol/flux-view\";\nimport { ImmutableTree } from \"@youwol/fv-tree\";\nimport { BehaviorSubject } from \"rxjs\";\nimport { DataTreeView } from \"./data-tree.view\";\n\n\nexport namespace ExpectationView{\n\n\n    export class ExpectationNode extends ImmutableTree.Node{\n\n        public readonly name: string\n        public readonly isRealized: boolean\n        public readonly evaluatedFrom: unknown\n\n        constructor({name,children, isRealized, evaluatedFrom}){\n            super({id: uuidv4(),children})\n            this.name = name\n            this.isRealized = isRealized\n            this.evaluatedFrom = evaluatedFrom\n        }\n    }\n\n\n    export class AnyOfNode extends ExpectationNode{\n        constructor({name,children, isRealized, evaluatedFrom}){\n            super({name, children, isRealized, evaluatedFrom})\n        }\n    }\n\n\n    export class AllOfNode extends ExpectationNode{\n        constructor({name,children, isRealized, evaluatedFrom}){\n            super({name, children, isRealized, evaluatedFrom})\n        }\n    }\n\n\n    export class OfNode extends ExpectationNode{\n        constructor({name,children, isRealized, evaluatedFrom}){\n            super({name, children, isRealized, evaluatedFrom})\n        }\n    }\n\n\n    export function parseReport( rootStatus : ExpectationStatus<any>){\n\n        let parseNode = (status : ExpectationStatus<any>) => {\n\n            let nodeChildren =  status.children && status.children.length > 0 \n                ? status.children.map( node => parseNode(node))\n                : undefined\n            let dataNode = new DataTreeView.ObjectNode({\n                id: uuidv4(),\n                name:'evaluated-with', \n                data:status.fromValue, \n                nestedIndex:0\n            })\n            if( nodeChildren && status.succeeded != undefined && !(status.expectation instanceof Contract) )\n                nodeChildren = [dataNode, ...nodeChildren ]\n            if(status.expectation instanceof Contract)\n                return new ExpectationNode({name: status.expectation.description, children: nodeChildren, \n                    isRealized: status.succeeded, evaluatedFrom: status.fromValue})\n\n            if(status.expectation instanceof AnyOf)\n                return new AnyOfNode({name:  status.expectation.description, children: nodeChildren, \n                    isRealized: status.succeeded, evaluatedFrom: status.fromValue})\n\n            if(status.expectation instanceof AllOf)\n                return new AllOfNode({name: status.expectation.description, children: nodeChildren,\n                    isRealized: status.succeeded, evaluatedFrom: status.fromValue})\n\n            if(status.expectation instanceof Of )\n                return new OfNode({name:  status.expectation.description, children: nodeChildren, \n                    isRealized: status.succeeded, evaluatedFrom: status.fromValue})\n            \n            if(status.expectation instanceof OptionalsOf )\n                return new AnyOfNode({name:  status.expectation.description, children: nodeChildren, \n                    isRealized: status.succeeded, evaluatedFrom: status.fromValue})\n                    \n            return new ExpectationNode({\n                name: status.expectation.description, \n                children: nodeChildren, \n                isRealized: status.succeeded != undefined ? status.succeeded: undefined,\n                evaluatedFrom: status.fromValue})\n        }\n\n        return parseNode(rootStatus)\n    }\n\n\n    export class ExecutionError{\n        constructor(public readonly message:string, public readonly row: number, public readonly col: number){}\n    }\n\n\n    export function parseError(stack:string): ExecutionError{\n\n        try{\n            let lines = stack.split('\\n')\n            let message = lines[0]\n            lines = lines.filter( line => line.includes('eval') && line.split(',').length==2)\n            if(lines.length==0){\n                return new ExecutionError(message, undefined, undefined)\n            }\n            let p = lines[0].split(',')[1].split('<anonymous>:')[1].split(')')[0]\n            let [row,col] = [ Number(p.split(':')[0]) - 2, Number(p.split(':')[1]) ]\n            return new ExecutionError(message, row, col)\n        }\n        catch(e){\n            return new ExecutionError(\"Unidentified error\", undefined, undefined)\n        }\n    }\n\n\n\n    export class State{\n\n        public readonly status: ExpectationStatus<any>\n        public readonly treeStateRequired :  ImmutableTree.State<ExpectationNode>\n        public readonly treeStateOptionals :  ImmutableTree.State<ExpectationNode>\n        constructor( {\n            status,\n            expandedNodes$\n        }:{\n            status: ExpectationStatus<any>,\n            expandedNodes$?: BehaviorSubject<Array<string>>\n        }){\n            \n            this.status = status\n\n            let treeNode = parseReport(this.status)\n            let requiredRootNode = treeNode.children && treeNode.children.length > 0 \n                ? treeNode.children[0] \n                : new ExpectationNode({name:'No required conditions defined', children:undefined, isRealized:true, evaluatedFrom:undefined})\n                \n            this.treeStateRequired = new ImmutableTree.State({\n                rootNode: requiredRootNode,\n                expandedNodes:expandedNodes$\n            })\n\n            let optionalRootNode = treeNode.children && treeNode.children.length > 1 \n                ? treeNode.children[1] \n                : new ExpectationNode({name:'No optional conditions defined', children:undefined, isRealized:true, evaluatedFrom:undefined})\n\n            this.treeStateOptionals = new ImmutableTree.State({\n                rootNode: optionalRootNode,\n                expandedNodes:expandedNodes$\n            })\n        }\n    }\n\n    type TOptions = {\n        containerClass?: string,\n        containerStyle?: {[key:string]: string},\n    }\n\n    export class View implements VirtualDOM {\n\n        static defaultOptions  = {\n            containerClass: 'd-flex flex-column',\n            containerStyle: { 'min-height':'0px'},\n        }\n\n        public readonly state: State\n        public readonly class: string\n        public readonly style: {[key: string]: string}\n        public readonly children: Array<VirtualDOM>\n\n        constructor({\n            state,\n            options,\n            ...rest\n        }:\n        {\n            state: State,\n            options?: TOptions\n        }) {\n            Object.assign(this, rest)\n            let styling : TOptions = {...View.defaultOptions, ...(options ? options : {}) }\n            this.state = state\n            this.class = styling.containerClass\n            this.style = styling.containerStyle\n\n            this.children = [\n                {\n                    class:'d-flex align-items-center',\n                    children:[\n                        {\n                            class: this.state.status.succeeded ? 'fas fa-check fv-text-success' : 'fas fa-times fv-text-error',\n                            style:{'min-width':'25px'}\n                        },\n                        {   class: 'px-2', innerText: this.state.status.expectation.description }\n                    ]                \n                },\n                {\n                    class:'pl-2 flex-grow-1 overflow-auto ', style:{'min-height':'0px'},\n                    children:[\n                        {\n                            class:'pl-2',\n                            children:[\n                                new ImmutableTree.View({\n                                    state:this.state.treeStateRequired, \n                                    headerView\n                                }),                \n                                new ImmutableTree.View({\n                                    state:this.state.treeStateOptionals, \n                                    headerView\n                                }),\n                            ]\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n    export function journalWidget(data: ExpectationStatus<unknown>) : VirtualDOM {\n\n        let dataState = new DataTreeView.State({\n            title: \"incoming data\",\n            data: data.fromValue,\n            expandedNodes: [\"incoming data_0\"]\n        })\n\n        let expectationState = new ExpectationView.State({\n            status: data\n        })\n        \n        return {\n            children:[\n                {\n                    class: 'd-flex justify-content-around w-100',\n                    style:{'white-space': 'nowrap'},\n                    children: [\n                        new DataTreeView.View({state: dataState}),\n                        {class:'px-4'},\n                        new ExpectationView.View({ state: expectationState })\n                    ]\n                }\n            ]\n        }\n    }\n\n\n    function headerView(_: ImmutableTree.State<ExpectationNode>, node: ExpectationNode) {\n\n        if( node instanceof DataTreeView.DataNode){\n            return DataTreeView.dataNodeHeaderView( undefined, node)\n        }\n\n        let classes = \"\"\n        if(node.isRealized)\n            classes = \"fv-text-success\"\n        //if(node.isRealized==false)\n        //    classes = \"fv-text-error\"\n        if(node.isRealized==undefined)\n            classes = \"fv-text-disabled\"\n            \n        let icon = \"\"\n        if(node.isRealized)\n            icon = \"fas fa-check fv-text-success px-1\"\n        if(node.isRealized==false)\n            icon = \"fas fa-times fv-text-error px-1\"\n\n        if(node instanceof AllOfNode){\n            return {\n                class: 'd-flex align-items-center',\n                children:[\n                    { class :classes + \" \"+icon},\n                    { innerText: node.name, class:'fv-text-primary px-2'},\n                    { tag:'i', class:'fv-text-primary', innerText: \"All of the following:\"}]\n            }\n        }\n\n        if(node instanceof AnyOfNode){\n            return {\n                class: 'd-flex align-items-center',\n                children:[\n                    { class :classes + \" \"+icon},\n                    { innerText: node.name, class:'fv-text-primary px-2'},\n                    { tag:'i', class:'fv-text-primary', innerText: \"Any of the following:\"}]\n            }\n        }\n\n        if(node instanceof OfNode){\n            return {\n                class:'d-flex flex-align-items-center ',\n                children:[\n                    { class: icon},\n                    { innerText: node.name, class:classes }\n                ]\n            }\n        }\n\n        return {\n            class:'d-flex flex-align-items-center ',\n            children:[\n                { class: icon},\n                { innerText: node.name, class:classes }\n            ]\n        }\n    }\n}","import { child$, render, VirtualDOM } from \"@youwol/flux-view\"\nimport { Button } from \"@youwol/fv-button\"\nimport { Modal } from \"@youwol/fv-group\"\nimport { BehaviorSubject, Subject } from \"rxjs\"\nimport { scan } from \"rxjs/operators\"\nimport { AppStore } from \"../builder-state\"\nimport { AssetsExplorerView } from \"./assets-explorer.view\"\nimport { ModalView } from \"./modal.view\"\n\n\n\nexport namespace ImportModulesView{\n\n    class State{\n\n        buffer$ = new BehaviorSubject<Array<AssetsExplorerView.ModuleItemNode>>([])\n        ok$ : Subject<MouseEvent>\n        explorerState:  AssetsExplorerView.State\n\n        constructor({\n            ok$\n        }:{\n            ok$: Subject<MouseEvent>\n        }){\n            this.ok$ = ok$\n            this.explorerState = AssetsExplorerView.singletonState\n            this.explorerState.selectionBuffer$ = this.buffer$\n        }\n    }\n\n\n    type TOptions = {\n        containerClass?: string,\n        containerStyle?: {[key:string]: string}\n    }\n\n\n    export class View implements VirtualDOM{\n\n        static defaultOptions  = {\n            containerClass: 'h-100 w-100 p-3 rounded d-flex solid rounded',\n            containerStyle: {},\n        }\n\n        public readonly state: State\n        public readonly class: string\n        public readonly style: {[key:string]: string}\n        public readonly options: TOptions\n        \n        public readonly children: Array<VirtualDOM>\n        public readonly connectedCallback: (elem) => void\n\n        constructor({\n            state,\n            options,\n            ...rest\n        }:\n        {\n            state: State,\n            options?: TOptions\n        }) {\n            Object.assign(this, rest)\n            this.options = {...View.defaultOptions, ...(options ? options : {}) }\n            this.state = state\n            this.class = this.options.containerClass\n            this.style = this.options.containerStyle\n\n            this.children = [\n                this.bufferColumnView(),\n                this.explorerView()\n            ]\n\n            this.connectedCallback = (elem) =>{\n\n                elem.subscriptions.push(\n                    this.state.explorerState.selection$.pipe( \n                        scan( (acc, {node,selected}) => [...acc.filter( e => e != node), ...(selected?[node]:[])], [])\n                    ).subscribe( d => this.state.buffer$.next(d))\n                )    \n            }\n        }\n\n        bufferColumnView(){\n            \n            let okBttnView = new Button.View({\n                state: new Button.State(this.state.ok$),\n                contentView: ()=> ({innerText:'Import'}),\n                class:\"fv-btn fv-btn-primary fv-bg-focus\"\n            } as any)\n                \n            return {\n                class: 'px-2 d-flex flex-column w-25', style:{width:'200px'},\n                children:[\n                    { \n                        class:'w-100 text-center',\n                        innerText: 'selection buffer', \n                        style:{'font-family': 'fantasy'}\n                    },\n                    child$(\n                        this.state.buffer$,\n                        (nodes) => {\n                            if (nodes.length > 0) {\n                                return {\n                                    class: 'd-flex flex-column flex-grow-1 overflow-auto',\n                                    children: nodes.map( node => ({\n                                        class: 'd-flex align-items-center',\n                                        children:[\n                                            {   innerText: node.name },\n                                            { \n                                                class: 'fas fa-times px-2 yw-hover-opacity yw-pointer',\n                                                onclick: () => {\n                                                    this.state.explorerState.selection$.next({node, selected: false}) \n                                                }\n                                            }\n                                        ]                                \n                                    }))\n                                }\n                            }\n                            return { \n                                tag:'div', class:'py-2',\n                                innerText:'Pick one or more module(s) using the tabs on the right side to add them in your worksheet',\n                                style: {'font-style': 'italic', 'text-align': 'justify'}\n                            }\n                        }\n                    ),      \n                    child$(      \n                        this.state.buffer$,\n                        (nodes) => nodes.length>0 ? okBttnView : {}\n                    )\n                ]\n            }\n        }\n\n        explorerView(){\n\n            let view = new AssetsExplorerView.View( {\n                state: this.state.explorerState,\n                class: 'h-100'\n            }as any)\n        \n            return {\n                class:'h-100 overflow-auto w-75 border rounded',\n                children: [\n                    view\n                ]\n            }\n        }\n    }\n    \n    export function popupModal(\n        appStore: AppStore,\n        onImport: (Factory)=> void \n        ) {\n        let import$ = new Subject<MouseEvent>()\n        let state = new State({\n            ok$:import$\n        })\n        let view =  new View({state:state})\n\n        ModalView.popup({\n            view,\n            ok$: import$,\n            options: {displayOk: false, displayCancel: false}\n        }).subscribe( () => {\n            onImport(state.buffer$.getValue())\n        })\n    }\n\n}","export * from './adaptor-editor.view'\nexport * from './assets-explorer.view'\nexport * from './code-editor.view'\nexport * from './code-property-editor.view'\nexport * from './configuration-status.view'\nexport * from './context.view'\nexport * from './data-tree.view'\nexport * from './expectation.view'\nexport * from './import-modules.view'\nexport * from './info.view'\nexport * from './input-status.view'\nexport * from './share-uri.view'","import { child$ } from \"@youwol/flux-view\"\nimport { BehaviorSubject } from \"rxjs\"\n\n\nexport function infoView(text: string){\n\n    let infoToggled$ = new BehaviorSubject(false)\n    return child$(\n        infoToggled$,\n        (toggled) => {\n            return {\n                class:'p-1 d-flex',\n                children:[\n                    {   tag:'i', \n                        class:'fas fa-info fv-hover-bg-background-alt p-1 fv-pointer rounded ' \n                            + (toggled ? 'fv-bg-background-alt' : ''),\n                        onclick: () => infoToggled$ .next(!infoToggled$.getValue())\n                    },\n                    toggled \n                        ? { class:'p-1 px-2 fv-bg-background-alt rounded', style:{'text-align': 'justify', 'font-style':'italic'},\n                        innerText: text\n                        }\n                        : {}\n                ]\n            }\n        }\n    )\n}\n","import { ConfigurationStatus, ConsistentConfiguration, ExpectationStatus, IExpectation, mergeConfiguration, ModuleFlux, \n    InconsistentConfiguration, \n    Context} from \"@youwol/flux-core\";\nimport { VirtualDOM } from \"@youwol/flux-view\";\nimport { Tabs } from \"@youwol/fv-tabs\";\nimport { BehaviorSubject, Observable } from \"rxjs\";\nimport { ConfigurationStatusView } from \"./configuration-status.view\";\nimport { ExpectationView } from \"./expectation.view\";\n\n\n\n\nexport namespace InputStatusView{\n\n\n    class  DataTab extends Tabs.TabData{\n        constructor(){super('data', 'data')}\n    }\n    class ConfigTab extends Tabs.TabData{\n        constructor(){super('configuration', 'configuration')}\n    }\n\n\n    export class State{\n\n        public readonly configStatus: ConfigurationStatus<any>\n        public readonly dataStatus: ExpectationStatus<unknown>\n        \n        public readonly selectedTabId$ : BehaviorSubject<string>\n        public readonly tabState : Tabs.State\n\n        constructor({\n            mdle,\n            adaptedInput,\n            contract,\n            selectedTabId$\n        }:{\n            mdle: ModuleFlux,\n            contract: IExpectation<unknown>,\n            adaptedInput : {data, configuration, context},\n            selectedTabId$?: BehaviorSubject<string>\n        }){\n\n            this.selectedTabId$ = selectedTabId$ ||new BehaviorSubject<string>(\"data\")\n            this.tabState = new Tabs.State([new DataTab(), new ConfigTab()],selectedTabId$)\n\n            this.configStatus = mergeConfiguration( mdle.configuration.data, adaptedInput.configuration)\n            let context = new Context(\"\",{})\n            this.dataStatus = contract.resolve(adaptedInput.data, context)\n        }\n    }\n\n\n    type TOptions = {\n        containerClass?: string,\n        containerStyle?: {[key:string]: string}\n    }\n\n\n    export class View implements VirtualDOM{\n\n        static defaultOptions  = {\n            containerClass: 'h-100 w-100',\n            containerStyle: {}\n        }\n\n        public readonly state: State\n        public readonly class: string\n        public readonly style: {[key:string]: string}\n        public readonly children: Array<VirtualDOM>\n        public readonly options: TOptions\n\n        constructor({\n            state,\n            options,\n            ...rest\n        }: {\n            state: State,\n            options?: TOptions\n        }){\n            Object.assign(this, rest)\n\n            this.options = {...View.defaultOptions, ...(options ? options : {}) }\n            this.state = state\n            this.class = this.options.containerClass\n            this.style = this.options.containerStyle \n\n            \n            let expandedNodesExpectation$ =  new BehaviorSubject<Array<string>>(['optional', 'required'])\n                    \n            let tabView = new Tabs.View({\n                state: this.state.tabState,\n                contentView: (state, data) => { \n                    if(data instanceof DataTab){\n        \n                        let state = new ExpectationView.State({\n                            status: this.state.dataStatus,\n                            expandedNodes$: expandedNodesExpectation$\n                        })\n                        return new ExpectationView.View({state})\n                    }\n        \n                    if(data instanceof ConfigTab){\n        \n                        let state = new ConfigurationStatusView.State({\n                            status: this.state.configStatus\n                        })\n                        return new ConfigurationStatusView.View({state})\n                    }\n                },\n                headerView: (state, data) => { \n        \n                    if(data instanceof DataTab)\n                        return dataHeaderView(this.state.dataStatus)\n        \n                    if(data instanceof ConfigTab)\n                        return configurationHeaderView(this.state.configStatus)\n        \n                    return {innerText:data.name, class:\"px-2\"}\n                },\n                class:'h-100 d-flex flex-column', style:{'min-height':'0px'},\n                options:{\n                    containerStyle:{'min-height':'0px'},\n                    containerClass: 'p-2 border flex-grow-1 overflow-auto'\n                }\n            }as any)\n\n            this.children= [tabView]\n        }\n    }\n\n    function dataHeaderView(status: ExpectationStatus<any>){\n    \n        let classes = 'fas fa-check fv-text-success px-1'\n        if(!status)\n            classes = 'fas fa-question px-1'\n        else if(!status.succeeded)  \n            classes = 'fas fa-times fv-text-error px-1'\n        return {\n            class:'d-flex align-items-center px-2',\n            children:[\n                { class: classes},\n                { innerText: 'data'}\n            ]\n        }\n    }\n\n    function configurationHeaderView(status: ConfigurationStatus<unknown>){\n\n        let icon = {}\n        if (status instanceof InconsistentConfiguration)\n            icon = { class:'fas fa-times fv-text-error px-1'}\n        if (status instanceof ConsistentConfiguration &&  status.intrus.length>0)\n            icon = { class:'fas fa-exclamation fv-text-danger px-1'}\n        if (status instanceof ConsistentConfiguration &&  status.intrus.length==0)\n            icon = { class:'fas fa-check fv-text-success px-1'}  \n        \n        return {\n            class:'d-flex align-items-center px-2',\n            children:[\n                icon,\n                {innerText: 'configuration'}\n            ]\n        }\n    }\n}","import { ModuleFlux, Journal } from \"@youwol/flux-core\";\nimport { child$, VirtualDOM } from \"@youwol/flux-view\";\nimport { Select } from \"@youwol/fv-input\";\nimport { BehaviorSubject } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { ContextView } from \"./context.view\";\nimport { ModalView } from \"./modal.view\";\n\n\nexport namespace JournalsView{\n\n    export class State{\n\n        public readonly module: ModuleFlux\n        \n        constructor({ module}: {\n            module: ModuleFlux\n        }){\n            this.module = module\n        }\n    }\n\n    type TOptions = {\n        containerClass?: string,\n        containerStyle?: {[key:string]: string},\n    }\n\n    export class View implements VirtualDOM{\n\n        static defaultOptions : TOptions = {\n            containerClass: 'd-flex flex-column p-3',\n            containerStyle: { 'min-height':'0px'},\n        }\n\n        public readonly state: State\n        public readonly class: string\n        public readonly style: {[key: string]: string}\n        public readonly children: Array<VirtualDOM>\n\n        connectedCallback : (elem) => void\n\n        constructor({\n            state,\n            ...rest\n        }:\n        {\n            state: State,\n        }) {\n            Object.assign(this, rest)\n            this.state = state\n            this.class = this.class || View.defaultOptions.containerClass\n            this.style = this.style || View.defaultOptions.containerStyle\n\n            if( this.state.module.journals.length == 0) {\n                this.children = [\n                    this.noJournalsAvailableView()\n                ]\n                return \n            }\n            if( this.state.module.journals.length == 1 ){\n                this.children = [\n                    this.journalView(this.state.module.journals[0])\n                ]\n                return \n            }\n\n            let journalSelected$ = new BehaviorSubject<string>(this.state.module.journals[0].title)\n            this.children = [\n                this.selectJournalView(journalSelected$),\n                child$(\n                    journalSelected$.pipe(\n                        map( title => this.state.module.journals.find( journal => journal.title == title))\n                    ),\n                    (journal: Journal ) => this.journalView(journal)\n                )\n            ]\n\n        }\n\n\n        noJournalsAvailableView() : VirtualDOM {\n            return {\n                innerText: 'The module does not contains journals yet, it is likely that it did not run already.'\n            }\n        }\n\n        selectJournalView(journalSelected$ : BehaviorSubject<string>) : VirtualDOM {\n\n            let items = this.state.module.journals.map( (journal: Journal) => {\n                return new Select.ItemData(journal.title, journal.title)\n            })\n            let state = new Select.State(items, journalSelected$)\n            return {\n                class:'d-flex align-items-center py-2',\n                children: [\n                    { innerText: 'Available reports:', class:'px-2'},\n                    new Select.View({state}) \n                ] \n            }\n        }\n\n\n        journalView( journal: Journal ) : VirtualDOM {\n\n            let state = new ContextView.State(\n                {   context: journal.entryPoint, \n                    expandedNodes: [journal.entryPoint.id]\n                }\n            )\n            return {\n                class:\"h-100 d-flex flex-column\",\n                children: [\n                    {   class: 'd-flex align-items-center justify-content-center',\n                        children: [\n                            {\n                                tag:'i',\n                                class: 'fas fa-newspaper fa-2x px-3'\n                            },\n                            {\n                                class:'text-center py-2',\n                                style: {'font-family': 'fantasy', 'font-size': 'larger'},\n                                innerText: journal.title \n                            } \n                        ]\n                    },\n                    new ContextView.View({\n                        state,\n                        options:{\n                            containerClass:'p-4 flex-grow-1 overflow-auto'\n                        }})\n                ]\n            }\n        }\n    }\n\n    export function popupModal({\n        module\n    }: {\n        module: ModuleFlux\n    }){\n\n        let state = new State({module})\n        let view = new View({state})\n        \n        ModalView.popup({\n            view,\n            style: { 'max-height':'75vh', width:'75vw' },\n            options: {displayCancel:false, displayOk: false}\n        }).subscribe( () => {\n        })\n    }\n}","import { render, VirtualDOM } from \"@youwol/flux-view\"\nimport { Button } from \"@youwol/fv-button\"\nimport { Modal } from \"@youwol/fv-group\"\nimport { merge, Observable, Subject } from \"rxjs\"\n\n\nexport namespace ModalView{\n        \n    export function popup({\n        view,\n        style,\n        ok$,\n        options\n    }: {\n        view: VirtualDOM,\n        ok$?: Subject<MouseEvent>,\n        style?: {[key:string]: string},\n        options?: {displayOk: boolean, displayCancel: boolean}\n    }\n    ): Observable<MouseEvent>{\n\n        options = options || {displayOk:true, displayCancel: true}\n\n        let okBttn = new Button.View({\n            state: new Button.State(),\n            contentView: () => ({ innerText: 'Ok'}),\n            class: \"fv-btn fv-btn-primary fv-bg-focus mr-2\"\n        } as any)\n\n        let cancelBttn = Button.simpleTextButton('Cancel')\n        \n        let modalState = new Modal.State(ok$)\n        let modalDiv = render(\n            new Modal.View({\n                state: modalState,\n                contentView: () => {\n                    return {\n                        class:'border rounded fv-text-primary fv-bg-background d-flex flex-column',\n                        style: style ? style : { height:'50vh', width:'50vw', 'max-width':'1500px'},\n                        children:[\n                            view,\n                            {\n                                class:'d-flex p-2',\n                                children:[\n                                    options.displayOk ? okBttn : undefined,\n                                    options.displayCancel ? cancelBttn : undefined\n                                ].filter(d => d)\n                            }\n                        ]\n                    }\n                },\n                connectedCallback: (elem) => {\n                    let subs = [\n                        okBttn.state.click$.subscribe( () => modalState.ok$.next()),\n                        cancelBttn.state.click$.subscribe( () => modalState.cancel$.next()),\n                        merge(modalState.cancel$, modalState.ok$ ).subscribe( () => modalDiv.remove() )\n                    ]\n                    elem.subscriptions = [...elem.subscriptions, ...subs]\n                }\n            }as any)\n        )\n\n        document.querySelector(\"body\").appendChild(modalDiv)\n        return modalState.ok$\n    }\n}","import { flattenSchemaWithValue, ModuleConfiguration, ModuleFlux } from \"@youwol/flux-core\"\nimport { child$, HTMLElement$, VirtualDOM } from \"@youwol/flux-view\"\nimport { BehaviorSubject, Subscription } from \"rxjs\"\nimport { filter, withLatestFrom } from \"rxjs/operators\"\nimport { AppStore } from \"../builder-state\"\nimport { AutoForm } from \"./auto-form.view\"\nimport { CodePropertyEditorView } from \"./code-property-editor.view\"\n\n\n\nfunction codeEditorView(\n    faClass: string,\n    mdle: ModuleFlux, \n    value$: BehaviorSubject<string>, \n    description:AutoForm.ValueDescription\n    ){\n        let editorConfiguration = description.metadata.editorConfiguration || {}\n        return {\n            class: `${faClass} fv-pointer fa-2x fv-hover-bg-background`,\n            onclick: () => CodePropertyEditorView.popupModal({\n                mdle: mdle,\n                initialCode: value$.getValue(),\n                editorConfiguration,\n                onUpdate : (content) => value$.next(content)\n            })\n        }\n}\n\nlet elementViewsFactory = (mdle: ModuleFlux) => [\n    {\n        test: (value: AutoForm.ValueDescription) => {\n            return value.metadata && value.metadata.type == \"code\" &&\n                (!value.metadata.editorConfiguration || value.metadata.editorConfiguration.mode == 'javascript')\n        },\n        view: (value$: BehaviorSubject<string>, description:AutoForm.ValueDescription ) => {\n            return codeEditorView(\"fab fa-js-square\", mdle, value$, description)\n        }\n    },\n    {\n        test: (value: AutoForm.ValueDescription) => {\n            return value.metadata && value.metadata.type == \"code\" &&\n            value.metadata.editorConfiguration.mode == 'css'\n        },\n        view: (value$: BehaviorSubject<string>, description:AutoForm.ValueDescription) => {\n            return codeEditorView(\"fab fa-css3-alt\", mdle, value$, description)\n        }\n    },\n    {\n        test: (value: AutoForm.ValueDescription) => {\n            return value.metadata && value.metadata.type == \"code\" &&\n            (   value.metadata.editorConfiguration.mode == 'html' ||\n                value.metadata.editorConfiguration.mode == 'htmlmixed' ||\n                value.metadata.editorConfiguration.mode == 'xml'\n            )\n\n        },\n        view: (value$: BehaviorSubject<string>, description:AutoForm.ValueDescription) => {\n            return codeEditorView(\"fab fa-html5\", mdle, value$, description)\n        }\n    },\n    ...AutoForm.viewFactory\n]\n\nexport class ModuleSettingsState{\n\n    public readonly onTheFlyUpdates$ = new BehaviorSubject<boolean>(true)\n    public readonly autoFormState : AutoForm.State\n    public readonly initialSettings$ : BehaviorSubject<any>\n\n    subscriptions : Subscription[]\n    \n    constructor(\n        public readonly mdle: ModuleFlux, \n        public readonly appStore: AppStore\n        ){\n\n        let schemaWithValue = flattenSchemaWithValue(mdle.configuration.data)\n        Object.keys(schemaWithValue).forEach( k => schemaWithValue[k] = schemaWithValue[k][0])\n\n        let configurationIn$ = new BehaviorSubject<Object>(mdle.configuration.data)\n        this.initialSettings$ = new BehaviorSubject(mdle.configuration.data)\n\n        this.autoFormState = new AutoForm.State(\n            configurationIn$, \n            schemaWithValue as any,\n            elementViewsFactory(mdle)\n            )\n        let sub = this.autoFormState.currentValue$.pipe(\n            withLatestFrom( this.onTheFlyUpdates$),\n            filter( ([_, onTheFly]) => onTheFly),\n            filter( ([value]) => JSON.stringify(value) != JSON.stringify(this.initialSettings$.getValue()) )\n        )\n        .subscribe( () => this.applySettings())\n\n        this.subscriptions = [sub]\n    }\n\n    toggleUpdatePolicy(){\n        this.onTheFlyUpdates$.next(!this.onTheFlyUpdates$.getValue())\n    }\n\n    applySettings(title: string = undefined){\n        let values = this.autoFormState.currentValue$.getValue()\n        \n        let persistentData = new this.mdle.Factory.PersistentData(values)\n        let conf = new ModuleConfiguration({\n            title: title ? title : this.mdle.configuration.title,\n            description: this.mdle.configuration.description,\n            data: persistentData})\n\n        this.initialSettings$.next(values)\n        this.appStore.updateModule(this.mdle, conf, false)\n    }\n}\n\nexport class ModuleSettingsView implements VirtualDOM{\n\n    public readonly class = \"h-100 d-flex flex-column\"\n    public readonly children: VirtualDOM[]\n    public readonly style = { fontSize:'smaller'}\n\n    connectedCallback?: (d: HTMLElement$) => void\n\n    public readonly applyChangesButton = {\n        children:[\n            {\n                class: 'fas fa-sync fv-text-focus fv-hover-bg-background p-1 border rounded fv-pointer'\n            }\n        ],\n        onclick: () => this.state.applySettings()\n    }\n\n    constructor( public readonly state: ModuleSettingsState){\n\n        this.children = [\n                this.header(),\n                new AutoForm.View({state: state.autoFormState, class:'flex-grow-1 overflow-auto my-1', style:{'min-height':'0px'}} as any)\n            ]\n        this.connectedCallback = (elem: HTMLElement$) => {\n            elem.ownSubscriptions(...state.subscriptions)\n        }\n    }\n\n    header() : VirtualDOM {\n\n        return {\n            class: 'border rounded p-1',\n            children:[\n                child$(\n                    this.state.onTheFlyUpdates$,\n                    (onTheFly) => this.updatePolicyView(onTheFly)\n                ),\n                {\n                    class:'d-flex align-items-center py-2 justify-content-around',\n                    children:[\n                        {\n                            innerText:\"Module's title\",\n                            class:'my-auto'\n                        },\n                        {\n                            tag:'input',\n                            type:'text',\n                            value:this.state.mdle.configuration.title,\n                            onchange: (event) => {\n                                this.state.applySettings(event.target.value)\n                            }\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n\n    updatePolicyView(onTheFly: boolean) : VirtualDOM{\n        return {\n            class: 'd-flex align-items-center',\n            children:[\n                {\n                    tag:\"input\",\n                    type:\"checkbox\",\n                    checked: onTheFly,\n                    onclick: () => this.state.toggleUpdatePolicy()\n                },\n                {   class: 'px-2',\n                    innerText: 'auto apply changes'\n                },\n                onTheFly\n                    ? {}\n                    : this.applyChangesButton\n            ],\n        }\n    }\n}\n\n","\nimport { VirtualDOM, render, attr$ } from '@youwol/flux-view'\nimport { Modal } from '@youwol/fv-group'\nimport { Button } from '@youwol/fv-button'\nimport { Select } from '@youwol/fv-input'\nimport { combineLatest, from, Observable } from 'rxjs'\nimport { mergeMap } from 'rxjs/operators'\nimport { AppStore } from '../builder-state'\nimport { ModalView } from './modal.view'\n\n\nexport namespace ShareUriView{\n    \n    export class State{\n\n        selectState : Select.State\n        sourceURI$ : Observable<[string,string]>\n\n        constructor({appStore}:{\n            appStore: AppStore\n        }) {\n            let selectItems = [\n                new Select.ItemData('youwol-url','YouWol Platform URL'),\n                new Select.ItemData('relative-url','Relative URL')\n            ]\n            if( location.hostname=='localhost')\n                selectItems.push(new Select.ItemData('localhost-url','Localhost URL'))\n\n            this.selectState = new Select.State(selectItems,'youwol-url')\n\n            this.sourceURI$ = combineLatest([appStore.projectURI$(), this.selectState.selectionId$])\n        }\n\n        toUrl( uri: string, mode: string){\n\n            if(mode=='relative-url')\n              return `${uri}`\n            if(mode=='localhost-url')\n              return `${location.hostname}:${location.port}${uri}`\n            return `https://platform.youwol.com${uri}`\n          }\n      \n    }\n    \n    type TOptions = {\n        containerClass?: string,\n        containerStyle?: {[key:string]: string},\n    }\n\n    export class View implements VirtualDOM{\n\n        static defaultOptions : TOptions = {\n            containerClass: 'd-flex flex-column p-3',\n            containerStyle: { 'min-height':'0px'},\n        }\n\n        public readonly state: State\n        public readonly class: string\n        public readonly style: {[key: string]: string}\n        public readonly children: Array<VirtualDOM>\n\n        connectedCallback : (elem) => void\n\n        constructor({\n            state,\n            ...rest\n        }:\n        {\n            state: State,\n        }) {\n            Object.assign(this, rest)\n            this.state = state\n            this.class = this.class || View.defaultOptions.containerClass\n            this.style = this.style || View.defaultOptions.containerStyle\n\n            let copyLinkBttn = new Button.View({\n                state: new Button.State(),\n                contentView: () => ({ innerText: '' }),\n                class: \"fv-btn fv-btn-primary fv-bg-focus fas fa-copy ml-2\"\n              } as any)\n\n            this.connectedCallback = (elem) => {\n                elem.subscriptions.push(\n                    copyLinkBttn.state.click$.pipe(\n                        mergeMap( () => \n                            state.sourceURI$ ),\n                        mergeMap( ([uri, mode]) => \n                            from(navigator.clipboard.writeText(state.toUrl(uri, mode)))) \n                    ).subscribe( () => {\n                        console.log(\"Copied:::!!!\")\n                        //onUpdate( state.codeEditorState.content$.getValue())\n                    }) \n                )\n            }\n            this.children = [\n                {\n                    innerText: 'The following url can be used to share your application:'\n                },\n                new Select.View({state: state.selectState}),\n                {\n                    class: 'd-flex align-items-center',\n                    children: [\n                    {\n                        style: { 'text-overflow': 'ellipsis', 'white-space': 'nowrap', 'overflow': 'hidden', 'font-family': 'monospace' },\n                        innerText: attr$(\n                        state.sourceURI$,\n                        ([uri, mode]) => state.toUrl(uri, mode)\n                        )\n                    },\n                    copyLinkBttn\n                    ]\n                },\n                { \n                    class:'d-flex align-items-center fv-bg-background-alt rounded my-3',\n                    children:[\n                    {\n                        class:'fas fa-exclamation fv-text-focus px-2'\n                    },\n                    {\n                        innerText: \"This feature is a work in progress, it is expected to work with 'relatively' small application for now. \"+\n                        \"Also, the consumer of this link will need to have access to all packages/modules/resources included in your app.\"\n                    }\n                    ]\n                }\n            ]\n        }\n    }\n\n    export function popupModal(appStore: AppStore) {\n\n        let state = new State({appStore})\n        let view = new View({state})\n        \n        ModalView.popup({\n            view,\n            style: {  width:'75vw', 'max-width':'1000px' },\n            options: { displayOk: false, displayCancel: false }\n        })\n    }\n}","import { createObservableFromFetch } from \"@youwol/flux-core\";\nimport { from, Observable, of } from \"rxjs\";\nimport { map, mergeMap, tap } from \"rxjs/operators\";\nimport { fetchBundles } from \"@youwol/cdn-client\"\nimport { AppStore } from \"../builder-editor/builder-state\";\n\nexport interface AssetResp {\n    assetId: string\n    name: string\n}\nexport interface FolderResp {\n    folderId: string\n    name: string\n}\nexport interface ItemResp {\n    assetId: string;\n    treeId: string\n    rawId: string\n    name: string\n}\nexport interface DriveResp {\n    driveId: string\n    name: string\n}\nexport interface GroupResp {\n    id: string\n    path: string\n}\nexport interface ChildrenResp {\n    items: Array<ItemResp>\n    folders: Array<FolderResp>\n}\nexport interface GroupsResp {\n    groupId: string\n    groups: Array<GroupResp>\n    drives: Array<DriveResp>\n}\nexport interface DrivesResp {\n    drives: Array<DriveResp>\n}\n\nexport class AssetsBrowserClient {\n\n    static appStore : AppStore = undefined\n    static tmpLibraries = undefined\n\n    static urlBase = '/api/assets-gateway'\n    static urlBaseOrganisation = '/api/assets-gateway/tree'\n    static urlBaseAssets = '/api/assets-gateway/assets'\n    static urlBaseRaws = '/api/assets-gateway/raw'\n\n    static allGroups = undefined\n\n    static headers: { [key: string]: string } = {}\n\n    static setHeaders(headers: { [key: string]: string }) {\n        AssetsBrowserClient.headers = headers\n    }\n\n    static getAsset$(assetId: string): Observable<AssetResp> {\n        let url = AssetsBrowserClient.urlBaseAssets + `/${assetId}`\n        let request = new Request(url, { headers: AssetsBrowserClient.headers })\n        return createObservableFromFetch(request)\n    }\n\n    static getFolderChildren$(folderId: string):\n        Observable<ChildrenResp> {\n\n        let url = `/api/assets-gateway/tree/folders/${folderId}/children`\n        let request = new Request(url, { headers: AssetsBrowserClient.headers })\n        return createObservableFromFetch(request)\n    }\n\n    static getGroupChildrenDrives$(groupId: string): Observable<DrivesResp> {\n\n        let url = `/api/assets-gateway/tree/groups/${groupId}/drives`\n        let request = new Request(url, { headers: AssetsBrowserClient.headers })\n\n        return createObservableFromFetch(request)\n    }\n\n    static getGroupChildren$(pathParent = \"\"): Observable<GroupsResp> {\n        \n        let url = '/api/assets-gateway/groups'\n        let request = new Request(url, { headers: AssetsBrowserClient.headers })\n        let start$ = this.allGroups\n            ? of(this.allGroups)\n            : createObservableFromFetch(request).pipe(\n                tap(({ groups }) => this.allGroups = groups),\n                map(({ groups }) => groups)\n            )\n        return start$.pipe(\n            mergeMap((allGroups: Array<{ id: string, path: string }>) => {\n\n                let selectedGroups = allGroups\n                .filter(grp => {\n                    if (pathParent == \"\")\n                        return grp.path == \"private\" || grp.path == \"/youwol-users\"\n                    return grp.path != pathParent && grp.path.includes(pathParent) && (grp.path.slice(pathParent.length).match(/\\//g)).length == 1\n                })\n                if(pathParent==\"\")\n                    return of({groups:selectedGroups, drives:[], groupId: undefined});\n                    \n                let groupId = allGroups.find(g => g.path == pathParent).id\n                return AssetsBrowserClient\n                .getGroupChildrenDrives$(groupId)\n                .pipe(\n                    map(({ drives }) => {\n                        return { groupId, groups:selectedGroups, drives }\n                    })\n                )\n            })\n        ) as any\n    }\n\n    static getModules$( rawId : string) {\n\n        let url = `/api/assets-gateway/raw/package/metadata/${rawId}`\n        let request = new Request(url, { headers: AssetsBrowserClient.headers }) \n                \n        return createObservableFromFetch(request).pipe(\n            mergeMap( (targetLibrary: any) => {\n\n                if(window[targetLibrary.name])\n                    return of({targetLibrary, loadingGraph:{lock:[], fluxPacks:[], libraries:{}}})\n\n                let libraries = {\n                    ...AssetsBrowserClient.appStore.project.requirements.libraries,\n                    ...{[targetLibrary.name]:targetLibrary.versions[0]}\n                } as {[key:string]: string}\n                \n                let fetchPromise = fetchBundles(libraries, window)\n                \n                return from(fetchPromise).pipe( map( (loadingGraph) => {\n                    return {targetLibrary, loadingGraph}\n                }) )\n            }),\n            map( ({targetLibrary, loadingGraph}) =>{\n                let loaded = window[targetLibrary.name]\n                return {\n                    factories: Object.values(loaded).filter( (v:any) => v && v.Module && v.BuilderView),\n                    library: targetLibrary,\n                    loadingGraph\n                }\n            }),\n        )\n    }\n}","export function getBlocks() {\n  return [\n    {\n      id: 'section',\n      label: '<b>Section</b>', // You can use HTML/SVG inside labels\n      category:\"Basic\",\n      attributes: { class: 'gjs-block-section' },\n      content: `<section>\n        <h1>This is a simple title</h1>\n        <div>This is just a Lorem text: Lorem ipsum dolor sit amet</div>\n      </section>`,\n      render( {el}:{el:any}) { el.classList.add(\"gjs-fonts\",\"gjs-f-h1p\") } \n    }, {\n      id: 'text',\n      label: 'Text',\n      category:\"Basic\",\n      content: '<div data-gjs-type=\"text\">Insert your text here</div>', \n      render( {el}:{el:any}) { el.classList.add(\"gjs-fonts\",\"gjs-f-text\") } \n    }, {\n      id: 'image',\n      label: 'Image',\n      category:\"Basic\",\n      // Select the component once it's dropped\n      select: true,\n      // You can pass components as a JSON instead of a simple HTML string,\n      // in this case we also use a defined component type `image`\n      content: { type: 'image' },\n      // This triggers `active` event on dropped components and the `image`\n      // reacts by opening the AssetManager\n      activate: true,\n      render( {el}:{el:any}) { el.classList.add(\"gjs-fonts\",\"gjs-f-image\") }\n    }, \n    {\n      id: 'link',\n      label: 'Link',\n      category:\"Basic\",\n      select: true,\n      content: {\n        type: 'link',\n        content:'Text for the link',\n        attributes: { href: '' }\n      }\n    },\n    {\n      id: '2-columns',\n      label: '2 Columns',\n      category:\"Layouts\",\n      content: `\n            <div class=\"\" style=\"display:flex; width:100%; height:100%; padding:5px\" data-gjs-droppable=\".fx-row-cell\" data-gjs-custom-name=\"Row\">\n              <div class=\"\" style=\"min-width:50px; width:100%\" data-gjs-draggable=\".row\" \n                data-gjs-resizable=\"resizerRight\" data-gjs-name= \"Cell\"></div>\n              <div class=\"\" style=\"min-width:50px; width:100%\"  data-gjs-draggable=\".row\"\n                data-gjs-resizable=\"resizerRight\" data-gjs-name= \"Cell\" ></div>\n            </div>\n          `,\n      render( {el}:{el:any}) { el.classList.add(\"gjs-fonts\",\"gjs-f-b2\") }\n    }/*,\n    {\n      id: 'Youwol',\n      label: 'Youwol',\n      category:\"Layouts\",\n      content: `\n            <div class=\"row vh-100\" data-gjs-droppable=\".row-cell\" data-gjs-custom-name=\"Row\">\n              <div class=\"row-cell w-25 px-3 background-primary text-white\" data-gjs-draggable=\".row\" \n                data-gjs-resizable=\"resizerRight\" data-gjs-name= \"Cell\">\n\n                <img data-gjs-type=\"image\" draggable=\"true\" src=\"api/cdn-backend/assets/logo_YouWol_Platform_white.png\" class=\"w-50\" id=\"ittd\" class=\"logo gjs-hovered\">\n\n                <div class=\"h-separator my-3\">  </div>\n                <h4 class=\"text-center \" > Title </h4>\n                \n                <div class=\"my-4\">\n                  <p class=\"lead text-justify\"><em> This is some description </em></p> \n                </div>  \n                <div class=\"h-separator  my-2\">  </div>\n                <div class=\"mt-4\">\n                  <p  class=\"text-justify\" > Some content </p> \n                </div>  \n              </div>\n              <div class=\"row-cell w-75\" data-gjs-draggable=\".row\"\n                data-gjs-resizable=\"resizerRight\" data-gjs-name= \"Cell\"></div>\n            </div>\n            <style>\n              .logo{\n                width:100%\n              }\n              .h-separator{\n                background-color: white;\n                padding:1px;\n                display: block\n              }\n              .row {\n                display: flex;\n                justify-content: flex-start;\n                align-items: stretch;\n                flex-wrap: nowrap;\n                padding: 10px;\n                min-height: 75px;\n              }\n              .row-cell {\n                flex-grow: 1;\n                padding: 5px;\n              }\n            </style>\n          `,\n      render( {el}:{el:any}) { \n        let div =document.createElement(\"div\")\n        div.classList.add(\"v-flex\")\n        div.innerHTML =` <img data-gjs-type=\"image\" draggable=\"true\" src=\"/api/cdn-backend/assets/logo_YouWol_Platform_white.png\" class=\"w-50\" id=\"ittd\" class=\"logo gjs-hovered\">`\n        el.appendChild(div) }\n    }*/\n  ]\n}","import { replaceTemplateElements } from \"./flux-rendering-components\";\n\n\nexport function buildCodeEditor(editor, type) {\n    var codeEditor = editor.CodeManager.getViewer('CodeMirror').clone();\n    codeEditor.set({\n      codeName: type === 'html' ? 'htmlmixed' : 'css',\n      readOnly: false,\n      theme: 'hopscotch',\n      autoBeautify: true,\n      autoCloseTags: true,\n      autoCloseBrackets: true,\n      styleActiveLine: true,\n      smartIndent: true,\n    });\n    return codeEditor;\n  }\n\n\nfunction setupHtmlAutoUpdates(appStore, editor, htmlCodeEditor) {\n    function update() {\n      const htmlCode = htmlCodeEditor.editor.getValue()\n      if (!htmlCode) return;\n      editor.setComponents(htmlCode);\n      replaceTemplateElements(appStore.project.workflow.modules.map(m => m.moduleId),editor,appStore)\n      let style = Object.values(editor.fluxCache).reduce( (acc, cache: any)=> acc+\" \"+cache.styles, \"\")\n      editor.getStyle().add(style)\n    }\n    var delay;\n    htmlCodeEditor.editor.on('change', function() {\n      clearTimeout(delay);\n      delay = setTimeout(update, 300);\n    });\n    htmlCodeEditor.editor.refresh();\n  }\n  \n  function setupCssAutoUpdates(editor, cssCodeEditor) {\n    function update() {\n      const cssCode = cssCodeEditor.editor.getValue()\n      if (!cssCode) return;\n      editor.setStyle(cssCode);\n    }\n    var delay;\n    cssCodeEditor.editor.on('change', function() {\n      clearTimeout(delay);\n      delay = setTimeout(update, 300);\n    });\n  }\n\n  \n  \nexport function buildCodePanel(appStore, editor, panel) {\n    const codePanel = document.createElement('div');\n    codePanel.classList.add('code-panel');\n  \n    const htmlSection = document.createElement('section');\n    const cssSection = document.createElement('section');\n    htmlSection.innerHTML = '<div>HTML</div>'\n    cssSection.innerHTML = '<div>CSS</div>'\n  \n    const htmlCodeEditor = buildCodeEditor(editor, 'html')\n    const cssCodeEditor = buildCodeEditor(editor, 'css')\n    const htmlTextArea = document.createElement('textarea');\n    const cssTextArea = document.createElement('textarea');\n    htmlSection.appendChild(htmlTextArea);\n    cssSection.appendChild(cssTextArea);\n  \n    codePanel.appendChild(htmlSection);\n    codePanel.appendChild(cssSection);\n    panel.set('appendContent', codePanel).trigger('change:appendContent');\n    htmlCodeEditor.init(htmlTextArea);\n    cssCodeEditor.init(cssTextArea);\n    htmlCodeEditor.setContent(editor.getHtml());\n    cssCodeEditor.setContent(editor.getCss({ avoidProtected: true }));\n  \n    /*Split([htmlSection, cssSection], {\n      direction: 'vertical',\n      sizes: [50, 50],\n      minSize: 100,\n      gutterSize: 2,\n      onDragEnd: () => {\n        htmlCodeEditor.editor.refresh();\n        cssCodeEditor.editor.refresh();\n      }\n    });\n  */\n    setupHtmlAutoUpdates(appStore, editor, htmlCodeEditor);\n    setupCssAutoUpdates(editor, cssCodeEditor);\n  \n    // make sure editor is aware of width change after the 300ms effect ends\n    setTimeout(() => {\n      htmlCodeEditor.editor.refresh();\n      cssCodeEditor.editor.refresh();\n    }, 320)\n  \n    return codePanel\n  }\n\n  ","\nimport { Component } from '@youwol/flux-core';\n\nimport { LogLevel, AppDebugEnvironment, AppStore } from '../builder-editor/builder-state/index';\nimport { cleanCss, privateClasses } from './utils';\nimport { buildCodePanel } from './code-editors';\nimport { setDynamicComponentsBlocks } from './flux-blocks';\nimport { replaceTemplateElements } from './flux-rendering-components';\n\nexport function plugCommands(editor: any, appStore: AppStore) {\n\n    let debugSingleton = AppDebugEnvironment.getInstance()\n\n    editor.on('change', (element: any) => {\n\n        let html = localStorage.getItem(\"gjs-html\")\n        if (appStore.project.runnerRendering.layout !== html && html!=\"\") {\n            debugSingleton.debugOn &&\n                debugSingleton.logRenderTopic({\n                    level: LogLevel.Info, message: \"change => layout\",\n                    object: {\n                        element,\n                        oldLayout: appStore.project.runnerRendering.layout,\n                        newLayout: html\n                    }\n                })\n            appStore.setRenderingLayout(localStorage.getItem(\"gjs-html\"))\n        }\n        let css = cleanCss(localStorage.getItem(\"gjs-css\"))\n        if (appStore.project.runnerRendering.style !== css && css !=\"\") {\n            debugSingleton.debugOn &&\n                debugSingleton.logRenderTopic({\n                    level: LogLevel.Info, message: \"change => style\",\n                    object: {\n                        element,\n                        oldCss: appStore.project.runnerRendering.style,\n                        newCss: css\n                    }\n                })\n            appStore.setRenderingStyle(css)\n        }\n    });\n\n    editor.on('canvas:drop', (dataTransfer: any, component: any) => {\n\n        debugSingleton.debugOn &&\n            debugSingleton.logRenderTopic({ level: LogLevel.Info, message: \"canvas:drop\", object: { dataTransfer, component: component.toJSON() } })\n\n        let child = component.view.el as HTMLDivElement\n        let mdle = appStore.getModule(child.id)\n\n        if (mdle) {\n\n            debugSingleton.debugOn &&\n                debugSingleton.logRenderTopic({ level: LogLevel.Info, message: \"canvas:drop => flux-module\", object: { module: mdle } })\n\n            let childrenModulesId = []\n            if (mdle instanceof Component.Module) {\n                childrenModulesId = (mdle as Component.Module).getAllChildren(appStore.project.workflow).map(m => m.moduleId)\n                editor.getStyle().add(mdle.getFullCSS(appStore.project.workflow, { asString:true }))\n            }\n            child.id = mdle.moduleId\n            replaceTemplateElements([child.id, ...childrenModulesId], editor, appStore)\n            setDynamicComponentsBlocks(appStore, editor)\n        }\n    });\n\n    editor.on('component:update:content', (data) => {\n        //when inner html has changed, e.g. after text changed\n        debugSingleton.debugOn &&\n            debugSingleton.logRenderTopic({ level: LogLevel.Info, message: \"component:update:content\", object: { module: data } })\n    })\n\n    editor.on('component:update:style', (data) => {\n        console.log(\"AAAAAAAAAAAAAAAAAAAAAA\")\n        debugSingleton.debugOn &&\n            debugSingleton.logRenderTopic({ level: LogLevel.Info, message: \"component:update:style\", object: { module: data } })\n    })\n\n    editor.on('sorter:drag:end', ({ modelToDrop, srcEl }: { modelToDrop: any, srcEl: any }) => {\n        debugSingleton.debugOn &&\n            debugSingleton.logRenderTopic({ level: LogLevel.Info, message: \"sorter:drag:end\", object: { module: modelToDrop } })\n\n        // a drop of any component is done => do nothing as the  canvas:drop wil handle the addition\n        if (typeof (modelToDrop) == \"string\")\n            return\n\n        // from here: the drag end is a move => in case of flux-component the cache has the appropriate content \n        let mdle = appStore.getModule(modelToDrop.ccid)\n        if(!mdle)\n            return\n            \n\n        let moduleIds = (mdle instanceof Component.Module)\n            ? mdle.getAllChildren(appStore.project.workflow).map(m => m.moduleId)\n            : [mdle.moduleId]\n\n        replaceTemplateElements(moduleIds, editor, appStore)\n    });\n\n    editor.on('component:remove', (component) => {\n        if (appStore.getActiveLayer().getModuleIds().includes(component.ccid))\n            setDynamicComponentsBlocks(appStore, editor)\n    });\n\n    editor.on('selector:add', selector => {\n        selector.set('active', false )\n        selector.set('private', privateClasses.includes(selector.id)) \n    });\n\n    editor.Commands.add('show-blocks', {\n        getRowEl(editor: any) { return editor.getContainer().closest('#editor-row'); },\n        getLayersEl(row: any) { return row.querySelector('#blocks') },\n\n        run(editor: any, sender: any) {\n            const lmEl = this.getLayersEl(this.getRowEl(editor));\n            lmEl.style.display = '';\n        },\n        stop(editor: any, sender: any) {\n            const lmEl = this.getLayersEl(this.getRowEl(editor));\n            lmEl.style.display = 'none';\n        },\n    });\n    editor.Commands.add('show-styles', {\n\n        getRowEl(editor: any) { return editor.getContainer().closest('#editor-row'); },\n        getStyleEl(row: any) { return row.querySelector('#styles') },\n\n        run(editor: any, sender: any) {\n            const smEl = this.getStyleEl(this.getRowEl(editor));\n            smEl.style.display = '';\n        },\n        stop(editor: any, sender: any) {\n            const smEl = this.getStyleEl(this.getRowEl(editor));\n            smEl.style.display = 'none';\n        },\n    });;\n    editor.Commands.add('show-layers', {\n\n        getRowEl(editor: any) { return editor.getContainer().closest('#editor-row'); },\n        getLayersEl(row: any) { return row.querySelector('#layers') },\n\n        run(editor: any, sender: any) {\n            const smEl = this.getLayersEl(this.getRowEl(editor));\n            smEl.style.display = '';\n        },\n        stop(editor: any, sender: any) {\n            const smEl = this.getLayersEl(this.getRowEl(editor));\n            smEl.style.display = 'none';\n        },\n    });\n    editor.Commands.add('show-traits', {\n\n        getRowEl(editor: any) { return editor.getContainer().closest('#editor-row'); },\n        getTraitsEl(row: any) { return row.querySelector('#traits') },\n\n        run(editor: any, sender: any) {\n            const smEl = this.getTraitsEl(this.getRowEl(editor));\n            smEl.style.display = '';\n        },\n        stop(editor: any, sender: any) {\n            const smEl = this.getTraitsEl(this.getRowEl(editor));\n            smEl.style.display = 'none';\n        },\n    });\n    editor.Commands.add('open-code', {\n\n        getRowEl(editor: any) { return editor.getContainer().closest('#editor-row'); },\n        getCodeEl(row: any) { return row.querySelector('#codes') },\n\n        run: function (editor, senderBtn) {\n            const pn = editor.Panels;\n            const id = 'code';\n            const panel = pn.getPanel(id) || pn.addPanel({ id });\n            let divi = this.getCodeEl(this.getRowEl(editor));\n            console.log(\"Code elements\", divi)\n            if (!this.codePanel) this.codePanel = buildCodePanel(appStore, editor, panel)\n            console.log(\"Code Panel\", this.codePanel)\n            this.codePanel.style.display = 'block';\n            divi.appendChild(this.codePanel)\n            //editor.$('#panel__right_render').get(0).style.width = '35%';\n            //editor.$('.gjs-cv-canvas').get(0).style.width = '65%';\n        },\n        stop: function (editor, senderBtn) {\n            if (this.codePanel) this.codePanel.style.display = 'none';\n            //editor.$('#panel__right_render').get(0).style.width = '15%';\n            //editor.$('.gjs-cv-canvas').get(0).style.width = '85%';\n        },\n    })\n    editor.Commands.add(\"custom-preview\", {\n        run(editor: any, sender: any) {\n\n            document.querySelector(\"#gjs-cv-tools\").classList.add(\"preview\")\n            let body = editor.Canvas.getDocument().body.querySelector('div')\n            body.classList.add(\"preview\")\n            // we hide template elements\n            Array.from(editor.Canvas.getDocument().querySelectorAll(\".flux-builder-only\"))\n                .forEach((element: any) => element.classList.add('preview')\n                );\n\n            let panelsContainer = document.getElementById(\"panels-container-render\")\n            panelsContainer.classList.add(\"collapsed\")\n            let panel = document.getElementById(\"panel__right_render\")\n            panel.classList.add(\"collapsed\")\n            panel.querySelectorAll(\".flex-align-switch\").forEach((e: HTMLElement) => e.style.flexDirection = \"column\")\n\n            editor.$('#panel__right_render').get(0).style.width = '50px';\n            panel.querySelectorAll(\".buttons-toolbox\").forEach((e: HTMLDivElement) => {\n                let div = e.firstChild as HTMLElement\n                if (div && div.style)\n                    div.style.flexDirection = \"column\"\n            })\n        },\n        stop(editor: any, sender: any) {\n\n            document.querySelector(\"#gjs-cv-tools\").classList.remove(\"preview\")\n            let body = editor.Canvas.getDocument().body.querySelector('div')\n            body.classList.remove(\"preview\")\n\n            Array.from(editor.Canvas.getDocument().querySelectorAll(\".flux-builder-only\"))\n                .forEach((element: any) => element.classList.remove('preview')\n                );\n\n            let panelsContainer = document.getElementById(\"panels-container-render\")\n            panelsContainer.classList.remove(\"collapsed\")\n            let panel = document.getElementById(\"panel__right_render\")\n            panel.classList.remove(\"collapsed\")\n            panel.querySelectorAll(\".flex-align-switch\").forEach((e: HTMLElement) => e.style.flexDirection = \"row\")\n\n            //editor.$('#panel__right_render').get(0).style.width = '15%';\n            panel.querySelectorAll(\".buttons-toolbox\").forEach((e: HTMLDivElement) => {\n                let div = e.firstChild as HTMLElement\n                if (div && div.style)\n                    div.style.flexDirection = \"row\"\n            })\n        }\n    })\n    editor.Commands.add('set-device-tablet', {\n        run(editor: any, sender: any) {\n            editor.setDevice('Tablet')\n        },\n        stop(editor: any, sender: any) { },\n    });\n    editor.Commands.add('set-device-desktop', {\n        run(editor: any, sender: any) {\n            editor.setDevice('Desktop')\n        },\n        stop(editor: any, sender: any) { },\n    });\n    editor.Commands.add('set-device-mobile-landscape', {\n        run(editor: any, sender: any) {\n            editor.setDevice('Mobile landscape')\n        },\n        stop(editor: any, sender: any) { },\n    });\n    editor.Commands.add('set-device-mobile-portrait', {\n        run(editor: any, sender: any) {\n            editor.setDevice('Mobile portrait')\n        },\n        stop(editor: any, sender: any) { },\n    });\n    editor.on('run:preview:before', ({ sender }: { sender: any }) => {\n        sender.panelRight = document.getElementById(\"panel__right\")\n        sender.panelRight.remove()\n    });\n    editor.on('stop:preview:before', ({ sender }: { sender: any }) => {\n        if (sender && sender.panelRight) {\n            document.getElementById(\"editor-row\").appendChild(sender.panelRight)\n        }\n    });\n}\n","\nimport { ModuleFlux } from '@youwol/flux-core'\n\nimport { AppDebugEnvironment, LogLevel, AppStore } from '../builder-editor/builder-state/index'\n\nimport { getRenderPanels } from './panels'\nimport { getGeneralPanels } from '../top-banner/panels'\nimport { commandsGeneral } from '../top-banner/commands'\n\nimport { getBlocks } from './blocks'\nimport { getStylesSectors } from './style-manager'\nimport { plugCommands } from './commands'\nimport { commandsBuilder } from '../builder-editor/commands'\nimport { getBuilderPanels } from '../builder-editor/panels'\nimport { applyPatches } from './patches'\nimport { Subject } from 'rxjs'\nimport { privateClasses } from './utils'\nimport { take } from 'rxjs/operators'\n\nimport * as grapesjs from 'grapesjs'\n\n\nexport async function createLayoutEditor(): grapesjs.Editor {\n    localStorage.setItem(\"gjs-components\", \"\")\n    localStorage.setItem(\"gjs-html\", \"\")\n    localStorage.setItem(\"gjs-css\", \"\")\n    localStorage.setItem(\"gjs-styles\", \"\")\n\n    let debugSingleton = AppDebugEnvironment.getInstance()\n    debugSingleton.debugOn &&\n        debugSingleton.logRenderTopic({\n            level: LogLevel.Info,\n            message: \"create layout editor\",\n            object: {}\n        })\n\n    let editor$ = new Subject<any>()\n\n    let editor = grapesjs.init({\n        autorender: false,\n        container: '#gjs',\n        canvas: {\n            styles: [],\n            scripts: []\n        },\n        height: '100%',\n        width: 'auto',\n        panels: { defaults: [] },\n        assetManager: {\n            assets: [],\n            autoAdd: 1\n        },\n        keymaps: {\n            defaults: {}\n        },\n        commands: {\n            defaults: []\n        },\n        selectorManager: {\n            appendTo: '#styles'\n        },\n        blockManager: {\n            appendTo: '#blocks',\n            blocks: getBlocks()\n        },\n        styleManager: {\n            appendTo: '#styles',\n            sectors: getStylesSectors()\n        },\n        layerManager: { appendTo: '#layers', },\n        traitManager: { appendTo: '#traits', },\n    });\n\n    editor.dynamicModulesId = []\n    editor.fluxCache = {}\n\n    let bootstrapCss = document.getElementById(\"bootstrap-css\")\n    if (!bootstrapCss)\n        console.error(\"Bootstrap css needs to be included in host application with id 'bootstrap-css' \")\n    let fontawesomeCss = document.getElementById(\"fontawesome-css\")\n    if (!fontawesomeCss)\n        console.error(\"Fontawesome css needs to be included in host application with id 'fontawesome-css' \")\n    let youwolCss = document.getElementById(\"youwol-css\")\n    if (!youwolCss)\n        console.error(\"Fontawesome css needs to be included in host application with id 'fontawesome-css' \")\n\n    editor.on('load', function () {\n        let document = editor.Canvas.getDocument() as HTMLDocument\n        let headElement = document.head as HTMLHeadElement\n        headElement.appendChild(bootstrapCss.cloneNode())\n        headElement.appendChild(fontawesomeCss.cloneNode())\n        headElement.appendChild(youwolCss.cloneNode())\n\n        var node = document.createElement('style');\n        node.innerHTML = `.mw-50px{ min-width:50px}.w-5{width:5%};.w-10{width:10%}.w-15{width:15%}.w-20{width:20%}.w-30{width:30%}.w-40{width:40%}.w-60{width:60%}.w-70{width:70%}.w-80{width:80%}.w-90{width:90%}.zindex-1{z-index:1}\n    .flux-component{min-height:50px;} .preview .gjs-hovered{outline:0px !important} .preview .gjs-selected{outline:0px !important} \n    .flux-builder-only{opacity:0.5} .flux-builder-only.preview{ display:none}\n    .flux-fill-parent{width:100%; height:100%}`;\n        document.body.appendChild(node);\n        editor$.next(editor)\n        \n    })\n    editor.SelectorManager.getAll().each(selector => {\n        console.log(\"Set privates class!!\")\n        //selector.set('private', privateClasses.includes(selector.id)) \n        selector.set('private', true) \n    });\n    editor.render();\n    return new Promise((successCb) => editor$.pipe(take(1)).subscribe((edtr) => successCb(edtr)))\n}\n\n\nexport function initLayoutEditor(\n    editor: grapesjs.Editor,\n    {layout, style} : {layout: HTMLDivElement, style: string},\n    appStore: AppStore\n) {\n\n    let debugSingleton = AppDebugEnvironment.getInstance()\n\n    debugSingleton.debugOn &&\n        debugSingleton.logRenderTopic({\n            level: LogLevel.Info,\n            message: \"initialize layout editor\",\n            object: {}\n        })\n\n    plugCommands(editor, appStore)\n    let builderCommands = commandsBuilder().concat(commandsGeneral(appStore, editor))\n    builderCommands.forEach(c => editor.Commands.add(c[0], c[1]))\n    editor.BlockManager.getCategories().each((ctg: any) => ctg.set('open', false))\n\n    let panels = [...getGeneralPanels(appStore), ...getRenderPanels(), ...getBuilderPanels()]\n    panels.forEach(p => editor.Panels.addPanel(p))\n\n    applyPatches(editor)\n\n    console.log(\"INIT!!\", {layout:layout.outerHTML, style})\n    editor.setComponents(layout.outerHTML)\n\n    editor.setStyle(style);\n}\n\n","import { Component, LoadingGraphSchema, ModuleFlux, Workflow } from \"@youwol/flux-core\"\nimport { AppDebugEnvironment, AppStore, LogLevel } from \"../builder-editor/builder-state\"\nimport { getAllComponentsRec } from \"./utils\"\nimport * as grapesjs from 'grapesjs'\n\n\nfunction scaleSvgIcons(g: any) {\n    if (g.style.transform)\n        return\n    let parentBRect = g.parentElement.getBoundingClientRect()\n    let bRect = g.getBoundingClientRect()\n    let ty = parentBRect.top - bRect.top\n    let tx = parentBRect.left - bRect.left\n    let scale = Math.min(parentBRect.width / bRect.width, parentBRect.height / bRect.height)\n    g.style.transform = `translate(${parentBRect.width / 4}px,${parentBRect.height / 4}px) scale(${0.5 * scale}) translate(${tx}px,${ty}px)`;\n}\n\n\nexport function setDynamicComponentsBlocks(appStore: AppStore, editor: grapesjs.Editor) {\n\n    let debugSingleton = AppDebugEnvironment.getInstance()\n    let all = getAllComponentsRec(editor)\n\n    let layerModuleIds = appStore.getActiveLayer().getModuleIds()\n    let pluginIds = appStore.project.workflow.plugins\n        .filter(plugin => layerModuleIds.includes(plugin.parentModule.moduleId))\n        .map(plugin => plugin.moduleId)\n\n    let modulesToRender = [...layerModuleIds, ...pluginIds]\n        .filter(mid => !all[mid])\n        .map(mid => appStore.getModule(mid)).filter(m => m.Factory.RenderView)\n\n    let componentBlocks = editor.BlockManager.getAll().filter(block => block.get('category').id == \"Components\")\n    debugSingleton.debugOn &&\n        debugSingleton.logRenderTopic({\n            level: LogLevel.Info,\n            message: \"set dynamic components block\",\n            object: { modulesToRender, componentBlocks }\n        })\n    componentBlocks.forEach(block => editor.BlockManager.remove(block.id))\n    modulesToRender.forEach(m => editor.BlockManager.add(m.moduleId, toDynamicBlock(m, editor, appStore.project.workflow)))\n}\n\n\nfunction toDynamicBlock(mdle: ModuleFlux, editor: grapesjs.Editor, workflow: Workflow) {\n\n    return {\n        id: mdle.moduleId,\n        label: mdle.configuration.title,\n        name: mdle.configuration.title,\n        content: getFluxBlockContent(mdle, editor, workflow),\n        activate: true,\n        category: \"Components\",\n        render: ({ el }: { el: any }) => {\n            let div = document.createElement(\"div\")\n            div.id = mdle.moduleId\n            el.appendChild(div)\n            let svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n            svg.setAttribute(\"width\", \"100px\");\n            svg.setAttribute(\"height\", \"70px\");\n            let item = new mdle.Factory.BuilderView().icon()\n\n            const g = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\")\n            g.style.stroke = \"currentColor\"\n            g.classList.add(\"group-target\")\n            g.innerHTML = item.content\n            svg.appendChild(g)\n            div.appendChild(svg)\n            document.body.appendChild(svg)\n            scaleSvgIcons(g)\n            svg.remove()\n            div.appendChild(svg)\n        }\n    }\n}\n\n\nexport function getFluxBlockContent(mdle: ModuleFlux, editor: grapesjs.Editor, workflow: Workflow ) {\n\n    let debugSingleton = AppDebugEnvironment.getInstance()\n    debugSingleton.debugOn &&\n        debugSingleton.logRenderTopic({\n            level: LogLevel.Info,\n            message: \"getDynamicBlockWrapperDiv\",\n            object: { mdle }\n        })\n\n    if (mdle instanceof Component.Module) {\n        let html = mdle.getFullHTML(workflow)\n        return html \n            ? html.outerHTML \n            : `<div id=\"${mdle.moduleId}\" class=\"flux-element flux-component\"  data-gjs-name=\"${mdle.configuration.title}\"></div>`\n    }\n    let attr = mdle.Factory.RenderView.wrapperDivAttributes\n\n    let classes = `flux-element` +\n        (attr && attr(mdle).class ? \" \" + attr(mdle).class : \"\")\n\n    let styles = attr && attr(mdle).style ? attr(mdle).style : {}\n    let styleStr = Object.entries(styles).reduce((acc, [k, v]) => acc + k + \":\" + v + \";\", \"\")\n    editor.getStyle().add(`#${mdle.moduleId}{${styleStr}}`)\n    // we should be able to use a Component Definition: https://grapesjs.com/docs/api/block.html#block\n    // I can't make it works\n    console.log(\"getFluxBlockContent\", mdle)\n    return `<div id=\"${mdle.moduleId}\" class=\"${classes}\"  data-gjs-name=\"${mdle.configuration.title}\"></div>`\n\n}\n\n","import { Component, ModuleFlux, renderTemplate, Workflow } from \"@youwol/flux-core\"\nimport { AppDebugEnvironment, AppStore, LogLevel } from \"../builder-editor/builder-state\"\nimport { getFluxBlockContent } from \"./flux-blocks\"\nimport { getAllComponentsRec } from \"./utils\"\nimport * as grapesjs from 'grapesjs'\n\n\nexport function removeTemplateElements(modules: Array<ModuleFlux>, editor) {\n\n    let allGjs = getAllComponentsRec(editor)\n    let modulesToRemove = modules\n        .filter((m: ModuleFlux) => m.Factory.RenderView)\n\n    let debugSingleton = AppDebugEnvironment.getInstance()\n    debugSingleton.debugOn &&\n        debugSingleton.logRenderTopic({\n            level: LogLevel.Info,\n            message: `removeTemplateElements`,\n            object: { modules, modulesToRemove }\n        })\n        \n    modulesToRemove\n        .filter(mdle => allGjs[mdle.moduleId])\n        .forEach(mdle => allGjs[mdle.moduleId].remove())\n}\n\n\nexport function replaceTemplateElements(\n    moduleIds: Array<string>, \n    editor: grapesjs.Editor, \n    appStore: AppStore): Array<ModuleFlux> {\n\n    let debugSingleton = AppDebugEnvironment.getInstance()\n    if(moduleIds.length==0)\n        return\n\n    debugSingleton.debugOn &&\n    debugSingleton.logRenderTopic({\n        level: LogLevel.Info,\n        message: \"replaceTemplateElements\",\n        object: { moduleIds, appStore }\n    })\n    \n    let body = editor.Canvas.getDocument().body.querySelector('div')\n    \n    let mdles = moduleIds\n        .map((mid) => appStore.getModule(mid))\n        .filter(mdle => mdle.Factory.RenderView)\n\n    renderTemplate(body, mdles.filter(mdle => !(mdle instanceof Component.Module)), {applyWrapperAttributes:false})\n    mdles\n        .filter(mdle => mdle instanceof Component.Module)\n        .map(mdle => [mdle, editor.Canvas.getDocument().getElementById(mdle.moduleId)])\n        .filter( ([_,renderedDiv]) => renderedDiv )\n        .forEach(([mdle, renderedDiv]) => {\n            mdle[\"renderedElementDisplayed$\"].next(renderedDiv)\n        })\n\n    let allGjsComponents = getAllComponentsRec(editor)\n    mdles\n    .filter(mdle => allGjsComponents[mdle.moduleId] != undefined)\n    .forEach(mdle => {\n        // this one apply on the layout view the correct title when on element is selected\n        allGjsComponents[mdle.moduleId].attributes[\"name\"] = mdle.configuration.title\n        // Two problems with grapesjs name when used in the layer manager: \n        // (i) they are stored in 'data-gjs-name' but this attribute is not persisted (we loose it at the next load).\n        // Try in the layer manager to change the name of an element and reload ... not working\n        // (ii) they are set at the flux-block definition (not updated when e.g. module's title is updated)\n        // allGjsComponents[mdle.moduleId].name = mdle.configuration.title\n        // allGjsComponents[mdle.moduleId].views[0].el.setAttribute(\"data-gjs-name\",  mdle.configuration.title)\n    })\n    return mdles\n}\n\n\nexport function updateElementsInLayout(\n    diff: { removedElements: Array<ModuleFlux>, createdElements: Array<ModuleFlux> }, \n    editor: grapesjs.Editor, \n    appStore: AppStore) {\n\n    let removedIds = diff.removedElements.map(m => m.moduleId)\n\n    let toReplaceIds = diff.createdElements\n        .filter((mdle: ModuleFlux) => mdle.Factory.RenderView)\n        .filter((mdle: ModuleFlux) => removedIds.includes(mdle.moduleId))\n        .map(mdle => mdle.moduleId)\n\n    replaceTemplateElements(toReplaceIds, editor, appStore) \n}\n\n\n/**\n * When a new module with rendering is dropped => it is inserted in the layout editor\n * if it belongs to the root component\n */\nexport function autoAddElementInLayout( \n    diff: { removedElements: Array<ModuleFlux>, createdElements: Array<ModuleFlux> },\n    editor: grapesjs.Editor, \n    appStore: AppStore) {\n    \n    let allGjsComponents = getAllComponentsRec(editor)\n\n    let removedIds = diff.removedElements.map(m => m.moduleId)\n\n    let newIds = diff.createdElements\n        .filter((mdle: ModuleFlux) => mdle.Factory.RenderView)\n        .filter((mdle: ModuleFlux) => !removedIds.includes(mdle.moduleId))\n        .filter((mdle: ModuleFlux) => appStore.getRootLayer().getModuleIds().includes(mdle.moduleId))\n        .filter((mdle: ModuleFlux) => !(mdle instanceof Component.Module))\n        .map((mdle: ModuleFlux) => {\n            let htmlContent = getFluxBlockContent(mdle, editor, appStore.project.workflow)\n            console.log(allGjsComponents[appStore.rootLayerId])\n            allGjsComponents[appStore.rootLayerId].append(htmlContent, { at: 0 })\n            return mdle.moduleId\n        })\n    replaceTemplateElements(newIds, editor, appStore)\n}\n\n\n/**\n * It can happen for instance when we group modules with view in a component => all included\n * modules will be removed from the view\n */\nexport function autoRemoveElementInLayout( \n    diff: { removedElements: Array<ModuleFlux>, createdElements: Array<ModuleFlux> }, \n    editor: any, \n    appStore: AppStore) {\n    \n    let removedIds = diff.removedElements.map(m => m.moduleId)\n\n    let toRemove = diff.createdElements\n        .filter((mdle: ModuleFlux) => mdle instanceof Component.Module)\n        .filter((mdle: ModuleFlux) => !removedIds.includes(mdle.moduleId))\n        .map( (mdle:Component.Module) => mdle.getDirectChildren(appStore.project.workflow))\n        .flat()\n    removeTemplateElements(toRemove, editor)\n}\n","export * from './blocks'\nexport * from './code-editors'\nexport * from './commands'\nexport * from './editor'\nexport * from './panels'\nexport * from './patches'\nexport * from './resources-initialisation'\nexport * from './style-manager'\nexport * from './utils'","\nexport function getRenderPanels() {\n\n  return [\n  {\n    id: 'layout-basic-actions',\n    el: '#panel__layout-basic-actions',\n    buttons: [\n      {\n        id: 'visibility',\n        active: true, // active by default\n        className: 'btn-toggle-borders',\n        label: '<i class=\"fas fa-border-none\"></i>',\n        command: 'sw-visibility', // Built-in command\n      }\n    ],\n  },{\n    id: 'layout-show-actions',\n    el: '#panel__render-show-actions',\n    buttons: [\n      {\n        id: 'preview',\n        className: 'btn-preview',\n        label: '<i class=\"fas fa-eye\"></i>',\n        command: 'custom-preview', // Built-in command\n      }\n    ],\n  }, {\n    id: 'layout-devices-actions',\n    el: '#panel__layout-devices-actions',\n    buttons: [\n      {\n        id: 'desktop',\n        active: true, // active by default\n        className: 'btn-set-device-desktop',\n        label: '<i class=\"fas fa-desktop\"></i>',\n        command: 'set-device-desktop'\n      },\n      {\n        id: 'tablet',\n        active: false, // active by default\n        className: 'btn-set-device-tablet',\n        label: '<i class=\"fas fa-tablet-alt\"></i>',\n        command: 'set-device-tablet'\n      },\n      {\n        id: 'mobile landscape',\n        active: false, // active by default\n        className: 'btn-set-device-phone',\n        label: '<i class=\"fas fa-mobile-alt\"></i>',\n        command: 'set-device-mobile-landscape'\n      },\n      {\n        id: 'mobile portrait',\n        active: false, // active by default\n        className: 'btn-set-device-phone',\n        label: '<i class=\"fas fa-mobile-alt\"></i>',\n        command: 'set-device-mobile-portrait'\n      }\n    ],\n  },\n  {\n    id: 'layout-managers-actions',\n    el: '#panel__render-panels-actions',\n    buttons: [{\n      id: 'show-blocks',\n      active: true,\n      label: '<i class=\"fas fa-th-large\"></i>',\n      command: 'show-blocks',\n      // Once activated disable the possibility to turn it off\n      togglable: false,\n    },\n    {\n      id: 'show-style',\n      active: false,\n      label: '<i class=\"fas fa-palette\"></i>',\n      command: 'show-styles',\n      togglable: false,\n    },\n    {\n      id: 'show-traits',\n      active: false,\n      className: 'fa fa-cog',\n      command: 'show-traits',\n      attributes: { title: 'Open Trait Manager' },\n      togglable: false,\n    },\n    {\n      id: 'show-layers',\n      active: false,\n      className: 'fa fa-bars',\n      command: 'show-layers',\n      attributes: { title: 'Open Layer Manager' },\n      togglable: false,\n    },\n    {\n      id: 'code',\n      className: 'btn-preview',\n      label: '<i class=\"fas fa-code\"></i>',\n      command: 'open-code', // Built-in command\n    }]\n  }\n  ]\n\n  /*\n  editor.Panels.addPanel({\n      id: 'layers',\n      el: '.panel__right',\n      // Make the panel resizable\n      resizable: {\n        maxDim: 350,\n        minDim: 200,\n        tc: 0, // Top handler\n        cl: 1, // Left handler\n        cr: 0, // Right handler\n        bc: 0, // Bottom handler\n        // Being a flex child we need to change `flex-basis` property\n        // instead of the `width` (default)\n        keyWidth: 'flex-basis',\n      },\n    })*/\n}","\n\nexport function applyPatches(editor:any){\n\n    /**\n     * This patch is to switch between old fontawesome icons to corresponding new ones\n     */\n    let toolbarDiv = document.getElementById(\"gjs-tools\").querySelector(\".gjs-toolbar\") as HTMLDivElement\n    const callback = function(mutationsList:any, observer:any) {\n        if(toolbarDiv.children.length>0){\n            toolbarDiv.querySelector(\".fa-arrows\").classList.add(\"fas\",\"fa-arrows-alt\")   \n            toolbarDiv.querySelector(\".fa-trash-o\").classList.add(\"fas\",\"fa-trash\")    \n        }     \n    };\n    const observer = new MutationObserver(callback);\n    observer.observe(toolbarDiv, { attributes: true, childList: true, subtree: false });\n\n    /** the default move command is patched such that it is allow to drag only  if \n     * the dedicated 'move' icon is used. Mixing dragging inside the component w/ layout change + internal\n     * component behavior was causing problem\n     */\n    let defaultMove = editor.Commands.get('tlb-move')\n    editor.Commands.add('tlb-move', {\n    run(ed :any, sender:any, opts :any = {}) {\n        /* If the dedicated icon is used => opts[\"event\"].target is not defined */\n        if(opts && opts[\"event\"] && opts[\"event\"].target)\n            return\n        defaultMove.run(ed, sender, opts)\n      }\n    })\n\n    /* --- Those next four lines are hacky, it ensure the attributes and styles panels are not displayed at first\n    This problem seems to occur only for light workflow\n    -----*/\n    editor.Commands.run( \"show-attributes\")\n    editor.Commands.stop( \"show-attributes\")\n    editor.Commands.run( \"show-styles\")\n    editor.Commands.stop( \"show-styles\")\n    editor.Commands.run(\"show-traits\")\n    editor.Commands.stop(\"show-traits\")\n    editor.Commands.run( \"show-layers\")\n    editor.Commands.stop( \"show-layers\")\n    /*editor.Commands.run(\"show-suggestions\")\n    editor.Commands.stop(\"show-suggestions\")\n    editor.Commands.run(\"show-extensions\")\n    editor.Commands.stop(\"show-extensions\")*/\n\n    /* ---\n    ---*/\n    let buttons_container = document.getElementById(\"panel__builder-managers-actions\").children[0]\n    buttons_container.classList.add(\"d-flex\",\"flex-wrap\")\n    let buttons_container2 = document.getElementById(\"panel__layout-devices-actions\").children[0]\n    buttons_container2.classList.add(\"d-flex\",\"flex-wrap\")\n    let buttons_container3 = document.getElementById(\"panel__render-panels-actions\").children[0]\n    buttons_container3.classList.add(\"d-flex\",\"flex-wrap\")\n    let buttons_container4 = document.getElementById(\"panel__builder-actions-items\").children[0]\n    buttons_container4.classList.add(\"d-flex\",\"flex-wrap\")\n\n}","import { AppStore } from '../builder-editor/builder-state/index'\n\n\nexport function getJsRessources(appStore : AppStore ){\n\n    return appStore.packages.reduce( ( acc, pack)=>{ \n        let js = pack.requirements\n        .filter( r => r.type===\"javascript-external\")\n        .map( r => r.src)\n        return acc.concat(js ) \n    }, [])\n}","export function getStylesSectors(){\n    return [{\n        name: 'Dimension',\n        open: false,\n        // Use built-in properties\n        buildProps: ['width', 'height', 'min-width', 'min-height', 'max-width', 'max-height', 'padding','margin'],\n        // Use `properties` to define/override single property\n        properties: [\n          {\n            // Type of the input,\n            // options: integer | radio | select | color | slider | file | composite | stack\n            type: 'integer',\n            name: 'The width', // Label for the property\n            property: 'width', // CSS property (if buildProps contains it will be extended)\n            units: ['px', '%'], // Units, available only for 'integer' types\n            defaults: 'auto', // Default value\n            min: 0, // Min value, available only for 'integer' types\n          }\n        ]\n      },{\n        name: 'Extra',\n        open: false,\n        buildProps: ['background-color', 'box-shadow', 'custom-prop'],\n        properties: [\n          {\n            id: 'custom-prop',\n            name: 'Custom Label',\n            property: 'font-size',\n            type: 'select',\n            defaults: '32px',\n            // List of options, available only for 'select' and 'radio'  types\n            options: [\n              { value: '12px', name: 'Tiny' },\n              { value: '18px', name: 'Medium' },\n              { value: '32px', name: 'Big' },\n            ],\n         }\n        ]\n      },{\n        name: 'Typography',\n        open: false,\n        buildProps: ['font-family', 'font-size', 'font-weight', 'letter-spacing', 'color', 'line-height', 'text-align', 'text-decoration', 'text-shadow'],\n        properties:[\n          { name: 'Font', property: 'font-family'},\n          { name: 'Weight', property: 'font-weight'},\n          { name:  'Font color', property: 'color'},\n          {\n            property: 'text-align',\n            type: 'radio',\n            defaults: 'left',\n            list: [\n              { value : 'left',  name : 'Left',    className: 'fa fa-align-left'},\n              { value : 'center',  name : 'Center',  className: 'fa fa-align-center' },\n              { value : 'right',   name : 'Right',   className: 'fa fa-align-right'},\n              { value : 'justify', name : 'Justify',   className: 'fa fa-align-justify'}\n            ],\n          },{\n            property: 'text-decoration',\n            type: 'radio',\n            defaults: 'none',\n            list: [\n              { value: 'none', name: 'None', className: 'fa fa-times'},\n              { value: 'underline', name: 'underline', className: 'fa fa-underline' },\n              { value: 'line-through', name: 'Line-through', className: 'fa fa-strikethrough'}\n            ],\n          },{\n            property: 'text-shadow',\n            properties: [\n              { name: 'X position', property: 'text-shadow-h'},\n              { name: 'Y position', property: 'text-shadow-v'},\n              { name: 'Blur', property: 'text-shadow-blur'},\n              { name: 'Color', property: 'text-shadow-color'}\n            ],\n        }],\n      },{\n        name: 'Decorations',\n        open: false,\n        buildProps: ['opacity', 'background-color', 'border-radius', 'border', 'box-shadow', 'background'],\n        properties: [{\n          type: 'slider',\n          property: 'opacity',\n          defaults: 1,\n          step: 0.01,\n          max: 1,\n          min:0,\n        },{\n          property: 'border-radius',\n          properties  : [\n            { name: 'Top', property: 'border-top-left-radius'},\n            { name: 'Right', property: 'border-top-right-radius'},\n            { name: 'Bottom', property: 'border-bottom-left-radius'},\n            { name: 'Left', property: 'border-bottom-right-radius'}\n          ],\n        },{\n          property: 'box-shadow',\n          properties: [\n            { name: 'X position', property: 'box-shadow-h'},\n            { name: 'Y position', property: 'box-shadow-v'},\n            { name: 'Blur', property: 'box-shadow-blur'},\n            { name: 'Spread', property: 'box-shadow-spread'},\n            { name: 'Color', property: 'box-shadow-color'},\n            { name: 'Shadow type', property: 'box-shadow-type'}\n          ],\n        },{\n          property: 'background',\n          properties: [\n            { name: 'Image', property: 'background-image'},\n            { name: 'Repeat', property:   'background-repeat'},\n            { name: 'Position', property: 'background-position'},\n            { name: 'Attachment', property: 'background-attachment'},\n            { name: 'Size', property: 'background-size'}\n          ],\n        },],\n      },{\n        name: 'Extra',\n        open: false,\n        buildProps: ['transition', 'perspective', 'transform'],\n        properties: [{\n          property: 'transition',\n          properties:[\n            { name: 'Property', property: 'transition-property'},\n            { name: 'Duration', property: 'transition-duration'},\n            { name: 'Easing', property: 'transition-timing-function'}\n          ],\n        },{\n          property: 'transform',\n          properties:[\n            { name: 'Rotate X', property: 'transform-rotate-x'},\n            { name: 'Rotate Y', property: 'transform-rotate-y'},\n            { name: 'Rotate Z', property: 'transform-rotate-z'},\n            { name: 'Scale X', property: 'transform-scale-x'},\n            { name: 'Scale Y', property: 'transform-scale-y'},\n            { name: 'Scale Z', property: 'transform-scale-z'}\n          ],\n        }]\n      },{\n        name: 'Flex',\n        open: false,\n        properties: [{\n          name: 'Flex Container',\n          property: 'display',\n          type: 'select',\n          defaults: 'block',\n          list: [\n            { value: 'block', name: 'Disable'},\n            { value: 'flex', name: 'Enable'}\n          ],\n        },{\n          name: 'Flex Parent',\n          property: 'label-parent-flex',\n          type: 'integer',\n        },{\n          name      : 'Direction',\n          property  : 'flex-direction',\n          type    : 'radio',\n          defaults  : 'row',\n          list    : [{\n                    value   : 'row',\n                    name    : 'Row',\n                    className : 'icons-flex icon-dir-row',\n                    title   : 'Row',\n                  },{\n                    value   : 'row-reverse',\n                    name    : 'Row reverse',\n                    className : 'icons-flex icon-dir-row-rev',\n                    title   : 'Row reverse',\n                  },{\n                    value   : 'column',\n                    name    : 'Column',\n                    title   : 'Column',\n                    className : 'icons-flex icon-dir-col',\n                  },{\n                    value   : 'column-reverse',\n                    name    : 'Column reverse',\n                    title   : 'Column reverse',\n                    className : 'icons-flex icon-dir-col-rev',\n                  }],\n        },{\n          name      : 'Justify',\n          property  : 'justify-content',\n          type    : 'radio',\n          defaults  : 'flex-start',\n          list    : [{\n                    value   : 'flex-start',\n                    className : 'icons-flex icon-just-start',\n                    title   : 'Start',\n                  },{\n                    value   : 'flex-end',\n                    title    : 'End',\n                    className : 'icons-flex icon-just-end',\n                  },{\n                    value   : 'space-between',\n                    title    : 'Space between',\n                    className : 'icons-flex icon-just-sp-bet',\n                  },{\n                    value   : 'space-around',\n                    title    : 'Space around',\n                    className : 'icons-flex icon-just-sp-ar',\n                  },{\n                    value   : 'center',\n                    title    : 'Center',\n                    className : 'icons-flex icon-just-sp-cent',\n                  }],\n        },{\n          name      : 'Align',\n          property  : 'align-items',\n          type    : 'radio',\n          defaults  : 'center',\n          list    : [{\n                    value   : 'flex-start',\n                    title    : 'Start',\n                    className : 'icons-flex icon-al-start',\n                  },{\n                    value   : 'flex-end',\n                    title    : 'End',\n                    className : 'icons-flex icon-al-end',\n                  },{\n                    value   : 'stretch',\n                    title    : 'Stretch',\n                    className : 'icons-flex icon-al-str',\n                  },{\n                    value   : 'center',\n                    title    : 'Center',\n                    className : 'icons-flex icon-al-center',\n                  }],\n        },{\n          name: 'Flex Children',\n          property: 'label-parent-flex',\n          type: 'integer',\n        },{\n          name:     'Order',\n          property:   'order',\n          type:     'integer',\n          defaults :  0,\n          min: 0\n        },{\n          name    : 'Flex',\n          property  : 'flex',\n          type    : 'composite',\n          properties  : [{\n                  name:     'Grow',\n                  property:   'flex-grow',\n                  type:     'integer',\n                  defaults :  0,\n                  min: 0\n                },{\n                  name:     'Shrink',\n                  property:   'flex-shrink',\n                  type:     'integer',\n                  defaults :  0,\n                  min: 0\n                },{\n                  name:     'Basis',\n                  property:   'flex-basis',\n                  type:     'integer',\n                  units:    ['px','%',''],\n                  unit: '',\n                  defaults :  'auto',\n                }],\n        },{\n          name      : 'Align',\n          property  : 'align-self',\n          type      : 'radio',\n          defaults  : 'auto',\n          list    : [{\n                    value   : 'auto',\n                    name    : 'Auto',\n                  },{\n                    value   : 'flex-start',\n                    title    : 'Start',\n                    className : 'icons-flex icon-al-start',\n                  },{\n                    value   : 'flex-end',\n                    title    : 'End',\n                    className : 'icons-flex icon-al-end',\n                  },{\n                    value   : 'stretch',\n                    title    : 'Stretch',\n                    className : 'icons-flex icon-al-str',\n                  },{\n                    value   : 'center',\n                    title    : 'Center',\n                    className : 'icons-flex icon-al-center',\n                  }],\n        }]\n      }\n    ]\n}","\ndeclare var _: any\n\nexport let privateClasses = [\"flux-element\", \"flux-component\", \"flux-fill-parent\", \"d-flex\", \"flex-column\"]\n\nexport function cleanCss(css: string): string {\n    let rules = [...new Set(css.split(\"}\"))].filter(r => r.length > 0).map(r => r + \"}\")\n    return rules.reduce((acc: string, e: string) => acc + e, \"\")\n}\n\nexport function getAllComponentsRec(editor, component = undefined) {\n\n    const getAllComponents = (model, result = []) => {\n\n        result.push(model);\n        model.components().each(mod => getAllComponents(mod, result))\n        return result;\n    }\n    component = component || editor.DomComponents.getWrapper()\n    let rList = getAllComponents(component);\n    return rList.reduce((acc, e) => Object.assign({}, acc, { [e.ccid]: e }), {})\n}\n","import { ErrorLog, GroupModules, ModuleError, ModuleFlux, Process, ProcessMessage, ProcessMessageKind } from '@youwol/flux-core';\nimport { attr$, HTMLElement$, render, Stream$, VirtualDOM } from '@youwol/flux-view';\nimport { cpuUsage } from 'node:process';\nimport { merge, Observable } from 'rxjs';\nimport { delay, filter, map, take } from 'rxjs/operators';\nimport { WorkflowPlotter } from './builder-editor/builder-plots';\nimport { AppStore } from './builder-editor/builder-state';\nimport { ContextView } from './builder-editor/views/context.view';\n\n\n/**\n * Focus a module in the workflow by toggeling a provided class on the module's svg group element for \n * a provided duration. Focusing means: \n * -    the active layer is changed to the mdoule's containing layer if need be\n * -    the builder canvas is translated such that the module is located at its center\n * -    if styles are associated to the toggeling class, those are applied during the specified duration\n * \n * @param mdle module to focus\n * @param appStore reference to the appStore of the application\n * @param workflowPlotter reference to the workflow plotter of the application\n * @param toggledClass name of the toggeling class\n * @param duration duration of the focus\n */\nfunction focusAction(\n    mdle: ModuleFlux, \n    appStore: AppStore, \n    workflowPlotter: WorkflowPlotter,\n    toggledClass: string,\n    duration: number = 5000 ) {\n     \n    let root = appStore.getRootLayer()\n    let layer = appStore.project.workflow.modules\n    .find((mdle) => mdle instanceof GroupModules.Module && mdle.getModuleIds().includes(mdle.moduleId) )\n    appStore.selectActiveLayer(layer.moduleId)\n    \n    setTimeout( () => {\n        let g = document.getElementById(mdle.moduleId)\n        let bBox = g.getBoundingClientRect()\n        workflowPlotter.drawingArea.lookAt( 0.5*(bBox.left + bBox.right),  0.5*(bBox.top + bBox.bottom))\n        g.classList.toggle(toggledClass)\n        setTimeout( () => g.classList.toggle(toggledClass), duration )\n    }, 0 )\n}\n\n/**\n * Plug the notification system to the application environment.\n * For now, only module's errors (ModuleError in flux-core) are handled.\n * \n * @param appStore reference to the appStore of the application\n * @param workflowPlotter reference to the workflow plotter of the application\n */\nexport function plugNotifications(\n    appStore: AppStore,\n    workflowPlotter: WorkflowPlotter){\n\n    appStore.environment.errors$.pipe(\n        filter(  (log:ErrorLog) => log.error instanceof ModuleError )\n    ).subscribe(\n        (log:ErrorLog<ModuleError>) => Notifier.error({ \n            message: log.error.message, \n            title:  log.error.module.Factory.id, \n            actions: [\n                {\n                    name: 'focus', \n                    exe: () => focusAction(log.error.module, appStore, workflowPlotter, \"error\") \n                },\n                {\n                    name: 'report',\n                    exe: () => ContextView.reportContext(log.context, log.id)\n                }\n            ]\n        })\n    )\n    appStore.environment.processes$.subscribe( (p: Process)=> {\n        \n        let classesIcon = {\n            [ProcessMessageKind.Scheduled]: \"fas fa-clock px-2\",\n            [ProcessMessageKind.Started]: \"fas fa-cog fa-spin px-2\",\n            [ProcessMessageKind.Succeeded]: \"fas fa-check fv-text-success px-2\",\n            [ProcessMessageKind.Failed]: \"fas fa-times fv-text-error px-2\",\n            [ProcessMessageKind.Log]: \"fas fa-cog fa-spin px-2\",\n        }\n        let doneMessages = [ProcessMessageKind.Succeeded, ProcessMessageKind.Failed]\n        let actions = p.context \n            ? [{\n                name: 'report',\n                exe: () => ContextView.reportContext(p.context)\n                }]\n            : []\n        Notifier.notify({\n            title: p.title,\n            message: attr$(p.messages$, (step: ProcessMessage)=> step.text),\n            classIcon:  attr$(p.messages$, (step: ProcessMessage)=> classesIcon[step.kind]),\n            actions,\n            timeout:p.messages$.pipe(filter( m => doneMessages.includes(m.kind)), take(1),delay(1000))\n        })\n    })\n}\n\n/**\n * Interface for notifier's action\n */\nexport interface INotifierAction{\n\n    /**\n     * displayed name of the action\n     */\n    name : string\n\n    /**\n     * execution function \n     */\n    exe : () => void\n}\n\n/**\n * This class provides a notification system that popups message in the \n * HTML document.\n * \n * For now, only module's errors (ModuleError in flux-core) are handled.\n * \n * Notification can be associated to custom [[INotifierAction | action]]\n */\nexport class Notifier{\n\n    static classesIcon={\n        4: \"fas fa-2x fa-exclamation-circle text-danger px-2 mt-auto mb-auto\",\n        3: \"fas fa-2x fa-exclamation text-warning px-2 mt-auto mb-auto\",\n    }\n    static classesBorder={\n        4: \"border-danger\",\n        3: \"border-warning\",\n    }\n\n    constructor( public readonly appStore: AppStore){\n\n    }\n    /**\n     * Popup a notification with level=='Info'\n     * \n     * @param message content\n     * @param title title\n     * @param actions available actions\n     */\n    static notify({message, title, classIcon, actions, timeout}:{\n        message?: string | Stream$<unknown, string>,\n        classIcon: string | Stream$<unknown, string>,\n        title: string,\n        actions: INotifierAction[],\n        timeout?: Observable<any>\n    }){\n        Notifier.popup( { message, title, actions, classIcon, timeout, classBorder:\"\" } )\n    }\n    /**\n     * Popup a notification with level=='Error'\n     * \n     * @param message content\n     * @param title title\n     * @param actions available actions\n     */\n    static error( {message, title, actions}:{\n        message: string,\n        title: string\n        actions: INotifierAction[]\n    }){\n\n        Notifier.popup( { message, title, actions, classIcon:Notifier.classesIcon[4], classBorder:Notifier.classesBorder[4] } )\n    }\n    /**\n     * Popup a notification with level=='Warning'\n     * \n     * @param message content\n     * @param title title\n     * @param actions available actions\n     */\n    static warning( {message, title, actions}:{\n        message: string,\n        title: string\n        actions: INotifierAction[]\n    }){\n\n        Notifier.popup( { message, title, actions, classIcon:Notifier.classesIcon[3], classBorder:Notifier.classesBorder[3] } )\n    }\n\n    private static popup( { message, title, actions, classIcon, classBorder, timeout } :{\n        message?: string | Stream$<unknown, string>,\n        title: string\n        actions: INotifierAction[],\n        classIcon: string | Stream$<unknown, string>,\n        classBorder: string,\n        timeout?: Observable<any>\n    }){\n\n        let view : VirtualDOM = {\n            class:\"m-2 p-2 my-1 bg-white rounded \" + classBorder,\n            style: {border:'solid'},\n            children:[\n                {\n                    class:\"fas fa-times\",\n                    style:{float:'right',cursor:'pointer'},\n                    onclick: (event)=> {\n                        event.target.parentElement.remove()\n                    } \n                },\n                {\n                    class:'d-flex py-2 align-items-center',\n                    children:[\n                        {tag:'i', class: classIcon },\n                        {tag:'span', class:'d-block',innerText:title}\n                    ]\n                },\n                message ? {tag:'span', class:'d-block px-2', innerText:message} : {},\n                {\n                    class:'d-flex align-space-around mt-2 fv-pointer',\n                    children: actions.map( action => ({\n                        tag:'span', \n                        class:\"mx-2 p-2 fv-bg-background-alt rounded fv-hover-bg-background fv-hover-text-focus fv-text-primary\", \n                        innerText: action.name, \n                        onclick: ()=>action.exe()\n                    }))\n                }\n            ],\n            connectedCallback: (elem: HTMLElement$) => {\n                timeout && timeout.subscribe( () => elem.remove())\n            }\n        }\n        let div = render(view)\n        document.getElementById(\"notifications-container\").appendChild(div)\n    }\n}","\nimport { combineLatest, merge, ReplaySubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport * as grapesjs from 'grapesjs'\n\nimport { ModuleFlux, Environment, Journal, ConfigurationStatus, ExpectationStatus } from '@youwol/flux-core';\nimport { createDrawingArea } from '@youwol/flux-svg-plots';\nimport { ContextMenu } from '@youwol/fv-context-menu';\n\nimport { AppStore, AppObservables, UiState, AppDebugEnvironment, \n    LogLevel, AppBuildViewObservables } from './builder-editor/builder-state/index';\nimport { WorkflowPlotter } from './builder-editor/builder-plots/index';\nimport { createAttributesPanel, ContextMenuState, ConfigurationStatusView, ExpectationView } from './builder-editor/index'\n\nimport { createLayoutEditor, initLayoutEditor } from './layout-editor/index';\n\nimport { plugNotifications } from './notification';\nimport { AssetsBrowserClient } from './clients/assets-browser.client';\nimport { AssetsExplorerView } from './builder-editor/views/assets-explorer.view';\nimport { render } from '@youwol/flux-view';\nimport { loadingLibView, loadingProjectView } from './loading.views';\nimport { autoAddElementInLayout, autoRemoveElementInLayout, removeTemplateElements, replaceTemplateElements, updateElementsInLayout } from './layout-editor/flux-rendering-components';\nimport { setDynamicComponentsBlocks } from './layout-editor/flux-blocks';\n\n\nlet {appStore, appObservables, layoutEditor} = await initializeRessources()\n\nlet workflowPlotter = initDrawingArea(appStore,appObservables)\n\nplugNotifications(appStore, workflowPlotter)\n\nlet contextState = new ContextMenuState( appStore, workflowPlotter.drawingArea )\nnew ContextMenu.View({state:contextState, class:\"fv-bg-background\"} as any)\n\nconnectStreams(appStore, workflowPlotter, layoutEditor, appObservables )\n\nlet projectId = new URLSearchParams(window.location.search).get(\"id\")\nlet uri = new URLSearchParams(window.location.search).get(\"uri\")\n\nif(projectId){\n    let loadingDiv = document.getElementById(\"content-loading-screen\") as HTMLDivElement\n    let divProjectLoading = loadingProjectView(loadingDiv)\n    appStore.environment.getProject(projectId).subscribe( (project) => {\n        divProjectLoading.innerText = `> project loaded` \n        divProjectLoading.style.setProperty(\"color\", \"green\") \n        appStore.loadProject(projectId, project, (event) => {\n            loadingLibView(event, loadingDiv)\n        })\n    })\n}\nelse if(uri){\n    appStore.loadProjectURI(encodeURI(uri))\n}\n\n\nexport async function initializeRessources() : \n    Promise<{ appStore: AppStore, appObservables: AppObservables, layoutEditor: grapesjs.Editor }>{\n\n    let defaultLog      = false\n    let appObservables  = AppObservables.getInstance()\n    let debugSingleton  = AppDebugEnvironment.getInstance()\n\n    debugSingleton.workflowUIEnabled       = defaultLog\n    debugSingleton.observableEnabled       = defaultLog\n    debugSingleton.workflowUIEnabled       = defaultLog\n    debugSingleton.workflowViewEnabled     = defaultLog\n    debugSingleton.WorkflowBuilderEnabled  = defaultLog\n    debugSingleton.renderTopicEnabled      = defaultLog\n    debugSingleton.workflowView$Enabled    = defaultLog\n\n    let layoutEditor : any = await createLayoutEditor()\n    let doc = layoutEditor.Canvas.getDocument() as HTMLDocument\n    let noConsole = {\n        log:(message?: any, ...optionalParams: any[])=> {},\n        warn:(message?: any, ...optionalParams: any[])=> {},\n        error:(message?: any, ...optionalParams: any[])=> {},\n    }\n\n    let environment = new Environment(\n        {   console/*: noConsole as Console*/,\n            renderingWindow: doc.defaultView,\n            executingWindow: window\n        }\n    )\n    \n    debugSingleton.logWorkflowBuilder( {  \n      level : LogLevel.Info, \n      message: \"Environment\", \n      object:{ environment }\n    })\n    \n    let appStore = AppStore.getInstance( environment )\n\n    AssetsBrowserClient.appStore = appStore\n    // A single instance of assets browser to keep in memory expandeds nodes etc\n    AssetsExplorerView.singletonState = new AssetsExplorerView.State({\n        appStore\n    })\n\n    Journal.registerView({\n        name: \"ConfigurationStatus\",\n        isCompatible:  (data) => \n            data instanceof ConfigurationStatus, \n        view: (data: ConfigurationStatus<unknown>) => \n            render(ConfigurationStatusView.journalWidget(data))\n    })\n    Journal.registerView({\n        name: \"ExpectationStatus\",\n        isCompatible:  (data) => \n            data instanceof ExpectationStatus, \n        view: (data: ExpectationStatus<unknown>) => \n            render(ExpectationView.journalWidget(data))\n    })\n    \n    return { \n        appStore,\n        appObservables,\n        layoutEditor\n    }\n}\n\nfunction setUiState(state: UiState){   \n\n    let renderNode  = document.getElementById(\"render-component\")\n    let builderNode = document.getElementById(\"builder-component\")\n\n    builderNode.classList.remove(\"combined\",\"builder\",\"render\",\"none\")\n    renderNode.classList.remove(\"combined\",\"builder\",\"render\",\"none\")\n    builderNode.classList.add(state.mode)\n    renderNode.classList.add(state.mode)\n}\n\nexport function connectStreams(appStore:AppStore, workflowPlotter: WorkflowPlotter, layoutEditor: grapesjs.Editor, appObservables:AppObservables ){\n\n    let loading = true\n\n    appObservables.packagesLoaded$.subscribe( ()=> document.getElementById(\"loading-screen\").remove() )\n    appObservables.uiStateUpdated$.subscribe( (state:UiState)=> setUiState(state) )\n    appObservables.adaptorEdited$.subscribe( ({adaptor,connection} : {adaptor:any,connection:any}) => {/*this.editAdaptor(adaptor,connection)*/})\n    \n    let layoutEditor$ = new ReplaySubject(1)\n    \n    appObservables.renderingLoaded$.subscribe( ({layout, style}: {layout:HTMLDivElement, style: string}) => {\n        initLayoutEditor(layoutEditor, {layout, style}, appStore)\n        layoutEditor$.next(layoutEditor)\n    })\n        \n    combineLatest([layoutEditor$,appObservables.modulesUpdated$])\n    .subscribe(([editor,diff] :[any,any]) => { \n        \n        let notReplaced = diff.removedElements.filter( mdle => !diff.createdElements.map(m =>m.moduleId).includes(mdle.moduleId) )\n        removeTemplateElements(notReplaced, editor)\n        if(loading)\n            replaceTemplateElements(diff.createdElements.map( (m:ModuleFlux)=> m.moduleId), editor,appStore)\n        if(!loading){\n            autoAddElementInLayout(diff, editor,appStore ) \n            updateElementsInLayout(diff, editor,appStore ) \n            autoRemoveElementInLayout(diff, editor,appStore ) \n        }\n            \n        setDynamicComponentsBlocks(appStore, editor)    \n    })\n    \n    combineLatest([layoutEditor$,appObservables.activeLayerUpdated$])\n    .subscribe(([editor,diff] :[any,any]) => { \n        setDynamicComponentsBlocks(appStore, editor)\n    })\n\n    combineLatest([layoutEditor$, appObservables.uiStateUpdated$]).pipe(\n        filter( ( [editor, state]:[any,UiState])=> state.mode ===\"combined\" || state.mode ===\"render\"  )\n    ).subscribe( ( [editor, state]:[any,UiState])=> replaceTemplateElements(appStore.project.workflow.modules.map( m => m.moduleId), editor, appStore)\n    )\n    \n    combineLatest([layoutEditor$,appObservables.unselect$])\n    .subscribe(([editor,_] :[any,any]) => {\n        editor.Commands.stop(\"show-attributes\")\n    })\n    \n    let selection$ = merge(appObservables.moduleSelected$,appObservables.connectionSelected$)\n    combineLatest([layoutEditor$,selection$]).subscribe(([editor,_] : [any,any]) => {\n        editor.Commands.run(\"show-attributes\")\n    })\n    \n    combineLatest([layoutEditor$,appObservables.uiStateUpdated$])\n    .subscribe(([editor,_] : [any,any]) => {\n        editor.refresh()\n    })\n\n    appObservables.ready$.subscribe(() => {\n        createAttributesPanel(appStore, appObservables)\n    })\n\n    layoutEditor$.subscribe( r => {\n        loading = false \n    })\n}\n\nexport function initDrawingArea(appStore: AppStore, appObservables: AppObservables ){\n\n    let plottersObservables = AppBuildViewObservables.getInstance()\n    \n    let width = 1000\n    let height = 1000\n    let drawingArea = createDrawingArea(\n      {\n        containerDivId: \"wf-builder-view\",\n        width: width,\n        height: height,\n        xmin: -width / 2.,\n        ymin: -width / 2.,\n        xmax: width / 2.,\n        ymax: width / 2.,\n        margin: 50,\n        overflowDisplay: { left: 1e8, right: 1e8, top: 1e8, bottom: 1e8 }\n      })\n          \n    return new WorkflowPlotter(drawingArea, appObservables, plottersObservables, appStore)\n}\n","\nimport { UiState, AppDebugEnvironment, LogLevel, AppStore} from '../builder-editor/builder-state/index';\nimport { Component } from '@youwol/flux-core';\nimport { createLayerPickerView } from './layer-picker.view';\n\nexport function commandsGeneral(appStore: AppStore, editor): Array<any> {\n    \n    let debugSingleton = AppDebugEnvironment.getInstance()\n    let cmds = [\n        ['toggle-render-view', {\n\n            run(editor:any, sender:any) {\n\n                if(appStore.uiState.mode==\"builder\")\n                    appStore.setUiState(new UiState(\"combined\",false,false))   \n                if(appStore.uiState.mode==\"none\")\n                    appStore.setUiState(new UiState(\"render\",false,false))\n            },\n            stop(editor:any, sender:any) {\n                \n                if(appStore.uiState.mode==\"combined\")\n                    appStore.setUiState(new UiState(\"builder\",false,false))   \n                if(appStore.uiState.mode==\"render\")\n                    appStore.setUiState(new UiState(\"none\",false,false))\n            }\n        }],\n        ['toggle-builder-view', {\n            run(editor:any, sender:any) {\n         \n                if(appStore.uiState.mode==\"render\")\n                    appStore.setUiState(new UiState(\"combined\",false,false))\n                if(appStore.uiState.mode==\"none\")\n                    appStore.setUiState(new UiState(\"builder\",false,false))\n            },\n            stop(editor:any, sender:any) {\n    \n                if(appStore.uiState.mode==\"combined\")\n                    appStore.setUiState(new UiState(\"render\",false,false))\n                if(appStore.uiState.mode==\"builder\")\n                    appStore.setUiState(new UiState(\"none\",false,false))\n            }\n        }],\n        ['toggle-fullscreen', {\n            run(editor:any, sender:any) {\n                // see  document.addEventListener(\"fullscreenchange\"...) callback\n                document.documentElement.requestFullscreen();\n            },\n        }],\n        ['duplicate-module', {\n            run(editor:any, sender:any) { \n                let mdles = appStore.getModulesSelected()\n                appStore.duplicateModules(mdles)\n            }\n        }],\n        ['horizontal-align', {\n            run(editor:any, sender:any) { \n                let mdles = appStore.getModulesSelected()\n                appStore.alignH(mdles)\n            }\n        }],\n        ['vertical-align', {\n            run(editor:any, sender:any) { \n                let mdles = appStore.getModulesSelected()\n                appStore.alignV(mdles)\n            }\n        }],\n        ['group-module', {\n            run(editor:any, sender:any) { \n                appStore.addGroup(appStore.getModulesSelected().map(m => m.moduleId))\n            }\n        }],\n        ['group-as-component', {\n            run(editor:any, sender:any) { \n                appStore.addComponent(appStore.getModulesSelected().map(m => m.moduleId))\n            }\n        }],\n        ['publish-component', {\n            run(editor:any, sender:any) { \n                appStore.publishComponent(appStore.getModuleSelected() as Component.Module)\n            }\n        }],\n        ['display-tree-structure', {\n            run(editor:any, sender:any) { \n                const div = createLayerPickerView(appStore, editor)\n                document.getElementById(\"panel__app-tree-structure\").innerHTML=\"\"\n                document.getElementById(\"panel__app-tree-structure\").appendChild(div)\n            }\n        }\n        ]\n    ]\n    document.addEventListener(\"fullscreenchange\", () => {\n        document.querySelectorAll(\".controls-panel\").forEach( control => control.classList.toggle(\"fullscreen\"))\n        editor.refresh()\n    });\n\n    debugSingleton.debugOn &&\n    debugSingleton.logRenderTopic({ level:LogLevel.Info, message: \"General commands\",  object: { cmds  }})  \n    return cmds\n}\n","import { createHTMLElement, GroupModules, LayerTree } from '@youwol/flux-core'\nimport { AppStore } from '../builder-editor/builder-state/index'\n\n\nexport function createLayerPickerView(appStore: AppStore, editor): HTMLDivElement {\n\n  let subscriptions = []\n\n  function createContentRecursive(grpMdle: GroupModules.Module) {\n\n   // const childrenModules = layer.moduleIds.map(moduleId => ({ tag: 'div', class: \"text-muted  px-1\", innerText: appStore.getModule(moduleId).configuration.title }))\n    const childrenLayers = grpMdle.getDirectChildren()\n    .filter( mdle => mdle instanceof GroupModules.Module)\n    .map( (child:GroupModules.Module) => createContentRecursive(child))\n    const selectedClass = grpMdle.moduleId == appStore.getActiveLayer().moduleId ? \"font-weight-bold\" : \"\"\n    return {\n        class: \"w-100\",\n        __label: { \n          innerText: grpMdle.configuration.title, \n          class: \"flux-hoverable w-100 px-1 \"+selectedClass,\n          onclick: () => appStore.selectActiveLayer(grpMdle.moduleId) \n        },\n        __div: {\n          class: \"children pl-2 w-100\",\n          children: childrenLayers\n        }\n    }\n  }\n\n\n  let view = createHTMLElement({\n    data: {\n      id: \"tree-view-layers\",\n      class: \"px-2 text-light border text-left flux-bg-primary\",\n      onmouseout: (event) => {\n        if (event.path[0].id == \"tree-view-layers\") {\n          const selection = document.getElementById(\"tree-view-layers\").querySelector(\".children\")\n          selection && selection.remove()\n        }\n      },\n      onclick: () => {\n        editor.Commands.run(\"display-tree-structure\")\n      },\n      __div: {\n        class: \"\",\n        innerHTML: \"active layer <i class='fas fa-caret-down pl-2'></i>\",\n        children: [{\n          tag: 'div',\n          class: 'flux-bg-primary text-black  children small py-2',\n          __div: createContentRecursive(appStore.getRootLayer())\n        }]\n      },\n    },\n    subscriptions,\n    classesDict: {\n    }\n  })\n  return view as HTMLDivElement\n}","\nimport { AppStore } from '../builder-editor/builder-state/index'\nimport { ShareUriView } from '../builder-editor/views/share-uri.view'\n\nexport function getGeneralPanels(appStore: AppStore) {\n\n  return [{\n    id: 'app-basic-actions',\n    el: '#panel__app-basic-actions',\n    buttons: [\n      {\n        id: 'save-project',\n        className: 'btn-save-project',\n        label: '<i class=\"fas fa-save panel-action\" data-toggle=\"tooltip\" title=\"Save project\" ></i>',\n        command(editor: any) { appStore.saveProject() }\n      },\n      {\n        id: 'share-uri',\n        className: 'btn-share-uri',\n        label: '<i class=\"fas fa-link panel-action\" data-toggle=\"tooltip\" title=\"share uri\" ></i>',\n        command(editor: any) { ShareUriView.popupModal(appStore) }\n      },\n      {\n        id: 'undo',\n        className: 'btn-undo',\n        label: '<i class=\"fas fa-undo panel-action\" data-toggle=\"tooltip\" title=\"Undo\" ></i>',\n        command(editor: any) { appStore.undo() }\n      },\n      {\n        id: 'redo',\n        className: 'btn-redo',\n        label: '<i class=\"fas fa-redo panel-action\" data-toggle=\"tooltip\" title=\"Redo\" ></i>',\n        command(editor: any) { appStore.redo() }\n      },\n      {\n        id: 'settings',\n        className: 'btn-settings',\n        label: '<i class=\"fas fa-cog panel-action\" data-toggle=\"tooltip\" title=\"open settings panel\" ></i>',\n        command(editor: any) { appStore.projectSettings() }\n      }\n    ],\n  },\n  {\n    id: 'app-layout-builder-actions',\n    el: '#panel__app-layout-builder-actions',\n    buttons: [\n      {\n        id: 'toggle-builder-view',\n        active: true, // active by default\n        className: 'app-layout-builder-actions',\n        label: '<i id=\"toggle-builder-view\" class=\"fas fa-project-diagram  panel-action\" data-toggle=\"tooltip\" title=\"Toggle builder view\"></i>',\n        command: 'toggle-builder-view'\n      }]\n  },\n  {\n    id: 'app-layout-render-actions',\n    el: '#panel__app-layout-render-actions',\n    buttons: [\n      {\n        id: 'toggle-render-view',\n        className: 'app-layout-render-actions',\n        label: '<i id=\"toggle-render-view\" class=\"fas fa-eye  panel-action\" data-toggle=\"tooltip\" title=\"Toggle builder view\"></i>',\n        command: 'toggle-render-view'\n      },\n    ],\n  },\n  {\n    id: 'app-layout-actions',\n    el: '#panel__app-layout-actions',\n    buttons: [\n      {\n        id: 'toggle-full-screen',\n        active: false,\n        className: 'app-layout-actions',\n        label: '<i id=\"toggle-render-view\" class=\"fas fa-expand  panel-action\" data-toggle=\"tooltip\" title=\"Fullscreen mode\"></i>',\n        command: 'toggle-fullscreen',\n        toggable: false\n      },\n    ],\n  },\n  {\n    id: 'panel__app-selection-actions',\n    el: '#panel__app-selection-actions',\n    buttons: [\n      {\n        id: 'duplicate-module',\n        active: false, // active by default\n        className: 'selection-actions',\n        label: '<i id=\"toggle-render-view\" class=\"fas fa-clone panel-action\" data-toggle=\"tooltip\" title=\"duplicate selected modules\"></i>',\n        command: 'duplicate-module',\n        toggable: false\n      },\n      {\n        id: 'horizontal-align',\n        active: false, // active by default\n        className: 'selection-actions',\n        label: '<i id=\"toggle-render-view\" class=\"fas fa-ruler-vertical panel-action\" data-toggle=\"tooltip\" title=\"horizontal align selected modules\"></i>',\n        command: 'horizontal-align',\n        toggable: false\n      },\n      {\n        id: 'vertical-align',\n        active: false, // active by default\n        className: 'selection-actions',\n        label: '<i id=\"toggle-render-view\" class=\"fas fa-ruler-horizontal panel-action\" data-toggle=\"tooltip\" title=\"vertical align selected modules\"></i>',\n        command: 'vertical-align',\n        toggable: false\n      },\n      {\n        id: 'group-module',\n        active: false, // active by default\n        className: 'selection-actions',\n        label: '<i id=\"toggle-render-view\" class=\"fas fa-object-group panel-action\" data-toggle=\"tooltip\" title=\"group selected modules\"></i>',\n        command: 'group-module',\n        toggable: false\n      }\n    ],\n  }, {\n    id: 'panel__app-component-actions',\n    el: '#panel__app-component-actions',\n    buttons: [\n      {\n        id: 'create-component',\n        active: false, // active by default\n        className: 'selection-actions',\n        label: '<i id=\"create-component\" class=\"fas fa-cube panel-action\" data-toggle=\"tooltip\" title=\"create a component from selected modules\"></i>',\n        command: 'group-as-component',\n        toggable: false\n      },\n      {\n        id: 'publish-component',\n        active: false, // active by default\n        className: 'selection-actions',\n        label: '<i id=\"publish-component\" class=\"fas fa-upload panel-action\" data-toggle=\"tooltip\" title=\"publish selected component\"></i>',\n        command: 'publish-component',\n        toggable: false\n      }\n    ]\n  },\n  {\n    id: 'panel__app-tree-structure',\n    el: '#panel__app-tree-structure',\n    buttons: [\n      {\n        id: 'display-tree-structure',\n        active: false, // active by default\n        className: 'tree-structure',\n        label: '<label class=\"text-light border px-2\" >active layer <i class=\"fas fa-caret-down pl-2\"></i> </label>',\n        command: 'display-tree-structure',\n        toggable: false\n      }\n    ]\n  }\n  ]\n}"],"mappings":";;;;;;;;;;;;;;;AAGA;AAGA;AAGA;AAMA;AAAA;AACA;AACA;AACA;AACA;AARA;AAEA;AACA;AAOA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;A;;;;;;;;;;;;;;;;;;;;;;;AC1FA;AACA;AACA;AACA;AAEA;AACA;AAGA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAJA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AAGA;AAUA;AAAA;AACA;AACA;AACA;AAXA;AACA;AAEA;AACA;AACA;AACA;AAOA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAIA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAGA;AACA;AAEA;AACA;AACA;A;;;;;;;;;;;;;;;;;ACzSA;AAEA;AAGA;AAIA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAIA;AAAA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAGA;AAGA;AACA;AACA;A;;;;;;;;;;;;;;;;;;;;;;AC1GA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;;;;;;;;;AChHA;AAIA;AACA;AAEA;AACA;AACA;AACA;A;;;;;;;;;;;;;;;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;;;;;;;;;;ACFA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AAMA;AANA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;A;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;;;;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAWA;AAAA;AACA;AACA;AACA;AAZA;AAEA;AAEA;AAGA;AA6EA;AACA;AAvEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;;;;;;;;;;ACpUA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAKA;AAAA;AACA;AACA;AACA;AANA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;A;;;;;;;;;;;;;;;;;;;;;;AC1EA;AAGA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAWA;AAAA;AACA;AACA;AACA;AACA;AAbA;AAGA;AACA;AACA;AACA;AACA;AAQA;AAGA;AAGA;AAGA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;;;;;;;;;;;;ACpGA;AAAA;AACA;AACA;AACA;AACA;AACA;AAQA;AAAA;AACA;AACA;AACA;AARA;AACA;AACA;AACA;AAOA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AA0BA;AAxBA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAUA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAbA;AACA;AACA;A;;;;;;;;;;;;;;;;AC1HA;AACA;AAEA;AAUA;AACA;AAHA;AAIA;AACA;AACA;AACA;AACA;AAbA;AACA;AACA;AACA;AACA;AAWA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;;AAxBA;AACA;AACA;A;;;;;;;;;;;;;;;;ACRA;AAGA;AAIA;AAoCA;AA1BA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1CA;AACA;AACA;AACA;AACA;AAwCA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;;AArDA;AACA;AACA;A;;;;;;;;;;;;;;;;;;;;;;;ACXA;AAGA;AAEA;AAGA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;A;;;;;;;;;;;;;;;;;;;;AC9JA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAOA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;A;;;;;;;;;;;;;;;;;ACtGA;AAIA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;A;;;;;;;;;;;;;;;;;;;;;;;AClDA;AAGA;AACA;AACA;AAGA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAKA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;A;;;;;;;;;;;;;;;;;AC5RA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;;;;;;;;;;;;;;;;;;;;;;AC9CA;AACA;AACA;AAUA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAIA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;;;;;;;;;;;;;;;ACpeA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;A;;;;;;;;;;;;;;;;;;ACxDA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrDA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AASA;AAwDA;AACA;AACA;AACA;AA7CA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAOA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAzEA;AACA;AACA;AAKA;AACA;AAmxBA;AACA;AACA;A;;;;;;;;;;;;;;;;;ACrDA;AACA;AAGA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlDA;AAmDA;AACA;AACA;A;;;;;;;;;;;;;AC5DA;AAIA;AACA;AACA;AACA;AACA;AACA;A;;;;;;;;;;;;;;;;ACPA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;;;;;;;;;;;;AChBA;AACA;AAIA;AAkCA;AAxBA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAtCA;AACA;AACA;AACA;AACA;AAoCA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;;AAjDA;AACA;AACA;A;;;;;;;;;;;;;;ACLA;AAEA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;A;;;;;;;;;;;;;;;;;;;ACzDA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;;;;;;;;;ACpHA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AA8BA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;A;;;;;;;;;;;;;;;;;;;;;;AClFA;AACA;AACA;AACA;AAGA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAIA;AAHA;AACA;AAOA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;;;;;;;;;;;;;;;;;;AChGA;AACA;AACA;AACA;A;;;;;;;;;;;;;;;;;;;;;;;ACHA;AAGA;AACA;AAIA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAKA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;A;;;;;;;;;;;;;;;AClHA;AACA;;;;;;;;;;;;;;;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;;;;;;;;;;;;;;;;;ACTA;AACA;AACA;AAGA;AACA;AAIA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;A;;;;;;;;;;;;;;;;AClhJA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;;;;;;;;;ACvDA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;;;;;;;;;;;;;;;;;;;;;;ACzBA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAYA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAlDA;AA0DA;AA4BA;AAUA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAGA;AACA;AACA;;AAnMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAwMA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzBA;AA0BA;AACA;AACA;A;;;;;;;;;;;;;;;;;;;;;;;;ACvVA;AACA;AACA;AACA;AACA;AACA;AAIA;AAAA;AAIA;AAYA;AAOA;AACA;AACA;AAXA;AAYA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAzCA;AARA;AAqDA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAchBA;AAmBA;AASA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAhBA;AACA;AACA;AAkBA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;A;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzcA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAUA;AAOA;AAEA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AAEA;AACA;AAnBA;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AAEA;AACA;AAGA;AAMA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAvCA;AAyCA;AAKA;;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;A;;;;;;;;;;;;;;;;;;;AC/QA;AACA;AACA;AAGA;AAAA;AAGA;AAIA;AAOA;AACA;AACA;AAbA;AAqBA;AAWA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAtDA;AACA;AACA;AACA;AALA;AA2DA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAIA;AACA;AAEA;AACA;AACA;AACA;A;;;;;;;;;;;;;;;;;AC7GA;AACA;AACA;AAGA;AAAA;AAGA;AAKA;AAOA;AACA;AACA;AACA;AACA;AAhBA;AAwBA;AAaA;AAUA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;;AA3CA;AACA;AACA;AACA;AALA;AAkDA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3BA;AA4BA;AACA;AACA;A;;;;;;;;;;;;;;AClHA;AAGA;AAAA;AAGA;AAQA;AAQA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5CA;AAmDA;AAYA;AASA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAhCA;AACA;AACA;AACA;AALA;AAqCA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA;AAyBA;;;;;;;;;;;;;;;;;;;AAmBA;AACA;AACA;AACA;A;;;;;;;;;;;;;;;;;;;;;;;;;AC/IA;AAEA;AACA;AAEA;AACA;AAMA;AAkBA;AAbA;AAMA;;;;;AAKA;AAGA;AACA;AACA;AAhBA;AAHA;AACA;AACA;;AACA;AAMA;AAJA;AACA;AACA;AACA;;AAMA;AAhBA;AAHA;AACA;AACA;;AACA;AAAA;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAQA;AAAA;AANA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;;;;;;;;;;;;;;;AChIA;AAKA;AAEA;AAEA;AAGA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AAGA;AAIA;AACA;AACA;AACA;AACA;AAGA;AAIA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAOA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA;AAgCA;AAeA;AAPA;AAgBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AA3CA;AACA;AACA;AACA;AACA;AACA;AAPA;AAgDA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAhBA;AAkBA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;A;;;;;;;;;;;;;;;;;;;ACrSA;AAEA;AACA;AAGA;AAAA;AAGA;AAMA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAMA;AAGA;AACA;AACA;AACA;AACA;AACA;AAdA;AAgBA;AAEA;AACA;AACA;AACA;AALA;AAOA;AAEA;AACA;AACA;AACA;AALA;AAOA;AAKA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAGA;AACA;AACA;AACA;AACA;AAPA;AASA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAaA;AA5BA;AA8BA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAeA;AAIA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AApBA;AA4BA;AAUA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AACA;AACA;;AAPA;AACA;AACA;AACA;AALA;AA8BA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhDA;AAiDA;AACA;AACA;A;;;;;;;;;;;;;;;;;;AC/QA;AAEA;AAEA;AAGA;AAAA;AAGA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAeA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AA3CA;AA8CA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAoBA;AAKA;AAQA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAlCA;AAyCA;AAYA;AASA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAvDA;AACA;AACA;AACA;AALA;AA2DA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzBA;AA4BA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;;;;;;;;;;;;;;;;;;;ACjTA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AAAA;AAEA;AAMA;AAJA;AASA;AACA;AACA;AACA;AACA;AASA;AAeA;AASA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAKA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AA3GA;AACA;AACA;AACA;AALA;AAgHA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAmBA;AACA;AACA;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;;;;;;;;;;;;;ACbA;AACA;AAGA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;A;;;;;;;;;;;;;;;;;;;;;AC7BA;AAIA;AACA;AACA;AACA;AAKA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AAQA;AAYA;AACA;AAEA;AACA;AACA;AACA;AACA;AA3BA;AAoCA;AAaA;AAQA;AAEA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAnEA;AACA;AACA;AACA;AALA;AAwEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;;;;;;;;;;;;;;;;;;;ACtKA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAEA;AAIA;AAGA;AACA;AACA;AATA;AAgBA;AAcA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAMA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;AAvGA;AACA;AACA;AACA;AALA;AA4GA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAgBA;AACA;AACA;A;;;;;;;;;;;;;;;;;;;;;ACzJA;AACA;AACA;AACA;AAGA;AAAA;AAEA;AAaA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAxDA;AAyDA;AACA;AACA;A;;;;;;;;;;;;;;;;;;;;;;;;ACnEA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAQA;AACA;AACA;AARA;AAWA;AACA;AAEA;AACA;AAEA;AAKA;AAKA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AAiBA;AAAA;AAfA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;;;;;;;;;;;;;;;;;;;;ACjMA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AAAA;AAEA;AAKA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AA7BA;AAoCA;AAcA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA1EA;AACA;AACA;AACA;AALA;AA+EA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAVA;AAWA;AACA;AACA;A;;;;;;;;;;;;;;;;;;;;;AC7IA;AACA;AACA;AACA;AAsCA;AAcA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAIA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAvGA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;A;;;;;;;;;;;;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA;AACA;AACA;AACA;AACA;A;;;;;;;;;;;;;;;AClHA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;AAUA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;A;;;;;;;;;;;;;;;;;;;;ACjgBA;AACA;AACA;AACA;A;;;;;;;;;;;;;ACzHA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;A;;;;;;;;;;;;;ACzDA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;;;;;;;;;ACbvBA;AACA;AAGA;AAGA;AAGA;;;;;;;;;;;;AAYA;AACA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AAIA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAkBA;;;;;;;AAOA;AACA;AAWA;AAAA;AAEA;AACA;;;;;;AAMA;AACA;AAOA;AACA;AACA;;;;;;AAMA;AACA;AAMA;AACA;AACA;;;;;;AAMA;AACA;AAMA;AACA;AAEA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAvGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrIA;AACA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;A;;;;;;;;;;;;;;;ACzNA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;A;;;;;;;;;;;;;;;ACpGA;AAIA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;A;;;;;;;;;;;;;;AC1DA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;A;;A","sourceRoot":""}