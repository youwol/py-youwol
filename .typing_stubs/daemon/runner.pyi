# third parties
from _typeshed import Incomplete

# relative
from . import pidfile as pidfile
from .daemon import DaemonContext as DaemonContext
from .daemon import basestring as basestring
from .daemon import unicode as unicode

ProcessLookupError = NotImplemented
__metaclass__ = type

class DaemonRunnerError(Exception):
    def __init__(self, *args, **kwargs) -> None: ...

class DaemonRunnerInvalidActionError(DaemonRunnerError, ValueError): ...
class DaemonRunnerStartFailureError(DaemonRunnerError, RuntimeError): ...
class DaemonRunnerStopFailureError(DaemonRunnerError, RuntimeError): ...

class DaemonRunner:
    start_message: str
    app: Incomplete
    daemon_context: Incomplete
    pidfile: Incomplete
    def __init__(self, app) -> None: ...
    action: Incomplete
    def parse_args(self, argv: Incomplete | None = ...) -> None: ...
    action_funcs: Incomplete
    def do_action(self) -> None: ...

def emit_message(message, stream: Incomplete | None = ...) -> None: ...
def make_pidlockfile(path, acquire_timeout): ...
def is_pidfile_stale(pidfile): ...
