# third parties
from _typeshed import Incomplete
from watchdog.events import EVENT_TYPE_CREATED as EVENT_TYPE_CREATED
from watchdog.events import EVENT_TYPE_DELETED as EVENT_TYPE_DELETED
from watchdog.events import EVENT_TYPE_MOVED as EVENT_TYPE_MOVED
from watchdog.events import DirCreatedEvent as DirCreatedEvent
from watchdog.events import DirDeletedEvent as DirDeletedEvent
from watchdog.events import DirModifiedEvent as DirModifiedEvent
from watchdog.events import DirMovedEvent as DirMovedEvent
from watchdog.events import FileCreatedEvent as FileCreatedEvent
from watchdog.events import FileDeletedEvent as FileDeletedEvent
from watchdog.events import FileModifiedEvent as FileModifiedEvent
from watchdog.events import FileMovedEvent as FileMovedEvent
from watchdog.events import generate_sub_moved_events as generate_sub_moved_events
from watchdog.observers.api import DEFAULT_EMITTER_TIMEOUT as DEFAULT_EMITTER_TIMEOUT
from watchdog.observers.api import DEFAULT_OBSERVER_TIMEOUT as DEFAULT_OBSERVER_TIMEOUT
from watchdog.observers.api import BaseObserver as BaseObserver
from watchdog.observers.api import EventEmitter as EventEmitter
from watchdog.utils import platform as platform
from watchdog.utils.dirsnapshot import DirectorySnapshot as DirectorySnapshot

MAX_EVENTS: int
O_EVTONLY: int
WATCHDOG_OS_OPEN_FLAGS = O_EVTONLY
WATCHDOG_KQ_FILTER: Incomplete
WATCHDOG_KQ_EV_FLAGS: Incomplete
WATCHDOG_KQ_FFLAGS: Incomplete

def absolute_path(path): ...
def is_deleted(kev): ...
def is_modified(kev): ...
def is_attrib_modified(kev): ...
def is_renamed(kev): ...

class KeventDescriptorSet:
    def __init__(self) -> None: ...
    @property
    def kevents(self): ...
    @property
    def paths(self): ...
    def get_for_fd(self, fd): ...
    def get(self, path): ...
    def __contains__(self, path) -> bool: ...
    def add(self, path, is_directory) -> None: ...
    def remove(self, path) -> None: ...
    def clear(self) -> None: ...

class KeventDescriptor:
    def __init__(self, path, is_directory) -> None: ...
    @property
    def fd(self): ...
    @property
    def path(self): ...
    @property
    def kevent(self): ...
    @property
    def is_directory(self): ...
    def close(self) -> None: ...
    @property
    def key(self): ...
    def __eq__(self, descriptor): ...
    def __ne__(self, descriptor): ...
    def __hash__(self): ...

class KqueueEmitter(EventEmitter):
    def __init__(self, event_queue, watch, timeout=..., stat=...) -> None: ...
    def queue_event(self, event) -> None: ...
    def queue_events(self, timeout) -> None: ...
    def on_thread_stop(self) -> None: ...

class KqueueObserver(BaseObserver):
    def __init__(self, timeout=...) -> None: ...
