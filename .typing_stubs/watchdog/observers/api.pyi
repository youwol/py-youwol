# third parties
from watchdog.utils import BaseThread as BaseThread
from watchdog.utils.bricks import SkipRepeatsQueue as SkipRepeatsQueue

DEFAULT_EMITTER_TIMEOUT: int
DEFAULT_OBSERVER_TIMEOUT: int

class EventQueue(SkipRepeatsQueue): ...

class ObservedWatch:
    def __init__(self, path, recursive) -> None: ...
    @property
    def path(self): ...
    @property
    def is_recursive(self): ...
    @property
    def key(self): ...
    def __eq__(self, watch): ...
    def __ne__(self, watch): ...
    def __hash__(self): ...

class EventEmitter(BaseThread):
    def __init__(self, event_queue, watch, timeout=...) -> None: ...
    @property
    def timeout(self): ...
    @property
    def watch(self): ...
    def queue_event(self, event) -> None: ...
    def queue_events(self, timeout) -> None: ...
    def run(self) -> None: ...

class EventDispatcher(BaseThread):
    def __init__(self, timeout=...) -> None: ...
    @property
    def timeout(self): ...
    def stop(self) -> None: ...
    @property
    def event_queue(self): ...
    def dispatch_events(self, event_queue) -> None: ...
    def run(self) -> None: ...

class BaseObserver(EventDispatcher):
    def __init__(self, emitter_class, timeout=...) -> None: ...
    @property
    def emitters(self): ...
    def start(self) -> None: ...
    def schedule(self, event_handler, path, recursive: bool = ...): ...
    def add_handler_for_watch(self, event_handler, watch) -> None: ...
    def remove_handler_for_watch(self, event_handler, watch) -> None: ...
    def unschedule(self, watch) -> None: ...
    def unschedule_all(self) -> None: ...
    def on_thread_stop(self) -> None: ...
    def dispatch_events(self, event_queue) -> None: ...
