# standard library
import pickle

# third parties
from _typeshed import Incomplete
from deepdiff.helper import TEXT_VIEW as TEXT_VIEW
from deepdiff.helper import get_type as get_type
from deepdiff.helper import json_convertor_default as json_convertor_default
from deepdiff.helper import strings as strings
from deepdiff.model import DeltaResult as DeltaResult

logger: Incomplete

class UnsupportedFormatErr(TypeError): ...

NONE_TYPE: Incomplete
CSV_HEADER_MAX_CHUNK_SIZE: int
MODULE_NOT_FOUND_MSG: str
FORBIDDEN_MODULE_MSG: str
DELTA_IGNORE_ORDER_NEEDS_REPETITION_REPORT: str
DELTA_ERROR_WHEN_GROUP_BY: str
SAFE_TO_IMPORT: Incomplete

class ModuleNotFoundError(ImportError): ...
class ForbiddenModule(ImportError): ...

class SerializationMixin:
    def to_json_pickle(self): ...
    @classmethod
    def from_json_pickle(cls, value): ...
    def to_json(self, default_mapping: Incomplete | None = ..., **kwargs): ...
    def to_dict(self, view_override: Incomplete | None = ...): ...
    def pretty(self): ...

class _RestrictedUnpickler(pickle.Unpickler):
    safe_to_import: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def find_class(self, module, name): ...
    def persistent_load(self, persistent_id): ...

class _RestrictedPickler(pickle.Pickler):
    def persistent_id(self, obj): ...

def pickle_dump(obj, file_obj: Incomplete | None = ...): ...
def pickle_load(content, safe_to_import: Incomplete | None = ...): ...
def pretty_print_diff(diff): ...
def load_path_content(path, file_type: Incomplete | None = ...): ...
def save_content_to_path(
    content, path, file_type: Incomplete | None = ..., keep_backup: bool = ...
) -> None: ...
