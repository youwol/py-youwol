from .aiter_utils import AsyncIteratorContext
from _typeshed import Incomplete
from collections.abc import AsyncIterable, Awaitable

class StreamEmpty(Exception): ...

class Stream(AsyncIterable, Awaitable):
    def __init__(self, factory) -> None: ...
    def __aiter__(self): ...
    def __await__(self): ...
    def __or__(self, func): ...
    def __add__(self, value): ...
    def __getitem__(self, value): ...
    __iter__: Incomplete
    def stream(self): ...
    __aexit__: Incomplete
    async def __aenter__(self) -> None: ...

class Streamer(AsyncIteratorContext, Stream): ...

def streamcontext(aiterable): ...
def operator(func: Incomplete | None = ..., *, pipable: bool = ...): ...
