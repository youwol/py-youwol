from _typeshed import Incomplete
from collections.abc import Generator

def iterate(it): ...
async def preserve(ait) -> Generator[Incomplete, None, None]: ...
async def just(value) -> Generator[Incomplete, None, None]: ...
async def call(func, *args, **kwargs) -> Generator[Incomplete, None, None]: ...
async def throw(exc) -> Generator[None, None, None]: ...
async def empty() -> Generator[None, None, None]: ...
async def never() -> Generator[None, None, None]: ...
def repeat(value, times: Incomplete | None = ..., *, interval: int = ...): ...
def range(*args, interval: int = ...): ...
def count(start: int = ..., step: int = ..., *, interval: int = ...): ...
