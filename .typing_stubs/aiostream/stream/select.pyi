# standard library
from collections.abc import Generator

# third parties
from _typeshed import Incomplete

async def take(source, n) -> Generator[Incomplete, None, None]: ...
async def takelast(source, n) -> Generator[Incomplete, None, None]: ...
async def skip(source, n) -> Generator[Incomplete, None, None]: ...
async def skiplast(source, n) -> Generator[Incomplete, None, None]: ...
def getitem(source, index): ...
async def filter(source, func) -> Generator[Incomplete, None, None]: ...
async def until(source, func) -> Generator[Incomplete, None, None]: ...
async def takewhile(source, func) -> Generator[Incomplete, None, None]: ...
async def dropwhile(source, func) -> Generator[Incomplete, None, None]: ...
