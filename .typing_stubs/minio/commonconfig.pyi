# standard library
from abc import ABCMeta

# third parties
from _typeshed import Incomplete

# relative
from .error import MinioException as MinioException
from .helpers import quote as quote
from .sse import SseCustomerKey as SseCustomerKey
from .time import to_http_header as to_http_header
from .xml import SubElement as SubElement
from .xml import find as find
from .xml import findall as findall
from .xml import findtext as findtext

COPY: str
REPLACE: str
DISABLED: str
ENABLED: str
GOVERNANCE: str
COMPLIANCE: str

class Tags(dict):
    def __init__(self, for_object: bool = ...) -> None: ...
    def __setitem__(self, key, value) -> None: ...
    @classmethod
    def new_bucket_tags(cls): ...
    @classmethod
    def new_object_tags(cls): ...
    @classmethod
    def fromxml(cls, element): ...
    def toxml(self, element): ...

class Tag:
    def __init__(self, key, value) -> None: ...
    @property
    def key(self): ...
    @property
    def value(self): ...
    @classmethod
    def fromxml(cls, element): ...
    def toxml(self, element): ...

class AndOperator:
    def __init__(
        self, prefix: Incomplete | None = ..., tags: Incomplete | None = ...
    ) -> None: ...
    @property
    def prefix(self): ...
    @property
    def tags(self): ...
    @classmethod
    def fromxml(cls, element): ...
    def toxml(self, element): ...

class Filter:
    def __init__(
        self,
        and_operator: Incomplete | None = ...,
        prefix: Incomplete | None = ...,
        tag: Incomplete | None = ...,
    ) -> None: ...
    @property
    def and_operator(self): ...
    @property
    def prefix(self): ...
    @property
    def tag(self): ...
    @classmethod
    def fromxml(cls, element): ...
    def toxml(self, element): ...

class BaseRule:
    __metaclass__ = ABCMeta
    def __init__(
        self, rule_filter: Incomplete | None = ..., rule_id: Incomplete | None = ...
    ) -> None: ...
    @property
    def rule_filter(self): ...
    @property
    def rule_id(self): ...
    @staticmethod
    def parsexml(element): ...
    def toxml(self, element): ...

def check_status(status) -> None: ...

class ObjectConditionalReadArgs:
    __metaclass__ = ABCMeta
    def __init__(
        self,
        bucket_name,
        object_name,
        region: Incomplete | None = ...,
        version_id: Incomplete | None = ...,
        ssec: Incomplete | None = ...,
        offset: Incomplete | None = ...,
        length: Incomplete | None = ...,
        match_etag: Incomplete | None = ...,
        not_match_etag: Incomplete | None = ...,
        modified_since: Incomplete | None = ...,
        unmodified_since: Incomplete | None = ...,
    ) -> None: ...
    @property
    def bucket_name(self): ...
    @property
    def object_name(self): ...
    @property
    def region(self): ...
    @property
    def version_id(self): ...
    @property
    def ssec(self): ...
    @property
    def offset(self): ...
    @property
    def length(self): ...
    @property
    def match_etag(self): ...
    @property
    def not_match_etag(self): ...
    @property
    def modified_since(self): ...
    @property
    def unmodified_since(self): ...
    def gen_copy_headers(self): ...

class CopySource(ObjectConditionalReadArgs):
    @classmethod
    def of(cls, src): ...

class ComposeSource(ObjectConditionalReadArgs):
    def __init__(
        self,
        bucket_name,
        object_name,
        region: Incomplete | None = ...,
        version_id: Incomplete | None = ...,
        ssec: Incomplete | None = ...,
        offset: Incomplete | None = ...,
        length: Incomplete | None = ...,
        match_etag: Incomplete | None = ...,
        not_match_etag: Incomplete | None = ...,
        modified_since: Incomplete | None = ...,
        unmodified_since: Incomplete | None = ...,
    ) -> None: ...
    def build_headers(self, object_size, etag) -> None: ...
    @property
    def object_size(self): ...
    @property
    def headers(self): ...
    @classmethod
    def of(cls, src): ...
