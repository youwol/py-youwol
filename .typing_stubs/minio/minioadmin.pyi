from _typeshed import Incomplete

class MinioAdmin:
    def __init__(self, target, binary_path: Incomplete | None = ..., config_dir: Incomplete | None = ..., ignore_cert_check: bool = ..., timeout: Incomplete | None = ..., env: Incomplete | None = ...) -> None: ...
    def service_restart(self): ...
    def service_stop(self): ...
    def update(self): ...
    def info(self): ...
    def user_add(self, access_key, secret_key): ...
    def user_disable(self, access_key): ...
    def user_enable(self, access_key): ...
    def user_remove(self, access_key): ...
    def user_info(self, access_key): ...
    def user_list(self): ...
    def group_add(self, group_name, members): ...
    def group_disable(self, group_name): ...
    def group_enable(self, group_name): ...
    def group_remove(self, group_name, members: Incomplete | None = ...): ...
    def group_info(self, group_name): ...
    def group_list(self): ...
    def policy_add(self, policy_name, policy_file): ...
    def policy_remove(self, policy_name): ...
    def policy_info(self, policy_name): ...
    def policy_list(self): ...
    def policy_set(self, policy_name, user: Incomplete | None = ..., group: Incomplete | None = ...): ...
    def policy_unset(self, policy_name, user: Incomplete | None = ..., group: Incomplete | None = ...): ...
    def config_get(self, key: Incomplete | None = ...): ...
    def config_set(self, key, config): ...
    def config_reset(self, key, name: Incomplete | None = ...): ...
    def config_remove(self, access_key): ...
    def config_history(self): ...
    def config_restore(self, restore_id): ...
    def profile_start(self, profilers=...): ...
    def profile_stop(self): ...
    def top_locks(self): ...
    def prometheus_generate(self): ...
    def kms_key_create(self, key: Incomplete | None = ...): ...
    def kms_key_status(self, key: Incomplete | None = ...): ...
    def bucket_remote_add(self, src_bucket, dest_url, path: Incomplete | None = ..., region: Incomplete | None = ..., bandwidth: Incomplete | None = ..., service: Incomplete | None = ...): ...
    def bucket_remote_edit(self, src_bucket, dest_url, arn): ...
    def bucket_remote_list(self, src_bucket: Incomplete | None = ..., service: Incomplete | None = ...): ...
    def bucket_remote_remove(self, src_bucket, arn): ...
    def bucket_quota_set(self, bucket, fifo: Incomplete | None = ..., hard: Incomplete | None = ...): ...
    def bucket_quota_clear(self, bucket): ...
    def bucket_quota_get(self, bucket): ...
