# standard library
from abc import ABCMeta

# third parties
from _typeshed import Incomplete

# relative
from .commonconfig import BaseRule as BaseRule
from .commonconfig import check_status as check_status
from .time import from_iso8601utc as from_iso8601utc
from .time import to_iso8601utc as to_iso8601utc
from .xml import Element as Element
from .xml import SubElement as SubElement
from .xml import find as find
from .xml import findall as findall
from .xml import findtext as findtext

class DateDays:
    __metaclass__ = ABCMeta
    def __init__(
        self, date: Incomplete | None = ..., days: Incomplete | None = ...
    ) -> None: ...
    @property
    def date(self): ...
    @property
    def days(self): ...
    @staticmethod
    def parsexml(element): ...
    def toxml(self, element): ...

class Transition(DateDays):
    def __init__(
        self,
        date: Incomplete | None = ...,
        days: Incomplete | None = ...,
        storage_class: Incomplete | None = ...,
    ) -> None: ...
    @property
    def storage_class(self): ...
    @classmethod
    def fromxml(cls, element): ...
    def toxml(self, element): ...

class NoncurrentVersionTransition:
    def __init__(
        self,
        noncurrent_days: Incomplete | None = ...,
        storage_class: Incomplete | None = ...,
    ) -> None: ...
    @property
    def noncurrent_days(self): ...
    @property
    def storage_class(self): ...
    @classmethod
    def fromxml(cls, element): ...
    def toxml(self, element): ...

class NoncurrentVersionExpiration:
    def __init__(self, noncurrent_days: Incomplete | None = ...) -> None: ...
    @property
    def noncurrent_days(self): ...
    @classmethod
    def fromxml(cls, element): ...
    def toxml(self, element): ...

class Expiration(DateDays):
    def __init__(
        self,
        date: Incomplete | None = ...,
        days: Incomplete | None = ...,
        expired_object_delete_marker: Incomplete | None = ...,
    ) -> None: ...
    @property
    def expired_object_delete_marker(self): ...
    @classmethod
    def fromxml(cls, element): ...
    def toxml(self, element): ...

class AbortIncompleteMultipartUpload:
    def __init__(self, days_after_initiation: Incomplete | None = ...) -> None: ...
    @property
    def days_after_initiation(self): ...
    @classmethod
    def fromxml(cls, element): ...
    def toxml(self, element): ...

class Rule(BaseRule):
    def __init__(
        self,
        status,
        abort_incomplete_multipart_upload: Incomplete | None = ...,
        expiration: Incomplete | None = ...,
        rule_filter: Incomplete | None = ...,
        rule_id: Incomplete | None = ...,
        noncurrent_version_expiration: Incomplete | None = ...,
        noncurrent_version_transition: Incomplete | None = ...,
        transition: Incomplete | None = ...,
    ) -> None: ...
    @property
    def status(self): ...
    @property
    def abort_incomplete_multipart_upload(self): ...
    @property
    def expiration(self): ...
    @property
    def noncurrent_version_expiration(self): ...
    @property
    def noncurrent_version_transition(self): ...
    @property
    def transition(self): ...
    @classmethod
    def fromxml(cls, element): ...
    def toxml(self, element): ...

class LifecycleConfig:
    def __init__(self, rules) -> None: ...
    @property
    def rules(self): ...
    @classmethod
    def fromxml(cls, element): ...
    def toxml(self, element): ...
