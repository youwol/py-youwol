# third parties
from _typeshed import Incomplete

# relative
from .credentials import Credentials as Credentials
from .helpers import check_bucket_name as check_bucket_name
from .signer import get_credential_string as get_credential_string
from .signer import post_presign_v4 as post_presign_v4
from .time import from_iso8601utc as from_iso8601utc
from .time import to_amz_date as to_amz_date
from .time import to_iso8601utc as to_iso8601utc
from .xml import find as find
from .xml import findall as findall
from .xml import findtext as findtext

JSONDecodeError = ValueError

class Bucket:
    def __init__(self, name, creation_date) -> None: ...
    @property
    def name(self): ...
    @property
    def creation_date(self): ...
    def __eq__(self, other): ...
    def __hash__(self): ...

class ListAllMyBucketsResult:
    def __init__(self, buckets) -> None: ...
    @property
    def buckets(self): ...
    @classmethod
    def fromxml(cls, element): ...

class Object:
    def __init__(
        self,
        bucket_name,
        object_name,
        last_modified: Incomplete | None = ...,
        etag: Incomplete | None = ...,
        size: Incomplete | None = ...,
        metadata: Incomplete | None = ...,
        version_id: Incomplete | None = ...,
        is_latest: Incomplete | None = ...,
        storage_class: Incomplete | None = ...,
        owner_id: Incomplete | None = ...,
        owner_name: Incomplete | None = ...,
        content_type: Incomplete | None = ...,
        is_delete_marker: bool = ...,
    ) -> None: ...
    @property
    def bucket_name(self): ...
    @property
    def object_name(self): ...
    @property
    def is_dir(self): ...
    @property
    def last_modified(self): ...
    @property
    def etag(self): ...
    @property
    def size(self): ...
    @property
    def metadata(self): ...
    @property
    def version_id(self): ...
    @property
    def is_latest(self): ...
    @property
    def storage_class(self): ...
    @property
    def owner_id(self): ...
    @property
    def owner_name(self): ...
    @property
    def is_delete_marker(self): ...
    @property
    def content_type(self): ...
    @classmethod
    def fromxml(
        cls,
        element,
        bucket_name,
        is_delete_marker: bool = ...,
        encoding_type: Incomplete | None = ...,
    ): ...

def parse_list_objects(response, bucket_name: Incomplete | None = ...): ...

class CompleteMultipartUploadResult:
    def __init__(self, response) -> None: ...
    @property
    def bucket_name(self): ...
    @property
    def object_name(self): ...
    @property
    def location(self): ...
    @property
    def etag(self): ...
    @property
    def version_id(self): ...
    @property
    def http_headers(self): ...

class Part:
    def __init__(
        self,
        part_number,
        etag,
        last_modified: Incomplete | None = ...,
        size: Incomplete | None = ...,
    ) -> None: ...
    @property
    def part_number(self): ...
    @property
    def etag(self): ...
    @property
    def last_modified(self): ...
    @property
    def size(self): ...
    @classmethod
    def fromxml(cls, element): ...

class ListPartsResult:
    def __init__(self, response) -> None: ...
    @property
    def bucket_name(self): ...
    @property
    def object_name(self): ...
    @property
    def initiator_id(self): ...
    @property
    def initator_name(self): ...
    @property
    def owner_id(self): ...
    @property
    def owner_name(self): ...
    @property
    def storage_class(self): ...
    @property
    def part_number_marker(self): ...
    @property
    def next_part_number_marker(self): ...
    @property
    def max_parts(self): ...
    @property
    def is_truncated(self): ...
    @property
    def parts(self): ...

class Upload:
    def __init__(self, element, encoding_type: Incomplete | None = ...) -> None: ...
    @property
    def object_name(self): ...
    @property
    def initiator_id(self): ...
    @property
    def initator_name(self): ...
    @property
    def owner_id(self): ...
    @property
    def owner_name(self): ...
    @property
    def storage_class(self): ...
    @property
    def upload_id(self): ...
    @property
    def initiated_time(self): ...

class ListMultipartUploadsResult:
    def __init__(self, response) -> None: ...
    @property
    def bucket_name(self): ...
    @property
    def key_marker(self): ...
    @property
    def upload_id_marker(self): ...
    @property
    def next_key_marker(self): ...
    @property
    def next_upload_id_marker(self): ...
    @property
    def max_uploads(self): ...
    @property
    def is_truncated(self): ...
    @property
    def encoding_type(self): ...
    @property
    def uploads(self): ...

class PostPolicy:
    def __init__(self, bucket_name, expiration) -> None: ...
    def add_equals_condition(self, element, value) -> None: ...
    def remove_equals_condition(self, element) -> None: ...
    def add_starts_with_condition(self, element, value) -> None: ...
    def remove_starts_with_condition(self, element) -> None: ...
    def add_content_length_range_condition(self, lower_limit, upper_limit) -> None: ...
    def remove_content_length_range_condition(self) -> None: ...
    def form_data(self, creds, region): ...
    @property
    def bucket_name(self): ...

def parse_copy_object(response): ...

class EventIterable:
    def __init__(self, func) -> None: ...
    def __iter__(self): ...
    def __next__(self): ...
    def __enter__(self): ...
    def __exit__(self, exc_type, value, traceback) -> None: ...
