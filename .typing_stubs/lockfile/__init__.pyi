# typing
from typing import Union

# third parties
from _typeshed import Incomplete

# relative
from .linklockfile import LinkLockFile
from .mkdirlockfile import MkdirLockFile

class Error(Exception): ...
class LockError(Error): ...
class LockTimeout(LockError): ...
class AlreadyLocked(LockError): ...
class LockFailed(LockError): ...
class UnlockError(Error): ...
class NotLocked(UnlockError): ...
class NotMyLock(UnlockError): ...

class _SharedBase:
    path: Incomplete
    def __init__(self, path) -> None: ...
    def acquire(self, timeout: Incomplete | None = ...) -> None: ...
    def release(self) -> None: ...
    def __enter__(self): ...
    def __exit__(self, *_exc) -> None: ...

class LockBase(_SharedBase):
    lock_file: Incomplete
    hostname: Incomplete
    pid: Incomplete
    tname: Incomplete
    unique_name: Incomplete
    timeout: Incomplete
    def __init__(
        self, path, threaded: bool = ..., timeout: Incomplete | None = ...
    ) -> None: ...
    def is_locked(self) -> None: ...
    def i_am_locking(self) -> None: ...
    def break_lock(self) -> None: ...

def LinkFileLock(*args, **kwds): ...
def MkdirFileLock(*args, **kwds): ...
def SQLiteFileLock(*args, **kwds): ...
def locked(path, timeout: Incomplete | None = ...): ...

FileLock = Union[LinkLockFile, MkdirLockFile]
