---

name: Release

on:  # yamllint disable-line rule:truthy
  workflow_dispatch:
    inputs:
      final_version:
        description: |
          The final version. A corresponding release branch must exist.
        type: string

      final:
        description: |
          Build a final release, not a candidate.
        type: boolean
        default: false

      dry-run:
        description: |
          Do not publish anything.
        type: boolean
        default: true

  workflow_call:
    inputs:
      final_version:
        description: |
          The final version. A corresponding release branch must exist.
        type: string

      final:
        description: |
          Build a final release, not a candidate
        type: boolean
        default: false

      dry-run:
        description: |
          Do not publish anything. False by default when reusing this workflow.
        type: boolean
        default: false

permissions:
  contents: write

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      python_versions: ${{ steps.job-output.outputs.python_versions }}
      install_from: ${{ steps.job-output.outputs.install_from }}
      version: ${{ steps.bump_version.outputs.version }}
      commit: ${{ steps.bump_version.outputs.commit }}
      artifact: ${{ steps.bump_version.outputs.artifact }}

    steps:

      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_NESTOR_PYYOUWOL_PUSH }}
          ref: release/${{ inputs.final_version }}

      - name: Prepare Python 3.12
        id: prepare_python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install Publish Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-publish.txt

      - name: Set up GPG
        id: set_up_gpg
        uses: youwol/nestor/gpg/set_up@v3
        with:
          secret: ${{ secrets.NESTOR_GPG_PRIV }}

      - name: Bump Version to Release
        id: bump_version
        env:
          FINAL_VERSION: ${{ inputs.final_version }}
          FINAL: ${{ inputs.final }}
          GNUPGHOME: ${{ steps.set_up_gpg.outputs.gnupghome }}
        run: |
          if [ "x${FINAL}" = "xtrue" ]; then
            python version_management.py prepare_final
          else
            python version_management.py prepare_rc ${FINAL_VERSION}
          fi
          version=$(python version_management.py get_current)
          commit=$(git log -1 --pretty=%h)
          echo version=${version} >> $GITHUB_OUTPUT
          echo commit=${commit} >> $GITHUB_OUTPUT
          echo artifact="youwol-${version}-${commit}"  >> $GITHUB_OUTPUT
        shell: sh

      - name: Build Release
        id: build
        run: python -m build
        shell: sh

      - name: Bump Version to Next
        id: bump_version_next_release_candidate
        env:
          GNUPGHOME: ${{ steps.set_up_gpg.outputs.gnupghome }}
        run: python version_management.py restore_dev
        shell: sh

      - name: Upload Artifact for Release Candidate
        id: upload_artifact_rc
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.bump_version.outputs.artifact }}
          path: dist/youwol-${{ steps.bump_version.outputs.version }}*

      - name: Upload Artifact for configuration integration tests
        id: upload_artifact_conf_integration
        uses: actions/upload-artifact@v4
        with:
          name: config_integration-tests
          path: integrations/
          retention-days: 1

      - name: Push
        if: "! ${{ inputs.dry-run }}"
        id: publish_test_pypi
        run: |
          git push
        shell: sh

      - name: Job Output
        id: job-output
        run: |
         versions_json=$(python version_management.py python_versions)
         echo python_versions=${versions_json} >> $GITHUB_OUTPUT


  tests:
    name: "Test ${{ needs.build.outputs.version }} \
    on Python ${{ matrix.python_version }} \
    (${{ matrix.install_from }})"
    runs-on: ubuntu-latest
    needs: build
    strategy:
      max-parallel: 1
      matrix:
        python_version: ${{ fromJson(needs.build.outputs.python_versions) }}
        install_from: ['sources', 'wheel']

    steps:
      - name: Prepare Python ${{ matrix.python_version }}
        id: prepare_python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python_version }}

      - name: Download artifact
        id: download_artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.artifact }}

      - name: Install from wheel
        if: ${{ contains(matrix.install_from, 'wheel') }}
        id: install_wheel
        env:
          PYTHON_BIN: python${{ matrix.python_version }}
        run: |
          pipx install ./youwol-*.whl --python $PYTHON_BIN

      - name: Install from sources
        if: ${{ contains(matrix.install_from, 'sources') }}
        id: install_sources
        env:
          PYTHON_BIN: python${{ matrix.python_version }}
        run: |
          pipx install ./youwol-*.tar.gz --python $PYTHON_BIN

      - name: Prepare http-clients
        id: prepare_http-clients
        uses: youwol/nestor/ts/prepare@v3
        with:
          repository: youwol/http-clients
          ref: main
          path: ${{ runner.temp }}/http-clients

      - name: Prepare webpm-client
        id: prepare_webpm-client
        uses: youwol/nestor/ts/prepare@v3
        with:
          repository: youwol/webpm-client
          ref: main
          path: ${{ runner.temp }}/webpm-client

      - name: Prepare vsf-core
        id: prepare_vsf-core
        uses: youwol/nestor/ts/prepare@v3
        with:
          repository: youwol/vsf-core
          ref: main
          path: ${{ runner.temp }}/vsf-core

      - name: Prepare local-youwol-client
        id: prepare_local-youwol-client
        uses: youwol/nestor/ts/prepare@v3
        with:
          repository: youwol/local-youwol-client
          ref: main
          path: ${{ runner.temp }}/local-youwol-client

      - name: Download configuration for integration tests
        id: download_config
        uses: actions/download-artifact@v4
        with:
          name: config_integration-tests

      - name: Setup env for py-youwol running
        id: setup_env
        run: |
          echo "PY_YOUWOL_BIN=$(which youwol)" >> "$GITHUB_ENV"
          echo "PIP_FIND_LINKS=$(ls -1 $(pwd)/youwol-*.whl)" >> "$GITHUB_ENV"
        shell: sh

      - name: Run py-youwol with int conf
        id: run_py-youwol_int_conf
        uses: youwol/nestor/py-youwol/run@v3
        env:
          USERNAME_INTEGRATION_TESTS: ${{ secrets.USERNAME_INTEGRATION_TESTS }}
          PASSWORD_INTEGRATION_TESTS: ${{ secrets.PASSWORD_INTEGRATION_TESTS }}
          # yamllint disable rule:line-length
          USERNAME_INTEGRATION_TESTS_BIS: ${{ secrets.USERNAME_INTEGRATION_TESTS_BIS }}
          PASSWORD_INTEGRATION_TESTS_BIS: ${{ secrets.PASSWORD_INTEGRATION_TESTS_BIS }}
          CLIENT_SECRET_INTEGRATION_TESTS: ${{ secrets.CLIENT_SECRET_INTEGRATION_TESTS }}
          # yamllint enable rule:line-length
        with:
          coverage: false
          conf: ${{ steps.download_config.outputs.download-path }}/yw_config.py
          name: tests_${{ matrix.python_version }}_${{ matrix.install_from }}

      - name: Tests http-clients
        id: tests_http-clients
        working-directory: ${{ runner.temp }}/http-clients
        run: |
          yarn -s test --reporters=default --reporters=github-actions
        shell: sh

      - name: Tests webpm-client
        id: tests_webpm-client
        working-directory: ${{ runner.temp }}/webpm-client
        run: |
          yarn -s test --reporters=default --reporters=github-actions
        shell: sh

      - name: Tests vsf-core
        id: tests_vsf-core
        working-directory: ${{ runner.temp }}/vsf-core
        run: |
          yarn -s test --reporters=default --reporters=github-actions
        shell: sh

      - name: Tests local-youwol-client
        id: tests_local_youwol_client
        working-directory: ${{ runner.temp }}/local-youwol-client
        run: |
          yarn -s test --reporters=default --reporters=github-actions
        shell: sh

  pipeline_ts:
    name: Pipeline Typescript
    runs-on: ubuntu-latest
    steps:
      - name: Prepare repository
        id: prepare
        uses: youwol/nestor/py-youwol/prepare@v3

      - name: Prepare todo-app-ts repository
        id: prepare_todo-app-ts
        uses: youwol/nestor/ts/prepare@v3
        with:
          repository: youwol/todo-app-ts
          ref: ${{ inputs.todo-app-ts_ref }}
          path: ${{ runner.temp }}/todo-app-ts

      - name: Build todo-app-ts
        id: build_todo-app-ts
        uses: youwol/nestor/ts/build@v3
        with:
          skip: ${{ inputs.skip }}

  doc_app:
    name: Doc App
    uses: ./.github/workflows/subdir_typescript.yml
    with:
      directory: doc/front-app


  publish:
    name: Publish ${{ needs.build.outputs.version }}
    runs-on: ubuntu-latest
    needs:
      - build
      - pipeline_ts
      - tests
      - doc_app

    steps:
      - name: Checkout release branch
        id: checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_NESTOR_PYYOUWOL_PUSH }}
          ref: release/${{ inputs.final_version }}
          fetch-depth: 2

      - name: Prepare Python 3.12
        id: prepare_python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install Publish Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-publish.txt

      - name: Set up GPG
        id: set_up_gpg
        uses: youwol/nestor/gpg/set_up@v3
        with:
          secret: ${{ secrets.NESTOR_GPG_PRIV }}

      - name: Download artifact
        id: download_artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.artifact }}

      - name: Publish
        if: "! ${{ inputs.dry-run }}"
        id: publish
        env:
          GNUPGHOME: ${{ steps.set_up_gpg.outputs.gnupghome }}
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_NESTOR_UPLOAD_YOUWOL }}
          TWINE_REPOSITORY: pypi
          TWINE_NON_INTERACTIVE: batch
          VERSION: ${{ needs.build.outputs.version }}
          COMMIT: ${{ needs.build.outputs.commit }}
        run: |
          tag_msg_1st_line="Published release $VERSION on pypi.org"
          tag_msg_2nd_line="https://pypi.org/project/youwol/$VERSION/"
          twine upload --verbose youwol-$VERSION*
          git tag \
            -a "v$VERSION" \
            -m "${tag_msg_1st_line}" \
            -m "${tag_msg_2nd_line}" \
            $COMMIT
          git push --follow-tags
        shell: sh
