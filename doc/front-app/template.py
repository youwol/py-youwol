# standard library
import asyncio
import json
import os
import pprint
import shutil
import subprocess

from collections.abc import Iterable
from pathlib import Path
from typing import cast

# Youwol
import youwol

# Youwol Surrogate for next versions of Python
from youwol.utils.python_next.v3_12 import tomllib

# Youwol utilities
from youwol.utils import (
    PYPROJECT_TOML,
    AnyDict,
    parse_json,
    write_json,
    yw_doc_version,
    yw_repo_path,
)

# Youwol pipelines
from youwol.pipelines.pipeline_typescript_weback_npm import (
    Bundles,
    Dependencies,
    DevServer,
    MainModule,
    PackageType,
    RunTimeDeps,
    Template,
)
from youwol.pipelines.pipeline_typescript_weback_npm.regular import generate_template

folder_path = Path(__file__).parent

pkg_json_path = folder_path / "package.json"
pkg_json = parse_json(pkg_json_path)

# Before anything: sync the version of `./package.json` from `yw_doc_version()`,
# it will be used as 'single source of truth'.
pkg_json["version"] = yw_doc_version()
with open(pkg_json_path, "w", encoding="UTF-8") as fp:
    json.dump(pkg_json, fp, indent=4)
    fp.write("\n")

print(f"-  package's version synchronized to: {yw_doc_version()}")

externals_deps = {
    "@youwol/mkdocs-ts": "^0.6.2",
    "@youwol/rx-vdom": "^1.0.1",
    "@youwol/webpm-client": "^3.0.0",
    "rxjs": "^7.5.6",
    "@youwol/local-youwol-client": "^0.2.6",
    "@youwol/rx-tab-views": "^0.3.0",
    "@youwol/http-primitives": "^0.2.3",
}

in_bundle_deps = {}
dev_deps = {}

template = Template(
    path=folder_path,
    type=PackageType.APPLICATION,
    name=pkg_json["name"],
    version=pkg_json["version"],
    shortDescription=pkg_json["description"],
    author=pkg_json["author"],
    dependencies=Dependencies(
        runTime=RunTimeDeps(externals=externals_deps, includedInBundle=in_bundle_deps),
        devTime=dev_deps,
    ),
    bundles=Bundles(
        mainModule=MainModule(
            entryFile="./main.ts", loadDependencies=list(externals_deps.keys())
        ),
    ),
    userGuide=True,
    devServer=DevServer(port=3021)
)

generate_template(template)
shutil.copyfile(
    src=folder_path / ".template" / "src" / "auto-generated.ts",
    dst=folder_path / "src" / "auto-generated.ts",
)
for file in [
    "README.md",
    ".npmignore",
    ".prettierignore",
    "LICENSE",
    pkg_json_path.name,
    "tsconfig.json",
    "webpack.config.ts",
]:
    shutil.copyfile(src=folder_path / ".template" / file, dst=folder_path / file)

"""
Below is the generation of the file `src/auto-generated-toml`
"""
py_yw_folder = yw_repo_path()


def sync_autogenerated_toml_ts():
    """
    Generate the file `./src/auto-generated-toml.ts` from youwol's `project.toml`.
    """

    def format_pythons(project: AnyDict) -> str:
        keyword = "Programming Language :: Python :: "
        versions = [d.split(keyword)[1] for d in project["classifiers"] if keyword in d]
        return format_list([v for v in versions if v != "3"])

    def format_list(items: Iterable[str]) -> str:
        quoted_items = [f"'{item}'" for item in items]
        return f"[{', '.join(quoted_items)}],"

    dest_file = folder_path / "src" / "auto-generated-toml.ts"
    with open(py_yw_folder / PYPROJECT_TOML, "rb") as f:
        data = tomllib.load(f)
        ts = f"""export const youwolInfo = {{
    version: '{youwol.__version__}',
    pythons: {format_pythons(data['project'])}
}}
"""
        print("-  `auto-generated-toml.ts` generated:")
        print(ts)
        with open(dest_file, "w", encoding="UTF-8") as fp:
            fp.write(ts)


def sync_change_log():
    """
    Copies the youwol's `CHANGELOG.md` into `./assets` folder.
    """
    print("-  `CHANGELOG.md` file synchronized")
    shutil.copyfile(
        src=py_yw_folder / "CHANGELOG.md", dst=folder_path / "assets" / "CHANGELOG.md"
    )


sync_autogenerated_toml_ts()
sync_change_log()


def print_git_status():
    print("-  Check git status of committed autogenerated files")
    auto_generated_files = [
        f"./{pkg_json_path.name}",
        "./src/auto-generated-toml.ts",
        "./src/auto-generated.ts",
    ]
    for f in auto_generated_files:
        status_output = subprocess.check_output(
            ["git", "diff", f], cwd=folder_path, encoding="utf-8"
        )
        if not status_output:
            print(f"file {f} does not include modifications.")
        print(status_output)


print_git_status()

"""
Below is the generation of the documentation responses of the various py-youwol modules.
"""

try:
    from mkdocs_py_griffe import generate_api, Configuration, std_links
    import griffe
    print("Generate Python API files")
    print("#### youwol ####")

    DST = Path(__file__).parent / 'assets' / 'api'
    external_links ={
        **std_links(),
        'aiohttp': 'https://docs.aiohttp.org/en/stable/client_reference.html',
        'aiohttp.ClientResponse':
            'https://docs.aiohttp.org/en/stable/client_reference.html#aiohttp.ClientResponse',
        'aiohttp.ClientSession':
            'https://docs.aiohttp.org/en/stable/client_reference.html#aiohttp.ClientSession',
        'aiohttp.FormData':
            'https://docs.aiohttp.org/en/stable/client_reference.html#aiohttp.FormData',
        'aiohttp.TCPConnector':
            'https://docs.aiohttp.org/en/stable/client_reference.html#aiohttp.TCPConnector',
        'aiohttp.web_request.Request':
            'https://docs.aiohttp.org/en/stable/client_reference.html#aiohttp.web.Request',
        'fastapi.APIRouter': 'https://fastapi.tiangolo.com/reference/apirouter/',
        'fastapi.Depends': 'https://fastapi.tiangolo.com/tutorial/dependencies/',
        'fastapi.FastAPI': '',
        'fastapi.File': 'https://fastapi.tiangolo.com/tutorial/request-files/',
        'fastapi.HTTPException':
            'https://fastapi.tiangolo.com/reference/exceptions/',
        'fastapi.Query': 'https://fastapi.tiangolo.com/tutorial/query-params/',
        'fastapi.Request':
            'https://fastapi.tiangolo.com/advanced/using-request-directly/',
        'fastapi.UploadFile': 'https://fastapi.tiangolo.com/reference/uploadfile/',
        'fastapi.responses.FileResponse':
            'https://fastapi.tiangolo.com/advanced/custom-response/#fileresponse',
        'starlette.middleware.base.BaseHTTPMiddleware':
            'https://www.starlette.io/middleware/#basehttpmiddleware',
        'starlette.middleware.base.DispatchFunction':
            'https://www.starlette.io/middleware/#basehttpmiddleware',
        'starlette.middleware.base.RequestResponseEndpoint':
            'https://www.starlette.io/middleware/#basehttpmiddleware',
        'starlette.requests.Request': 'https://www.starlette.io/requests/',
        'starlette.responses.FileResponse':
            'https://www.starlette.io/responses/#fileresponse',
        'starlette.responses.JSONResponse':
            'https://www.starlette.io/responses/#jsonresponse',
        'starlette.responses.Response':
            'https://www.starlette.io/responses/#response',
        'starlette.responses.PlainTextResponse':
            'https://www.starlette.io/responses/#plaintextresponse',
        'starlette.types.ASGIApp':
            'https://github.com/encode/starlette/blob/master/starlette/types.py',
        'starlette.websockets.WebSocket': 'https://www.starlette.io/websockets/',
        'starlette.datastructures.URL': 'https://www.starlette.io/requests/',
        'starlette.exceptions.HTTPException':
            'https://www.starlette.io/exceptions/#httpexception',
        'pydantic.BaseModel':'https://docs.pydantic.dev/latest/api/base_model/',
        'jwt.PyJWKClient': 'https://pyjwt.readthedocs.io/en/stable/usage.html',
        'minio.Minio': "https://min.io/docs/minio/linux/developers/python/API.html",
        "tqdm.tqdm":"https://tqdm.github.io/docs/tqdm/#tqdm-objects"
    }
    config_yw = Configuration(
        base_nav="/api/youwol",
        external_links=external_links,
        out=DST
    )
    global_doc = cast(griffe.Module, griffe.load("youwol", submodules=True))
    generate_api(global_doc, config_yw)

    print("#### yw_clients ####")

    config_clients = Configuration(
        base_nav="/api/yw-clients",
        external_links=external_links,
        cross_linked_packages={
            "youwol": "/api/youwol"
        },
        out=DST
    )
    import yw_clients
    clients_doc = cast(griffe.Module, griffe.load('yw_clients', submodules=True))
    generate_api(clients_doc, config_clients)

except ModuleNotFoundError:
    print("mkdocs_py_griffe not available: API documentation files not generated.")


