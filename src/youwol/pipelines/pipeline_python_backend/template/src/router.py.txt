"""
Module gathering the definition of endpoints.
"""

import asyncio
import time
import zipfile
from io import BytesIO

import cowsay # type: ignore
from fastapi import APIRouter, Depends, Query
from starlette.requests import Request
from starlette.responses import JSONResponse, Response
from yw_clients import FuturesResponse, ProxiedBackendContext, text_reader
from yw_clients.http.assets import NewAssetBody

from {{package_name}}.environment import Configuration, Environment
from {{package_name}}.schemas import (AsyncTaskResult, CowSayBody,
                                     CustomAssetBody)

router = APIRouter()
"""
The router object.
"""


@router.get("/")
async def home():
    """
    When proxied through py-youwol, this end point is always triggered when
    testing whether a backend is listening.
    """
    return Response(status_code=200)


@router.get("/hello-world")
async def hello_world(
    request: Request, config: Configuration = Depends(Environment.get_config)
):
    """
    How-to 'create and end-point & log messages'.

    This example illustrates the usage of retrieving a context for a proxied backend.

    Parameters:
        request: Incoming request.
        config: Injected configuration.

    Return:
        A JSON response `{"endpoint": "/hello-world"}`

    """
    async with config.context(request).start(action="/hello-world") as ctx:
        await ctx.info("Hello world")
        return JSONResponse({"endpoint": "/hello-world"})


@router.post("/cow-say")
async def cow_say(
    body: CowSayBody,
):
    """
    Howto 'handle a `POST` request'.
    It returns a `cow-say` message given inputs in the parameter `body`.

    Parameters:
        body: Request's body.

    Returns:
        Text message representing the cow-say.
    """
    return cowsay.get_output_string(body.character, body.message)


@router.get("/async-job")
async def async_job(
    request: Request,
    channel_id: str = Query(alias="channel-id", default=str(time.time() * 1e6)),
    config: Configuration = Depends(Environment.get_config),
):
    """
    Howto 'create asynchronous computations'.

    This example triggers a long-running job (ticking every second for 10 seconds),
    sending the result in the `/ws-data` websocket of py-youwol (can be monitored from the
    developer-portal application's debug panel, tab 'network').
    The endpoint does not wait for the computations to finish, it completes right away.

    To be callable from the default JavaScript client, such asynchronous computations **must**
    declare an optional query parameter with alias 'channel-id' used to instantiate the
    `FuturesResponse`.

    Parameters:
        request: Incoming request.
        channel_id: Optional provided channel_id. If not provided, pick the epoch in second.
        config: Injected configuration.
    Return:
         An acknowledged response (status code `202`), including the `channel_id` to be able to
         retrieve the results of the scheduled computation from the websocket `/ws-data`.
    """

    async def tick_every_second(
        streamer: FuturesResponse, context: ProxiedBackendContext
    ):
        # the next `context.start` is not mandatory, its purpose is to improve logs organization
        # (it gathers the logs into a parent node `tick_every_second`).
        async with context.start(action="tick_every_second") as ctx_ticks:
            for i in range(1, 11):
                await streamer.next(
                    AsyncTaskResult(result=f"Second {i}"), context=ctx_ticks
                )
                await asyncio.sleep(1)
            await streamer.close(context=ctx_ticks)

    async with config.context(request).start(action="/async-job") as ctx:
        response = FuturesResponse(channel_id=channel_id)
        await ctx.info("Use web socket to send async. messages")
        asyncio.ensure_future(tick_every_second(response, ctx))
        return response


@router.get("/read-file")
async def read_file(
    request: Request,
    file_id: str = Query(
        alias="file-id", default="8f94c951-7b37-4340-abae-1ba2fec0fe07"
    ),
    config: Configuration = Depends(Environment.get_config),
):
    """
    Howto 'read a file'.

    This example illustrates how to read a file through the `context.env.assets_gateway` client,
    and how to forward authorization (using `ctx.cookies()`) & trace info (using `ctx.headers()`).

    Parameters:
        request: Incoming request.
        file_id: The file ID (retrieved from the application `@youwol/explorer` with right-click).
            If not provided, the `file_id` refers to the file with the path
            `youwol-users/Default drive/galapagosData/allChambers-T.ts`.
        config: Injected configuration.
    Return:
        A JSON response with an attribute 'content' being the (text) content of the file.
    """
    async with config.context(request).start(action="/read-file") as ctx:
        file_client = ctx.env.assets_gateway.files()
        await ctx.info(f"Read the file with fileId={file_id}")

        content = await file_client.get(
            file_id=file_id,
            reader=text_reader,
            #  'cookies' encode authorisation
            cookies=ctx.cookies(),
            headers=ctx.headers(),
        )
        return JSONResponse({"content": content})


@router.post("/write-file")
async def write_file(
    request: Request,
    file_id: str = Query(alias="file-id", default="a-default-id-for-generated-file"),
    config: Configuration = Depends(Environment.get_config),
):
    """
    Howto 'write a file'.

    Parameters:
        request: Incoming request.
        file_id: The ID of the file created.
            If not provided, pick `a-default-id-for-generated-file`.
        config: Injected configuration.
    Return:
        A JSON response representing the asset created and its path.
    """
    async with config.context(request).start(action="/write-file") as ctx:
        files_client = ctx.env.assets_gateway.files()
        explorer_client = ctx.env.assets_gateway.explorer()

        await ctx.info(f"Write a file with fileId={file_id}")

        await ctx.info("Retrieve the user's default drive (to get a `folder_id`)")
        default_drive = await explorer_client.get_default_user_drive(
            cookies=ctx.cookies(), headers=ctx.headers()
        )
        folder_id = default_drive.tmpFolderId
        await ctx.info(f"Upload file in folder {folder_id}", data=default_drive)
        asset = await files_client.upload(
            filename="{{package_name}}.uploaded.txt",
            content_type="text/plain",
            content="the content of the file",
            file_id=file_id,
            params={"folder-id": folder_id},
            headers=ctx.headers(),
            cookies=ctx.cookies(),
        )

        await ctx.info("Retrieve the file's path in the explorer.")
        path = await explorer_client.get_path(
            item_id=asset.itemId, headers=ctx.headers(), cookies=ctx.cookies()
        )
        return {"asset": asset, "explorerPath": path}


@router.post("/create-asset")
async def create_asset(
    request: Request,
    body: CustomAssetBody,
    config: Configuration = Depends(Environment.get_config),
):
    """
    How-to 'create a custom asset' and bind an initial set of files.

    An in-memory zip file is created with:
        *  `/file1.txt`: "Hello, this is the content of the first file."
        *  `/folder/file2.txt`: "And here is the content of the second file."

    Parameters:
        request: Incoming request.
        body: Asset description.
        config: Injected configuration.
    Return:
        A JSON response representing the asset created and its path.
    """
    async with config.context(request).start(action="/create-asset") as ctx:
        await ctx.info(
            "Retrieves the user's default drive (to get a destination `folder_id`)"
        )

        explorer_client = ctx.env.assets_gateway.explorer()
        default_drive = await explorer_client.get_default_user_drive(
            cookies=ctx.cookies(), headers=ctx.headers()
        )

        await ctx.info(
            "Creates a new 'empty' asset (no files associated) in `system/tmp` folder."
        )

        assets_client = ctx.env.assets_gateway.assets()
        asset = await assets_client.create_asset(
            body=NewAssetBody(
                rawId=body.id,
                name=body.name,
                kind="{{package_name}}-project",
                description=body.description,
                tags=body.tags,
            ),
            params={"folder-id": default_drive.tmpFolderId},
            headers=ctx.headers(),
            cookies=ctx.cookies(),
        )

        await ctx.info("Post a .zip file to populate the asset.")
        zip_data = create_zip()
        await assets_client.add_zip_files(
            asset_id=asset.assetId,
            data=zip_data,
            cookies=ctx.cookies(),
            headers=ctx.headers(),
        )

        await ctx.info("Retrieves the first file 'file1.txt'")

        file1 = await assets_client.get_file(
            asset_id=asset.assetId,
            path="file1.txt",
            reader=text_reader,
            cookies=ctx.cookies(),
            headers=ctx.headers(),
        )

        await ctx.info("Retrieves the second file 'folder/file2.txt'")

        file2 = await assets_client.get_file(
            asset_id=asset.assetId,
            path="folder/file2.txt",
            reader=text_reader,
            cookies=ctx.cookies(),
            headers=ctx.headers(),
        )
        return {"asset": asset, "/file1": file1, "/folder/file2": file2}


def create_zip() -> bytes:
    """
    This function creates a predefined zip file in memory with two files in it:
    *  `file1.txt` with the content "Hello, this is the content of the first file."
    *  `folder/file2.txt` with the content "And here is the content of the second file."
    """
    in_memory_zip = BytesIO()
    with zipfile.ZipFile(
        in_memory_zip, mode="w", compression=zipfile.ZIP_DEFLATED
    ) as zf:
        zf.writestr("file1.txt", b"Hello, this is the content of the first file.")
        zf.writestr("folder/file2.txt", b"And here is the content of the second file.")

    in_memory_zip.seek(0)
    return in_memory_zip.read()
